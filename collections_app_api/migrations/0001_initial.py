# Generated by Django 4.2.7 on 2024-12-10 22:41

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthtokenToken',
            fields=[
                ('key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('created', models.DateTimeField()),
            ],
            options={
                'db_table': 'authtoken_token',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionsAppApiCollectionsrecordset',
            fields=[
                ('recordset_id', models.CharField(max_length=235, primary_key=True, serialize=False)),
                ('recordsetName', models.CharField(db_column='recordsetName', max_length=255)),
            ],
            options={
                'db_table': 'collections_app_api_collectionsrecordset',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionsAppApiGalapagateway',
            fields=[
                ('galapagatewaykey', models.BigAutoField(db_column='galapagatewayKey', primary_key=True, serialize=False)),
                ('recordset_id', models.CharField(blank=True, max_length=45, null=True)),
                ('recordsetName_id', models.CharField(db_column='recordsetName_id', max_length=32)),
                ('occurrence_id', models.CharField(db_column='occurrence_id', max_length=45, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=235, null=True)),
                ('taxon_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'collections_app_api_galapagateway',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionsAppApiOccurrence',
            fields=[
                ('key', models.BigIntegerField(primary_key=True, serialize=False)),
                ('occurrence_id', models.CharField(max_length=255)),
                ('publishing_country', models.CharField(max_length=2)),
                ('protocol', models.CharField(max_length=50)),
                ('last_crawled', models.DateTimeField()),
                ('last_parsed', models.DateTimeField()),
                ('crawl_id', models.IntegerField()),
                ('basis_of_record', models.CharField(max_length=255)),
                ('occurrence_status', models.CharField(max_length=255)),
                ('sex', models.CharField(blank=True, max_length=50, null=True)),
                ('life_stage', models.CharField(blank=True, max_length=50, null=True)),
                ('scientific_name', models.CharField(max_length=255)),
                ('decimal_latitude', models.FloatField(blank=True, null=True)),
                ('decimal_longitude', models.FloatField(blank=True, null=True)),
                ('elevation', models.FloatField(blank=True, null=True)),
                ('continent', models.CharField(blank=True, max_length=255, null=True)),
                ('state_province', models.CharField(blank=True, max_length=255, null=True)),
                ('water_body', models.CharField(blank=True, max_length=255, null=True)),
                ('higher_geography', models.TextField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('month', models.IntegerField(blank=True, null=True)),
                ('day', models.IntegerField(blank=True, null=True)),
                ('event_date', models.DateField(blank=True, null=True)),
                ('start_day_of_year', models.IntegerField(blank=True, null=True)),
                ('end_day_of_year', models.IntegerField(blank=True, null=True)),
                ('type_status', models.CharField(blank=True, max_length=255, null=True)),
                ('issues', models.JSONField()),
                ('modified', models.DateTimeField()),
                ('last_interpreted', models.DateTimeField()),
                ('license', models.CharField(max_length=200)),
                ('is_sequenced', models.IntegerField()),
                ('identifiers', models.JSONField()),
                ('media', models.JSONField()),
                ('facts', models.JSONField()),
                ('relations', models.JSONField()),
                ('institution_key', models.CharField(max_length=235)),
                ('collection_key', models.CharField(max_length=235)),
                ('is_in_cluster', models.IntegerField()),
                ('recorded_by', models.CharField(blank=True, max_length=255, null=True)),
                ('identified_by', models.CharField(blank=True, max_length=255, null=True)),
                ('preparations', models.CharField(blank=True, max_length=255, null=True)),
                ('geodetic_datum', models.CharField(max_length=255)),
                ('record_number', models.CharField(blank=True, max_length=255, null=True)),
                ('verbatim_event_date', models.CharField(blank=True, max_length=255, null=True)),
                ('island_group', models.CharField(blank=True, max_length=255, null=True)),
                ('island', models.CharField(blank=True, max_length=255, null=True)),
                ('locality', models.TextField(blank=True, null=True)),
                ('verbatim_locality', models.TextField(blank=True, null=True)),
                ('collection_code', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('occurrence_remarks', models.TextField(blank=True, null=True)),
                ('verbatim_elevation', models.CharField(blank=True, max_length=255, null=True)),
                ('higher_classification', models.TextField(blank=True, null=True)),
                ('georeference_sources', models.TextField(blank=True, null=True)),
                ('publishing_org', models.CharField(max_length=235)),
                ('recordsetName_id', models.CharField(db_column='recordsetName_id', max_length=235)),
                ('taxon_id', models.IntegerField()),
                ('model_url', models.TextField(blank=True, null=True)),
                ('django_last_modified', models.DateTimeField(blank=True, null=True)),
                ('django_modified_by', models.ForeignKey(blank=True, null=True, on_delete=models.deletion.SET_NULL, to='auth.User', editable=False)),
            ],
            options={
                'db_table': 'collections_app_api_occurrence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionsAppApiOrganization',
            fields=[
                ('publishing_org', models.CharField(max_length=235, primary_key=True, serialize=False)),
                ('organizationid', models.CharField(db_column='organizationID', max_length=255)),
                ('organizationname', models.CharField(db_column='organizationName', max_length=255)),
            ],
            options={
                'db_table': 'collections_app_api_organization',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CollectionsAppApiSpecies',
            fields=[
                ('key', models.CharField(max_length=235, primary_key=True, serialize=False)),
                ('taxonKey', models.CharField(db_column='taxonKey', max_length=255)),
            ],
            options={
                'db_table': 'collections_app_api_species',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
    ]
