{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar d3 = require('@plotly/d3');\nvar interpolateNumber = require('d3-interpolate').interpolateNumber;\nvar Plotly = require('../../plot_api/plot_api');\nvar Fx = require('../../components/fx');\nvar Lib = require('../../lib');\nvar strTranslate = Lib.strTranslate;\nvar Drawing = require('../../components/drawing');\nvar tinycolor = require('tinycolor2');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nfunction performPlot(parcatsModels, graphDiv, layout, svg) {\n  var isStatic = graphDiv._context.staticPlot;\n  var viewModels = parcatsModels.map(createParcatsViewModel.bind(0, graphDiv, layout));\n\n  // Get (potentially empty) parcatslayer selection with bound data to single element array\n  var layerSelection = svg.selectAll('g.parcatslayer').data([null]);\n\n  // Initialize single parcatslayer group if it doesn't exist\n  layerSelection.enter().append('g').attr('class', 'parcatslayer').style('pointer-events', isStatic ? 'none' : 'all');\n\n  // Bind data to children of layerSelection and get reference to traceSelection\n  var traceSelection = layerSelection.selectAll('g.trace.parcats').data(viewModels, key);\n\n  // Initialize group for each trace/dimensions\n  var traceEnter = traceSelection.enter().append('g').attr('class', 'trace parcats');\n\n  // Update properties for each trace\n  traceSelection.attr('transform', function (d) {\n    return strTranslate(d.x, d.y);\n  });\n\n  // Initialize paths group\n  traceEnter.append('g').attr('class', 'paths');\n\n  // Update paths transform\n  var pathsSelection = traceSelection.select('g.paths');\n\n  // Get paths selection\n  var pathSelection = pathsSelection.selectAll('path.path').data(function (d) {\n    return d.paths;\n  }, key);\n\n  // Update existing path colors\n  pathSelection.attr('fill', function (d) {\n    return d.model.color;\n  });\n\n  // Create paths\n  var pathSelectionEnter = pathSelection.enter().append('path').attr('class', 'path').attr('stroke-opacity', 0).attr('fill', function (d) {\n    return d.model.color;\n  }).attr('fill-opacity', 0);\n  stylePathsNoHover(pathSelectionEnter);\n\n  // Set path geometry\n  pathSelection.attr('d', function (d) {\n    return d.svgD;\n  });\n\n  // sort paths\n  if (!pathSelectionEnter.empty()) {\n    // Only sort paths if there has been a change.\n    // Otherwise paths are already sorted or a hover operation may be in progress\n    pathSelection.sort(compareRawColor);\n  }\n\n  // Remove any old paths\n  pathSelection.exit().remove();\n\n  // Path hover\n  pathSelection.on('mouseover', mouseoverPath).on('mouseout', mouseoutPath).on('click', clickPath);\n\n  // Initialize dimensions group\n  traceEnter.append('g').attr('class', 'dimensions');\n\n  // Update dimensions transform\n  var dimensionsSelection = traceSelection.select('g.dimensions');\n\n  // Get dimension selection\n  var dimensionSelection = dimensionsSelection.selectAll('g.dimension').data(function (d) {\n    return d.dimensions;\n  }, key);\n\n  // Create dimension groups\n  dimensionSelection.enter().append('g').attr('class', 'dimension');\n\n  // Update dimension group transforms\n  dimensionSelection.attr('transform', function (d) {\n    return strTranslate(d.x, 0);\n  });\n\n  // Remove any old dimensions\n  dimensionSelection.exit().remove();\n\n  // Get category selection\n  var categorySelection = dimensionSelection.selectAll('g.category').data(function (d) {\n    return d.categories;\n  }, key);\n\n  // Initialize category groups\n  var categoryGroupEnterSelection = categorySelection.enter().append('g').attr('class', 'category');\n\n  // Update category transforms\n  categorySelection.attr('transform', function (d) {\n    return strTranslate(0, d.y);\n  });\n\n  // Initialize rectangle\n  categoryGroupEnterSelection.append('rect').attr('class', 'catrect').attr('pointer-events', 'none');\n\n  // Update rectangle\n  categorySelection.select('rect.catrect').attr('fill', 'none').attr('width', function (d) {\n    return d.width;\n  }).attr('height', function (d) {\n    return d.height;\n  });\n  styleCategoriesNoHover(categoryGroupEnterSelection);\n\n  // Initialize color band rects\n  var bandSelection = categorySelection.selectAll('rect.bandrect').data( /** @param {CategoryViewModel} catViewModel*/\n  function (catViewModel) {\n    return catViewModel.bands;\n  }, key);\n\n  // Raise all update bands to the top so that fading enter/exit bands will be behind\n  bandSelection.each(function () {\n    Lib.raiseToTop(this);\n  });\n\n  // Update band color\n  bandSelection.attr('fill', function (d) {\n    return d.color;\n  });\n  var bandsSelectionEnter = bandSelection.enter().append('rect').attr('class', 'bandrect').attr('stroke-opacity', 0).attr('fill', function (d) {\n    return d.color;\n  }).attr('fill-opacity', 0);\n  bandSelection.attr('fill', function (d) {\n    return d.color;\n  }).attr('width', function (d) {\n    return d.width;\n  }).attr('height', function (d) {\n    return d.height;\n  }).attr('y', function (d) {\n    return d.y;\n  }).attr('cursor', /** @param {CategoryBandViewModel} bandModel*/\n  function (bandModel) {\n    if (bandModel.parcatsViewModel.arrangement === 'fixed') {\n      return 'default';\n    } else if (bandModel.parcatsViewModel.arrangement === 'perpendicular') {\n      return 'ns-resize';\n    } else {\n      return 'move';\n    }\n  });\n  styleBandsNoHover(bandsSelectionEnter);\n  bandSelection.exit().remove();\n\n  // Initialize category label\n  categoryGroupEnterSelection.append('text').attr('class', 'catlabel').attr('pointer-events', 'none');\n  var paperColor = graphDiv._fullLayout.paper_bgcolor;\n\n  // Update category label\n  categorySelection.select('text.catlabel').attr('text-anchor', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return 'start';\n    } else {\n      // Place label to the left of category\n      return 'end';\n    }\n  }).attr('alignment-baseline', 'middle').style('text-shadow', svgTextUtils.makeTextShadow(paperColor)).style('fill', 'rgb(0, 0, 0)').attr('x', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return d.width + 5;\n    } else {\n      // Place label to the left of category\n      return -5;\n    }\n  }).attr('y', function (d) {\n    return d.height / 2;\n  }).text(function (d) {\n    return d.model.categoryLabel;\n  }).each( /** @param {CategoryViewModel} catModel*/\n  function (catModel) {\n    Drawing.font(d3.select(this), catModel.parcatsViewModel.categorylabelfont);\n    svgTextUtils.convertToTspans(d3.select(this), graphDiv);\n  });\n\n  // Initialize dimension label\n  categoryGroupEnterSelection.append('text').attr('class', 'dimlabel');\n\n  // Update dimension label\n  categorySelection.select('text.dimlabel').attr('text-anchor', 'middle').attr('alignment-baseline', 'baseline').attr('cursor', /** @param {CategoryViewModel} catModel*/\n  function (catModel) {\n    if (catModel.parcatsViewModel.arrangement === 'fixed') {\n      return 'default';\n    } else {\n      return 'ew-resize';\n    }\n  }).attr('x', function (d) {\n    return d.width / 2;\n  }).attr('y', -5).text(function (d, i) {\n    if (i === 0) {\n      // Add dimension label above topmost category\n      return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n    } else {\n      return null;\n    }\n  }).each( /** @param {CategoryViewModel} catModel*/\n  function (catModel) {\n    Drawing.font(d3.select(this), catModel.parcatsViewModel.labelfont);\n  });\n\n  // Category hover\n  // categorySelection.select('rect.catrect')\n  categorySelection.selectAll('rect.bandrect').on('mouseover', mouseoverCategoryBand).on('mouseout', mouseoutCategory);\n\n  // Remove unused categories\n  categorySelection.exit().remove();\n\n  // Setup drag\n  dimensionSelection.call(d3.behavior.drag().origin(function (d) {\n    return {\n      x: d.x,\n      y: 0\n    };\n  }).on('dragstart', dragDimensionStart).on('drag', dragDimension).on('dragend', dragDimensionEnd));\n\n  // Save off selections to view models\n  traceSelection.each(function (d) {\n    d.traceSelection = d3.select(this);\n    d.pathSelection = d3.select(this).selectAll('g.paths').selectAll('path.path');\n    d.dimensionSelection = d3.select(this).selectAll('g.dimensions').selectAll('g.dimension');\n  });\n\n  // Remove any orphan traces\n  traceSelection.exit().remove();\n}\n\n/**\n * Create / update parcat traces\n *\n * @param {Object} graphDiv\n * @param {Object} svg\n * @param {Array.<ParcatsModel>} parcatsModels\n * @param {Layout} layout\n */\nmodule.exports = function (graphDiv, svg, parcatsModels, layout) {\n  performPlot(parcatsModels, graphDiv, layout, svg);\n};\n\n/**\n * Function the returns the key property of an object for use with as D3 join function\n * @param d\n */\nfunction key(d) {\n  return d.key;\n}\n\n/** True if a category view model is in the right-most display dimension\n * @param {CategoryViewModel} d */\nfunction catInRightDim(d) {\n  var numDims = d.parcatsViewModel.dimensions.length;\n  var leftDimInd = d.parcatsViewModel.dimensions[numDims - 1].model.dimensionInd;\n  return d.model.dimensionInd === leftDimInd;\n}\n\n/**\n * @param {PathViewModel} a\n * @param {PathViewModel} b\n */\nfunction compareRawColor(a, b) {\n  if (a.model.rawColor > b.model.rawColor) {\n    return 1;\n  } else if (a.model.rawColor < b.model.rawColor) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Handle path mouseover\n * @param {PathViewModel} d\n */\nfunction mouseoverPath(d) {\n  if (!d.parcatsViewModel.dragDimension) {\n    // We're not currently dragging\n\n    if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      // hoverinfo is not skip, so we at least style the paths and emit interaction events\n\n      // Raise path to top\n      Lib.raiseToTop(this);\n      stylePathsHover(d3.select(this));\n\n      // Emit hover event\n      var points = buildPointsArrayForPath(d);\n      var constraints = buildConstraintsForPath(d);\n      d.parcatsViewModel.graphDiv.emit('plotly_hover', {\n        points: points,\n        event: d3.event,\n        constraints: constraints\n      });\n\n      // Handle hover label\n      if (d.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n        // hoverinfo is a combination of 'count' and 'probability'\n\n        // Mouse\n        var hoverX = d3.mouse(this)[0];\n\n        // Label\n        var gd = d.parcatsViewModel.graphDiv;\n        var trace = d.parcatsViewModel.trace;\n        var fullLayout = gd._fullLayout;\n        var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n        var graphDivBBox = d.parcatsViewModel.graphDiv.getBoundingClientRect();\n\n        // Find path center in path coordinates\n        var pathCenterX, pathCenterY, dimInd;\n        for (dimInd = 0; dimInd < d.leftXs.length - 1; dimInd++) {\n          if (d.leftXs[dimInd] + d.dimWidths[dimInd] - 2 <= hoverX && hoverX <= d.leftXs[dimInd + 1] + 2) {\n            var leftDim = d.parcatsViewModel.dimensions[dimInd];\n            var rightDim = d.parcatsViewModel.dimensions[dimInd + 1];\n            pathCenterX = (leftDim.x + leftDim.width + rightDim.x) / 2;\n            pathCenterY = (d.topYs[dimInd] + d.topYs[dimInd + 1] + d.height) / 2;\n            break;\n          }\n        }\n\n        // Find path center in root coordinates\n        var hoverCenterX = d.parcatsViewModel.x + pathCenterX;\n        var hoverCenterY = d.parcatsViewModel.y + pathCenterY;\n        var textColor = tinycolor.mostReadable(d.model.color, ['black', 'white']);\n        var count = d.model.count;\n        var prob = count / d.parcatsViewModel.model.count;\n        var labels = {\n          countLabel: count,\n          probabilityLabel: prob.toFixed(3)\n        };\n\n        // Build hover text\n        var hovertextParts = [];\n        if (d.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n          hovertextParts.push(['Count:', labels.countLabel].join(' '));\n        }\n        if (d.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n          hovertextParts.push(['P:', labels.probabilityLabel].join(' '));\n        }\n        var hovertext = hovertextParts.join('<br>');\n        var mouseX = d3.mouse(gd)[0];\n        Fx.loneHover({\n          trace: trace,\n          x: hoverCenterX - rootBBox.left + graphDivBBox.left,\n          y: hoverCenterY - rootBBox.top + graphDivBBox.top,\n          text: hovertext,\n          color: d.model.color,\n          borderColor: 'black',\n          fontFamily: 'Monaco, \"Courier New\", monospace',\n          fontSize: 10,\n          fontColor: textColor,\n          idealAlign: mouseX < hoverCenterX ? 'right' : 'left',\n          hovertemplate: (trace.line || {}).hovertemplate,\n          hovertemplateLabels: labels,\n          eventData: [{\n            data: trace._input,\n            fullData: trace,\n            count: count,\n            probability: prob\n          }]\n        }, {\n          container: fullLayout._hoverlayer.node(),\n          outerContainer: fullLayout._paper.node(),\n          gd: gd\n        });\n      }\n    }\n  }\n}\n\n/**\n * Handle path mouseout\n * @param {PathViewModel} d\n */\nfunction mouseoutPath(d) {\n  if (!d.parcatsViewModel.dragDimension) {\n    // We're not currently dragging\n    stylePathsNoHover(d3.select(this));\n\n    // Remove and hover label\n    Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n\n    // Restore path order\n    d.parcatsViewModel.pathSelection.sort(compareRawColor);\n\n    // Emit unhover event\n    if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      var points = buildPointsArrayForPath(d);\n      var constraints = buildConstraintsForPath(d);\n      d.parcatsViewModel.graphDiv.emit('plotly_unhover', {\n        points: points,\n        event: d3.event,\n        constraints: constraints\n      });\n    }\n  }\n}\n\n/**\n * Build array of point objects for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\nfunction buildPointsArrayForPath(d) {\n  var points = [];\n  var curveNumber = getTraceIndex(d.parcatsViewModel);\n  for (var i = 0; i < d.model.valueInds.length; i++) {\n    var pointNumber = d.model.valueInds[i];\n    points.push({\n      curveNumber: curveNumber,\n      pointNumber: pointNumber\n    });\n  }\n  return points;\n}\n\n/**\n * Build constraints object for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\nfunction buildConstraintsForPath(d) {\n  var constraints = {};\n  var dimensions = d.parcatsViewModel.model.dimensions;\n\n  // dimensions\n  for (var i = 0; i < dimensions.length; i++) {\n    var dimension = dimensions[i];\n    var category = dimension.categories[d.model.categoryInds[i]];\n    constraints[dimension.containerInd] = category.categoryValue;\n  }\n\n  // color\n  if (d.model.rawColor !== undefined) {\n    constraints.color = d.model.rawColor;\n  }\n  return constraints;\n}\n\n/**\n * Handle path click\n * @param {PathViewModel} d\n */\nfunction clickPath(d) {\n  if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n    // hoverinfo it's skip, so interaction events aren't disabled\n    var points = buildPointsArrayForPath(d);\n    var constraints = buildConstraintsForPath(d);\n    d.parcatsViewModel.graphDiv.emit('plotly_click', {\n      points: points,\n      event: d3.event,\n      constraints: constraints\n    });\n  }\n}\nfunction stylePathsNoHover(pathSelection) {\n  pathSelection.attr('fill', function (d) {\n    return d.model.color;\n  }).attr('fill-opacity', 0.6).attr('stroke', 'lightgray').attr('stroke-width', 0.2).attr('stroke-opacity', 1.0);\n}\nfunction stylePathsHover(pathSelection) {\n  pathSelection.attr('fill-opacity', 0.8).attr('stroke', function (d) {\n    return tinycolor.mostReadable(d.model.color, ['black', 'white']);\n  }).attr('stroke-width', 0.3);\n}\nfunction styleCategoryHover(categorySelection) {\n  categorySelection.select('rect.catrect').attr('stroke', 'black').attr('stroke-width', 2.5);\n}\nfunction styleCategoriesNoHover(categorySelection) {\n  categorySelection.select('rect.catrect').attr('stroke', 'black').attr('stroke-width', 1).attr('stroke-opacity', 1);\n}\nfunction styleBandsHover(bandsSelection) {\n  bandsSelection.attr('stroke', 'black').attr('stroke-width', 1.5);\n}\nfunction styleBandsNoHover(bandsSelection) {\n  bandsSelection.attr('stroke', 'black').attr('stroke-width', 0.2).attr('stroke-opacity', 1.0).attr('fill-opacity', 1.0);\n}\n\n/**\n * Return selection of all paths that pass through the specified category\n * @param {CategoryBandViewModel} catBandViewModel\n */\nfunction selectPathsThroughCategoryBandColor(catBandViewModel) {\n  var allPaths = catBandViewModel.parcatsViewModel.pathSelection;\n  var dimInd = catBandViewModel.categoryViewModel.model.dimensionInd;\n  var catInd = catBandViewModel.categoryViewModel.model.categoryInd;\n  return allPaths.filter( /** @param {PathViewModel} pathViewModel */\n  function (pathViewModel) {\n    return pathViewModel.model.categoryInds[dimInd] === catInd && pathViewModel.model.color === catBandViewModel.color;\n  });\n}\n\n/**\n * Perform hover styling for all paths that pass though the specified band element's category\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction styleForCategoryHovermode(bandElement) {\n  // Get all bands in the current category\n  var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect');\n\n  // Raise and style paths\n  bandSel.each(function (bvm) {\n    var paths = selectPathsThroughCategoryBandColor(bvm);\n    stylePathsHover(paths);\n    paths.each(function () {\n      // Raise path to top\n      Lib.raiseToTop(this);\n    });\n  });\n\n  // Style category\n  styleCategoryHover(d3.select(bandElement.parentNode));\n}\n\n/**\n * Perform hover styling for all paths that pass though the category of the specified band element and share the\n * same color\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction styleForColorHovermode(bandElement) {\n  var bandViewModel = d3.select(bandElement).datum();\n  var catPaths = selectPathsThroughCategoryBandColor(bandViewModel);\n  stylePathsHover(catPaths);\n  catPaths.each(function () {\n    // Raise path to top\n    Lib.raiseToTop(this);\n  });\n\n  // Style category for drag\n  d3.select(bandElement.parentNode).selectAll('rect.bandrect').filter(function (b) {\n    return b.color === bandViewModel.color;\n  }).each(function () {\n    Lib.raiseToTop(this);\n    styleBandsHover(d3.select(this));\n  });\n}\n\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\nfunction emitPointsEventCategoryHovermode(bandElement, eventName, event) {\n  // Get all bands in the current category\n  var bandViewModel = d3.select(bandElement).datum();\n  var categoryModel = bandViewModel.categoryViewModel.model;\n  var gd = bandViewModel.parcatsViewModel.graphDiv;\n  var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect');\n  var points = [];\n  bandSel.each(function (bvm) {\n    var paths = selectPathsThroughCategoryBandColor(bvm);\n    paths.each(function (pathViewModel) {\n      // Extend points array\n      Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n    });\n  });\n  var constraints = {};\n  constraints[categoryModel.dimensionInd] = categoryModel.categoryValue;\n  gd.emit(eventName, {\n    points: points,\n    event: event,\n    constraints: constraints\n  });\n}\n\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\nfunction emitPointsEventColorHovermode(bandElement, eventName, event) {\n  var bandViewModel = d3.select(bandElement).datum();\n  var categoryModel = bandViewModel.categoryViewModel.model;\n  var gd = bandViewModel.parcatsViewModel.graphDiv;\n  var paths = selectPathsThroughCategoryBandColor(bandViewModel);\n  var points = [];\n  paths.each(function (pathViewModel) {\n    // Extend points array\n    Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n  });\n  var constraints = {};\n  constraints[categoryModel.dimensionInd] = categoryModel.categoryValue;\n  // color\n  if (bandViewModel.rawColor !== undefined) {\n    constraints.color = bandViewModel.rawColor;\n  }\n  gd.emit(eventName, {\n    points: points,\n    event: event,\n    constraints: constraints\n  });\n}\n\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement) {\n  gd._fullLayout._calcInverseTransform(gd);\n  var scaleX = gd._fullLayout._invScaleX;\n  var scaleY = gd._fullLayout._invScaleY;\n\n  // Selections\n  var rectSelection = d3.select(bandElement.parentNode).select('rect.catrect');\n  var rectBoundingBox = rectSelection.node().getBoundingClientRect();\n\n  // Models\n  /** @type {CategoryViewModel} */\n  var catViewModel = rectSelection.datum();\n  var parcatsViewModel = catViewModel.parcatsViewModel;\n  var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n  var trace = parcatsViewModel.trace;\n\n  // Positions\n  var hoverCenterY = rectBoundingBox.top + rectBoundingBox.height / 2;\n  var hoverCenterX, hoverLabelIdealAlign;\n  if (parcatsViewModel.dimensions.length > 1 && dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n    // right most dimension\n    hoverCenterX = rectBoundingBox.left;\n    hoverLabelIdealAlign = 'left';\n  } else {\n    hoverCenterX = rectBoundingBox.left + rectBoundingBox.width;\n    hoverLabelIdealAlign = 'right';\n  }\n  var count = catViewModel.model.count;\n  var catLabel = catViewModel.model.categoryLabel;\n  var prob = count / catViewModel.parcatsViewModel.model.count;\n  var labels = {\n    countLabel: count,\n    categoryLabel: catLabel,\n    probabilityLabel: prob.toFixed(3)\n  };\n\n  // Hover label text\n  var hoverinfoParts = [];\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n    hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n  }\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n    hoverinfoParts.push(['P(' + labels.categoryLabel + '):', labels.probabilityLabel].join(' '));\n  }\n  var hovertext = hoverinfoParts.join('<br>');\n  return {\n    trace: trace,\n    x: scaleX * (hoverCenterX - rootBBox.left),\n    y: scaleY * (hoverCenterY - rootBBox.top),\n    text: hovertext,\n    color: 'lightgray',\n    borderColor: 'black',\n    fontFamily: 'Monaco, \"Courier New\", monospace',\n    fontSize: 12,\n    fontColor: 'black',\n    idealAlign: hoverLabelIdealAlign,\n    hovertemplate: trace.hovertemplate,\n    hovertemplateLabels: labels,\n    eventData: [{\n      data: trace._input,\n      fullData: trace,\n      count: count,\n      category: catLabel,\n      probability: prob\n    }]\n  };\n}\n\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement) {\n  var allHoverlabels = [];\n  d3.select(bandElement.parentNode.parentNode).selectAll('g.category').select('rect.catrect').each(function () {\n    var bandNode = this;\n    allHoverlabels.push(createHoverLabelForCategoryHovermode(gd, rootBBox, bandNode));\n  });\n  return allHoverlabels;\n}\n\n/**\n * Create hover labels for a band element's category (for use when hoveron === 'dimension')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForColorHovermode(gd, rootBBox, bandElement) {\n  gd._fullLayout._calcInverseTransform(gd);\n  var scaleX = gd._fullLayout._invScaleX;\n  var scaleY = gd._fullLayout._invScaleY;\n  var bandBoundingBox = bandElement.getBoundingClientRect();\n\n  // Models\n  /** @type {CategoryBandViewModel} */\n  var bandViewModel = d3.select(bandElement).datum();\n  var catViewModel = bandViewModel.categoryViewModel;\n  var parcatsViewModel = catViewModel.parcatsViewModel;\n  var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n  var trace = parcatsViewModel.trace;\n\n  // positions\n  var hoverCenterY = bandBoundingBox.y + bandBoundingBox.height / 2;\n  var hoverCenterX, hoverLabelIdealAlign;\n  if (parcatsViewModel.dimensions.length > 1 && dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n    // right most dimension\n    hoverCenterX = bandBoundingBox.left;\n    hoverLabelIdealAlign = 'left';\n  } else {\n    hoverCenterX = bandBoundingBox.left + bandBoundingBox.width;\n    hoverLabelIdealAlign = 'right';\n  }\n\n  // Labels\n  var catLabel = catViewModel.model.categoryLabel;\n\n  // Counts\n  var totalCount = bandViewModel.parcatsViewModel.model.count;\n  var bandColorCount = 0;\n  bandViewModel.categoryViewModel.bands.forEach(function (b) {\n    if (b.color === bandViewModel.color) {\n      bandColorCount += b.count;\n    }\n  });\n  var catCount = catViewModel.model.count;\n  var colorCount = 0;\n  parcatsViewModel.pathSelection.each( /** @param {PathViewModel} pathViewModel */\n  function (pathViewModel) {\n    if (pathViewModel.model.color === bandViewModel.color) {\n      colorCount += pathViewModel.model.count;\n    }\n  });\n  var pColorAndCat = bandColorCount / totalCount;\n  var pCatGivenColor = bandColorCount / colorCount;\n  var pColorGivenCat = bandColorCount / catCount;\n  var labels = {\n    countLabel: bandColorCount,\n    categoryLabel: catLabel,\n    probabilityLabel: pColorAndCat.toFixed(3)\n  };\n\n  // Hover label text\n  var hoverinfoParts = [];\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n    hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n  }\n  if (catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n    hoverinfoParts.push('P(color ∩ ' + catLabel + '): ' + labels.probabilityLabel);\n    hoverinfoParts.push('P(' + catLabel + ' | color): ' + pCatGivenColor.toFixed(3));\n    hoverinfoParts.push('P(color | ' + catLabel + '): ' + pColorGivenCat.toFixed(3));\n  }\n  var hovertext = hoverinfoParts.join('<br>');\n\n  // Compute text color\n  var textColor = tinycolor.mostReadable(bandViewModel.color, ['black', 'white']);\n  return {\n    trace: trace,\n    x: scaleX * (hoverCenterX - rootBBox.left),\n    y: scaleY * (hoverCenterY - rootBBox.top),\n    // name: 'NAME',\n    text: hovertext,\n    color: bandViewModel.color,\n    borderColor: 'black',\n    fontFamily: 'Monaco, \"Courier New\", monospace',\n    fontColor: textColor,\n    fontSize: 10,\n    idealAlign: hoverLabelIdealAlign,\n    hovertemplate: trace.hovertemplate,\n    hovertemplateLabels: labels,\n    eventData: [{\n      data: trace._input,\n      fullData: trace,\n      category: catLabel,\n      count: totalCount,\n      probability: pColorAndCat,\n      categorycount: catCount,\n      colorcount: colorCount,\n      bandcolorcount: bandColorCount\n    }]\n  };\n}\n\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\nfunction mouseoverCategoryBand(bandViewModel) {\n  if (!bandViewModel.parcatsViewModel.dragDimension) {\n    // We're not currently dragging\n\n    if (bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      // hoverinfo is not skip, so we at least style the bands and emit interaction events\n\n      // Mouse\n      var mouseY = d3.mouse(this)[1];\n      if (mouseY < -1) {\n        // Hover is above above the category rectangle (probably the dimension title text)\n        return;\n      }\n      var gd = bandViewModel.parcatsViewModel.graphDiv;\n      var fullLayout = gd._fullLayout;\n      var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n      var hoveron = bandViewModel.parcatsViewModel.hoveron;\n\n      /** @type {HTMLElement} */\n      var bandElement = this;\n\n      // Handle style and events\n      if (hoveron === 'color') {\n        styleForColorHovermode(bandElement);\n        emitPointsEventColorHovermode(bandElement, 'plotly_hover', d3.event);\n      } else {\n        styleForCategoryHovermode(bandElement);\n        emitPointsEventCategoryHovermode(bandElement, 'plotly_hover', d3.event);\n      }\n\n      // Handle hover label\n      if (bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n        var hoverItems;\n        if (hoveron === 'category') {\n          hoverItems = createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement);\n        } else if (hoveron === 'color') {\n          hoverItems = createHoverLabelForColorHovermode(gd, rootBBox, bandElement);\n        } else if (hoveron === 'dimension') {\n          hoverItems = createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement);\n        }\n        if (hoverItems) {\n          Fx.loneHover(hoverItems, {\n            container: fullLayout._hoverlayer.node(),\n            outerContainer: fullLayout._paper.node(),\n            gd: gd\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\nfunction mouseoutCategory(bandViewModel) {\n  var parcatsViewModel = bandViewModel.parcatsViewModel;\n  if (!parcatsViewModel.dragDimension) {\n    // We're not dragging anything\n\n    // Reset unhovered styles\n    stylePathsNoHover(parcatsViewModel.pathSelection);\n    styleCategoriesNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category'));\n    styleBandsNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category').selectAll('rect.bandrect'));\n\n    // Remove hover label\n    Fx.loneUnhover(parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n\n    // Restore path order\n    parcatsViewModel.pathSelection.sort(compareRawColor);\n\n    // Emit unhover event\n    if (parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n      var hoveron = bandViewModel.parcatsViewModel.hoveron;\n      var bandElement = this;\n\n      // Handle style and events\n      if (hoveron === 'color') {\n        emitPointsEventColorHovermode(bandElement, 'plotly_unhover', d3.event);\n      } else {\n        emitPointsEventCategoryHovermode(bandElement, 'plotly_unhover', d3.event);\n      }\n    }\n  }\n}\n\n/**\n * Handle dimension drag start\n * @param {DimensionViewModel} d\n */\nfunction dragDimensionStart(d) {\n  // Check if dragging is supported\n  if (d.parcatsViewModel.arrangement === 'fixed') {\n    return;\n  }\n\n  // Save off initial drag indexes for dimension\n  d.dragDimensionDisplayInd = d.model.displayInd;\n  d.initialDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function (d) {\n    return d.displayInd;\n  });\n  d.dragHasMoved = false;\n\n  // Check for category hit\n  d.dragCategoryDisplayInd = null;\n  d3.select(this).selectAll('g.category').select('rect.catrect').each( /** @param {CategoryViewModel} catViewModel */\n  function (catViewModel) {\n    var catMouseX = d3.mouse(this)[0];\n    var catMouseY = d3.mouse(this)[1];\n    if (-2 <= catMouseX && catMouseX <= catViewModel.width + 2 && -2 <= catMouseY && catMouseY <= catViewModel.height + 2) {\n      // Save off initial drag indexes for categories\n      d.dragCategoryDisplayInd = catViewModel.model.displayInd;\n      d.initialDragCategoryDisplayInds = d.model.categories.map(function (c) {\n        return c.displayInd;\n      });\n\n      // Initialize categories dragY to be the current y position\n      catViewModel.model.dragY = catViewModel.y;\n\n      // Raise category\n      Lib.raiseToTop(this.parentNode);\n\n      // Get band element\n      d3.select(this.parentNode).selectAll('rect.bandrect')\n      /** @param {CategoryBandViewModel} bandViewModel */.each(function (bandViewModel) {\n        if (bandViewModel.y < catMouseY && catMouseY <= bandViewModel.y + bandViewModel.height) {\n          d.potentialClickBand = this;\n        }\n      });\n    }\n  });\n\n  // Update toplevel drag dimension\n  d.parcatsViewModel.dragDimension = d;\n\n  // Remove hover label if any\n  Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n}\n\n/**\n * Handle dimension drag\n * @param {DimensionViewModel} d\n */\nfunction dragDimension(d) {\n  // Check if dragging is supported\n  if (d.parcatsViewModel.arrangement === 'fixed') {\n    return;\n  }\n  d.dragHasMoved = true;\n  if (d.dragDimensionDisplayInd === null) {\n    return;\n  }\n  var dragDimInd = d.dragDimensionDisplayInd;\n  var prevDimInd = dragDimInd - 1;\n  var nextDimInd = dragDimInd + 1;\n  var dragDimension = d.parcatsViewModel.dimensions[dragDimInd];\n\n  // Update category\n  if (d.dragCategoryDisplayInd !== null) {\n    var dragCategory = dragDimension.categories[d.dragCategoryDisplayInd];\n\n    // Update dragY by dy\n    dragCategory.model.dragY += d3.event.dy;\n    var categoryY = dragCategory.model.dragY;\n\n    // Check for category drag swaps\n    var catDisplayInd = dragCategory.model.displayInd;\n    var dimCategoryViews = dragDimension.categories;\n    var catAbove = dimCategoryViews[catDisplayInd - 1];\n    var catBelow = dimCategoryViews[catDisplayInd + 1];\n\n    // Check for overlap above\n    if (catAbove !== undefined) {\n      if (categoryY < catAbove.y + catAbove.height / 2.0) {\n        // Swap display inds\n        dragCategory.model.displayInd = catAbove.model.displayInd;\n        catAbove.model.displayInd = catDisplayInd;\n      }\n    }\n    if (catBelow !== undefined) {\n      if (categoryY + dragCategory.height > catBelow.y + catBelow.height / 2.0) {\n        // Swap display inds\n        dragCategory.model.displayInd = catBelow.model.displayInd;\n        catBelow.model.displayInd = catDisplayInd;\n      }\n    }\n\n    // Update category drag display index\n    d.dragCategoryDisplayInd = dragCategory.model.displayInd;\n  }\n\n  // Update dimension position\n  if (d.dragCategoryDisplayInd === null || d.parcatsViewModel.arrangement === 'freeform') {\n    dragDimension.model.dragX = d3.event.x;\n\n    // Check for dimension swaps\n    var prevDimension = d.parcatsViewModel.dimensions[prevDimInd];\n    var nextDimension = d.parcatsViewModel.dimensions[nextDimInd];\n    if (prevDimension !== undefined) {\n      if (dragDimension.model.dragX < prevDimension.x + prevDimension.width) {\n        // Swap display inds\n        dragDimension.model.displayInd = prevDimension.model.displayInd;\n        prevDimension.model.displayInd = dragDimInd;\n      }\n    }\n    if (nextDimension !== undefined) {\n      if (dragDimension.model.dragX + dragDimension.width > nextDimension.x) {\n        // Swap display inds\n        dragDimension.model.displayInd = nextDimension.model.displayInd;\n        nextDimension.model.displayInd = d.dragDimensionDisplayInd;\n      }\n    }\n\n    // Update drag display index\n    d.dragDimensionDisplayInd = dragDimension.model.displayInd;\n  }\n\n  // Update view models\n  updateDimensionViewModels(d.parcatsViewModel);\n  updatePathViewModels(d.parcatsViewModel);\n\n  // Update svg geometry\n  updateSvgCategories(d.parcatsViewModel);\n  updateSvgPaths(d.parcatsViewModel);\n}\n\n/**\n * Handle dimension drag end\n * @param {DimensionViewModel} d\n */\nfunction dragDimensionEnd(d) {\n  // Check if dragging is supported\n  if (d.parcatsViewModel.arrangement === 'fixed') {\n    return;\n  }\n  if (d.dragDimensionDisplayInd === null) {\n    return;\n  }\n  d3.select(this).selectAll('text').attr('font-weight', 'normal');\n\n  // Compute restyle command\n  // -----------------------\n  var restyleData = {};\n  var traceInd = getTraceIndex(d.parcatsViewModel);\n\n  // ### Handle dimension reordering ###\n  var finalDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function (d) {\n    return d.displayInd;\n  });\n  var anyDimsReordered = d.initialDragDimensionDisplayInds.some(function (initDimDisplay, dimInd) {\n    return initDimDisplay !== finalDragDimensionDisplayInds[dimInd];\n  });\n  if (anyDimsReordered) {\n    finalDragDimensionDisplayInds.forEach(function (finalDimDisplay, dimInd) {\n      var containerInd = d.parcatsViewModel.model.dimensions[dimInd].containerInd;\n      restyleData['dimensions[' + containerInd + '].displayindex'] = finalDimDisplay;\n    });\n  }\n\n  // ### Handle category reordering ###\n  var anyCatsReordered = false;\n  if (d.dragCategoryDisplayInd !== null) {\n    var finalDragCategoryDisplayInds = d.model.categories.map(function (c) {\n      return c.displayInd;\n    });\n    anyCatsReordered = d.initialDragCategoryDisplayInds.some(function (initCatDisplay, catInd) {\n      return initCatDisplay !== finalDragCategoryDisplayInds[catInd];\n    });\n    if (anyCatsReordered) {\n      // Sort a shallow copy of the category models by display index\n      var sortedCategoryModels = d.model.categories.slice().sort(function (a, b) {\n        return a.displayInd - b.displayInd;\n      });\n\n      // Get new categoryarray and ticktext values\n      var newCategoryArray = sortedCategoryModels.map(function (v) {\n        return v.categoryValue;\n      });\n      var newCategoryLabels = sortedCategoryModels.map(function (v) {\n        return v.categoryLabel;\n      });\n      restyleData['dimensions[' + d.model.containerInd + '].categoryarray'] = [newCategoryArray];\n      restyleData['dimensions[' + d.model.containerInd + '].ticktext'] = [newCategoryLabels];\n      restyleData['dimensions[' + d.model.containerInd + '].categoryorder'] = 'array';\n    }\n  }\n\n  // Handle potential click event\n  // ----------------------------\n  if (d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n    if (!d.dragHasMoved && d.potentialClickBand) {\n      if (d.parcatsViewModel.hoveron === 'color') {\n        emitPointsEventColorHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n      } else {\n        emitPointsEventCategoryHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n      }\n    }\n  }\n\n  // Nullify drag states\n  // -------------------\n  d.model.dragX = null;\n  if (d.dragCategoryDisplayInd !== null) {\n    var dragCategory = d.parcatsViewModel.dimensions[d.dragDimensionDisplayInd].categories[d.dragCategoryDisplayInd];\n    dragCategory.model.dragY = null;\n    d.dragCategoryDisplayInd = null;\n  }\n  d.dragDimensionDisplayInd = null;\n  d.parcatsViewModel.dragDimension = null;\n  d.dragHasMoved = null;\n  d.potentialClickBand = null;\n\n  // Update view models\n  // ------------------\n  updateDimensionViewModels(d.parcatsViewModel);\n  updatePathViewModels(d.parcatsViewModel);\n\n  // Perform transition\n  // ------------------\n  var transition = d3.transition().duration(300).ease('cubic-in-out');\n  transition.each(function () {\n    updateSvgCategories(d.parcatsViewModel, true);\n    updateSvgPaths(d.parcatsViewModel, true);\n  }).each('end', function () {\n    if (anyDimsReordered || anyCatsReordered) {\n      // Perform restyle if the order of categories or dimensions changed\n      Plotly.restyle(d.parcatsViewModel.graphDiv, restyleData, [traceInd]);\n    }\n  });\n}\n\n/**\n *\n * @param {ParcatsViewModel} parcatsViewModel\n */\nfunction getTraceIndex(parcatsViewModel) {\n  var traceInd;\n  var allTraces = parcatsViewModel.graphDiv._fullData;\n  for (var i = 0; i < allTraces.length; i++) {\n    if (parcatsViewModel.key === allTraces[i].uid) {\n      traceInd = i;\n      break;\n    }\n  }\n  return traceInd;\n}\n\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\nfunction updateSvgPaths(parcatsViewModel, hasTransition) {\n  if (hasTransition === undefined) {\n    hasTransition = false;\n  }\n  function transition(selection) {\n    return hasTransition ? selection.transition() : selection;\n  }\n\n  // Update binding\n  parcatsViewModel.pathSelection.data(function (d) {\n    return d.paths;\n  }, key);\n\n  // Update paths\n  transition(parcatsViewModel.pathSelection).attr('d', function (d) {\n    return d.svgD;\n  });\n}\n\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\nfunction updateSvgCategories(parcatsViewModel, hasTransition) {\n  if (hasTransition === undefined) {\n    hasTransition = false;\n  }\n  function transition(selection) {\n    return hasTransition ? selection.transition() : selection;\n  }\n\n  // Update binding\n  parcatsViewModel.dimensionSelection.data(function (d) {\n    return d.dimensions;\n  }, key);\n  var categorySelection = parcatsViewModel.dimensionSelection.selectAll('g.category').data(function (d) {\n    return d.categories;\n  }, key);\n\n  // Update dimension position\n  transition(parcatsViewModel.dimensionSelection).attr('transform', function (d) {\n    return strTranslate(d.x, 0);\n  });\n\n  // Update category position\n  transition(categorySelection).attr('transform', function (d) {\n    return strTranslate(0, d.y);\n  });\n  var dimLabelSelection = categorySelection.select('.dimlabel');\n\n  // ### Update dimension label\n  // Only the top-most display category should have the dimension label\n  dimLabelSelection.text(function (d, i) {\n    if (i === 0) {\n      // Add dimension label above topmost category\n      return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n    } else {\n      return null;\n    }\n  });\n\n  // Update category label\n  // Categories in the right-most display dimension have their labels on\n  // the right, all others on the left\n  var catLabelSelection = categorySelection.select('.catlabel');\n  catLabelSelection.attr('text-anchor', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return 'start';\n    } else {\n      // Place label to the left of category\n      return 'end';\n    }\n  }).attr('x', function (d) {\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      return d.width + 5;\n    } else {\n      // Place label to the left of category\n      return -5;\n    }\n  }).each(function (d) {\n    // Update attriubutes of <tspan> elements\n    var newX;\n    var newAnchor;\n    if (catInRightDim(d)) {\n      // Place label to the right of category\n      newX = d.width + 5;\n      newAnchor = 'start';\n    } else {\n      // Place label to the left of category\n      newX = -5;\n      newAnchor = 'end';\n    }\n    d3.select(this).selectAll('tspan').attr('x', newX).attr('text-anchor', newAnchor);\n  });\n\n  // Update bands\n  // Initialize color band rects\n  var bandSelection = categorySelection.selectAll('rect.bandrect').data( /** @param {CategoryViewModel} catViewModel*/\n  function (catViewModel) {\n    return catViewModel.bands;\n  }, key);\n  var bandsSelectionEnter = bandSelection.enter().append('rect').attr('class', 'bandrect').attr('cursor', 'move').attr('stroke-opacity', 0).attr('fill', function (d) {\n    return d.color;\n  }).attr('fill-opacity', 0);\n  bandSelection.attr('fill', function (d) {\n    return d.color;\n  }).attr('width', function (d) {\n    return d.width;\n  }).attr('height', function (d) {\n    return d.height;\n  }).attr('y', function (d) {\n    return d.y;\n  });\n  styleBandsNoHover(bandsSelectionEnter);\n\n  // Raise bands to the top\n  bandSelection.each(function () {\n    Lib.raiseToTop(this);\n  });\n\n  // Remove unused bands\n  bandSelection.exit().remove();\n}\n\n/**\n * Create a ParcatsViewModel traces\n * @param {Object} graphDiv\n *  Top-level graph div element\n * @param {Layout} layout\n *  SVG layout object\n * @param {Array.<ParcatsModel>} wrappedParcatsModel\n *  Wrapped ParcatsModel for this trace\n * @return {ParcatsViewModel}\n */\nfunction createParcatsViewModel(graphDiv, layout, wrappedParcatsModel) {\n  // Unwrap model\n  var parcatsModel = wrappedParcatsModel[0];\n\n  // Compute margin\n  var margin = layout.margin || {\n    l: 80,\n    r: 80,\n    t: 100,\n    b: 80\n  };\n\n  // Compute pixel position/extents\n  var trace = parcatsModel.trace;\n  var domain = trace.domain;\n  var figureWidth = layout.width;\n  var figureHeight = layout.height;\n  var traceWidth = Math.floor(figureWidth * (domain.x[1] - domain.x[0]));\n  var traceHeight = Math.floor(figureHeight * (domain.y[1] - domain.y[0]));\n  var traceX = domain.x[0] * figureWidth + margin.l;\n  var traceY = layout.height - domain.y[1] * layout.height + margin.t;\n\n  // Handle path shape\n  // -----------------\n  var pathShape = trace.line.shape;\n\n  // Handle hover info\n  // -----------------\n  var hoverinfoItems;\n  if (trace.hoverinfo === 'all') {\n    hoverinfoItems = ['count', 'probability'];\n  } else {\n    hoverinfoItems = (trace.hoverinfo || '').split('+');\n  }\n\n  // Construct parcatsViewModel\n  // --------------------------\n  var parcatsViewModel = {\n    trace: trace,\n    key: trace.uid,\n    model: parcatsModel,\n    x: traceX,\n    y: traceY,\n    width: traceWidth,\n    height: traceHeight,\n    hoveron: trace.hoveron,\n    hoverinfoItems: hoverinfoItems,\n    arrangement: trace.arrangement,\n    bundlecolors: trace.bundlecolors,\n    sortpaths: trace.sortpaths,\n    labelfont: trace.labelfont,\n    categorylabelfont: trace.tickfont,\n    pathShape: pathShape,\n    dragDimension: null,\n    margin: margin,\n    paths: [],\n    dimensions: [],\n    graphDiv: graphDiv,\n    traceSelection: null,\n    pathSelection: null,\n    dimensionSelection: null\n  };\n\n  // Update dimension view models if we have at least 1 dimension\n  if (parcatsModel.dimensions) {\n    updateDimensionViewModels(parcatsViewModel);\n\n    // Update path view models if we have at least 2 dimensions\n    updatePathViewModels(parcatsViewModel);\n  }\n  // Inside a categories view model\n  return parcatsViewModel;\n}\n\n/**\n * Build the SVG string to represents a parallel categories path\n * @param {Array.<Number>} leftXPositions\n *  Array of the x positions of the left edge of each dimension (in display order)\n * @param {Array.<Number>} pathYs\n *  Array of the y positions of the top of the path at each dimension (in display order)\n * @param {Array.<Number>} dimWidths\n *  Array of the widths of each dimension in display order\n * @param {Number} pathHeight\n *  The height of the path in pixels\n * @param {Number} curvature\n *  The curvature factor for the path. 0 results in a straight line and values greater than zero result in curved paths\n * @return {string}\n */\nfunction buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, curvature) {\n  // Compute the x midpoint of each path segment\n  var xRefPoints1 = [];\n  var xRefPoints2 = [];\n  var refInterpolator;\n  var d;\n  for (d = 0; d < dimWidths.length - 1; d++) {\n    refInterpolator = interpolateNumber(dimWidths[d] + leftXPositions[d], leftXPositions[d + 1]);\n    xRefPoints1.push(refInterpolator(curvature));\n    xRefPoints2.push(refInterpolator(1 - curvature));\n  }\n\n  // Move to top of path on left edge of left-most category\n  var svgD = 'M ' + leftXPositions[0] + ',' + pathYs[0];\n\n  // Horizontal line to right edge\n  svgD += 'l' + dimWidths[0] + ',0 ';\n\n  // Horizontal line to right edge\n  for (d = 1; d < dimWidths.length; d++) {\n    // Curve to left edge of category\n    svgD += 'C' + xRefPoints1[d - 1] + ',' + pathYs[d - 1] + ' ' + xRefPoints2[d - 1] + ',' + pathYs[d] + ' ' + leftXPositions[d] + ',' + pathYs[d];\n\n    // svgD += 'L' + leftXPositions[d] + ',' + pathYs[d];\n\n    // Horizontal line to right edge\n    svgD += 'l' + dimWidths[d] + ',0 ';\n  }\n\n  // Line down\n  svgD += 'l' + '0,' + pathHeight + ' ';\n\n  // Line to left edge of right-most category\n  svgD += 'l -' + dimWidths[dimWidths.length - 1] + ',0 ';\n  for (d = dimWidths.length - 2; d >= 0; d--) {\n    // Curve to right edge of category\n    svgD += 'C' + xRefPoints2[d] + ',' + (pathYs[d + 1] + pathHeight) + ' ' + xRefPoints1[d] + ',' + (pathYs[d] + pathHeight) + ' ' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight);\n\n    // svgD += 'L' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight);\n\n    // Horizontal line to right edge\n    svgD += 'l-' + dimWidths[d] + ',0 ';\n  }\n\n  // Close path\n  svgD += 'Z';\n  return svgD;\n}\n\n/**\n * Update the path view models based on the dimension view models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\nfunction updatePathViewModels(parcatsViewModel) {\n  // Initialize an array of the y position of the top of the next path to be added to each category.\n  //\n  // nextYPositions[d][c] is the y position of the next path through category with index c of dimension with index d\n  var dimensionViewModels = parcatsViewModel.dimensions;\n  var parcatsModel = parcatsViewModel.model;\n  var nextYPositions = dimensionViewModels.map(function (d) {\n    return d.categories.map(function (c) {\n      return c.y;\n    });\n  });\n\n  // Array from category index to category display index for each true dimension index\n  var catToDisplayIndPerDim = parcatsViewModel.model.dimensions.map(function (d) {\n    return d.categories.map(function (c) {\n      return c.displayInd;\n    });\n  });\n\n  // Array from true dimension index to dimension display index\n  var dimToDisplayInd = parcatsViewModel.model.dimensions.map(function (d) {\n    return d.displayInd;\n  });\n  var displayToDimInd = parcatsViewModel.dimensions.map(function (d) {\n    return d.model.dimensionInd;\n  });\n\n  // Array of the x position of the left edge of the rectangles for each dimension\n  var leftXPositions = dimensionViewModels.map(function (d) {\n    return d.x;\n  });\n\n  // Compute dimension widths\n  var dimWidths = dimensionViewModels.map(function (d) {\n    return d.width;\n  });\n\n  // Build sorted Array of PathModel objects\n  var pathModels = [];\n  for (var p in parcatsModel.paths) {\n    if (parcatsModel.paths.hasOwnProperty(p)) {\n      pathModels.push(parcatsModel.paths[p]);\n    }\n  }\n\n  // Compute category display inds to use for sorting paths\n  function pathDisplayCategoryInds(pathModel) {\n    var dimensionInds = pathModel.categoryInds.map(function (catInd, dimInd) {\n      return catToDisplayIndPerDim[dimInd][catInd];\n    });\n    var displayInds = displayToDimInd.map(function (dimInd) {\n      return dimensionInds[dimInd];\n    });\n    return displayInds;\n  }\n\n  // Sort in ascending order by display index array\n  pathModels.sort(function (v1, v2) {\n    // Build display inds for each path\n    var sortArray1 = pathDisplayCategoryInds(v1);\n    var sortArray2 = pathDisplayCategoryInds(v2);\n\n    // Handle path sort order\n    if (parcatsViewModel.sortpaths === 'backward') {\n      sortArray1.reverse();\n      sortArray2.reverse();\n    }\n\n    // Append the first value index of the path to break ties\n    sortArray1.push(v1.valueInds[0]);\n    sortArray2.push(v2.valueInds[0]);\n\n    // Handle color bundling\n    if (parcatsViewModel.bundlecolors) {\n      // Prepend sort array with the raw color value\n      sortArray1.unshift(v1.rawColor);\n      sortArray2.unshift(v2.rawColor);\n    }\n\n    // colors equal, sort by display categories\n    if (sortArray1 < sortArray2) {\n      return -1;\n    }\n    if (sortArray1 > sortArray2) {\n      return 1;\n    }\n    return 0;\n  });\n\n  // Create path models\n  var pathViewModels = new Array(pathModels.length);\n  var totalCount = dimensionViewModels[0].model.count;\n  var totalHeight = dimensionViewModels[0].categories.map(function (c) {\n    return c.height;\n  }).reduce(function (v1, v2) {\n    return v1 + v2;\n  });\n  for (var pathNumber = 0; pathNumber < pathModels.length; pathNumber++) {\n    var pathModel = pathModels[pathNumber];\n    var pathHeight;\n    if (totalCount > 0) {\n      pathHeight = totalHeight * (pathModel.count / totalCount);\n    } else {\n      pathHeight = 0;\n    }\n\n    // Build path y coords\n    var pathYs = new Array(nextYPositions.length);\n    for (var d = 0; d < pathModel.categoryInds.length; d++) {\n      var catInd = pathModel.categoryInds[d];\n      var catDisplayInd = catToDisplayIndPerDim[d][catInd];\n      var dimDisplayInd = dimToDisplayInd[d];\n\n      // Update next y position\n      pathYs[dimDisplayInd] = nextYPositions[dimDisplayInd][catDisplayInd];\n      nextYPositions[dimDisplayInd][catDisplayInd] += pathHeight;\n\n      // Update category color information\n      var catViewModle = parcatsViewModel.dimensions[dimDisplayInd].categories[catDisplayInd];\n      var numBands = catViewModle.bands.length;\n      var lastCatBand = catViewModle.bands[numBands - 1];\n      if (lastCatBand === undefined || pathModel.rawColor !== lastCatBand.rawColor) {\n        // Create a new band\n        var bandY = lastCatBand === undefined ? 0 : lastCatBand.y + lastCatBand.height;\n        catViewModle.bands.push({\n          key: bandY,\n          color: pathModel.color,\n          rawColor: pathModel.rawColor,\n          height: pathHeight,\n          width: catViewModle.width,\n          count: pathModel.count,\n          y: bandY,\n          categoryViewModel: catViewModle,\n          parcatsViewModel: parcatsViewModel\n        });\n      } else {\n        // Extend current band\n        var currentBand = catViewModle.bands[numBands - 1];\n        currentBand.height += pathHeight;\n        currentBand.count += pathModel.count;\n      }\n    }\n\n    // build svg path\n    var svgD;\n    if (parcatsViewModel.pathShape === 'hspline') {\n      svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0.5);\n    } else {\n      svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0);\n    }\n    pathViewModels[pathNumber] = {\n      key: pathModel.valueInds[0],\n      model: pathModel,\n      height: pathHeight,\n      leftXs: leftXPositions,\n      topYs: pathYs,\n      dimWidths: dimWidths,\n      svgD: svgD,\n      parcatsViewModel: parcatsViewModel\n    };\n  }\n  parcatsViewModel.paths = pathViewModels;\n\n  // * @property key\n  // *  Unique key for this model\n  // * @property {PathModel} model\n  // *  Source path model\n  // * @property {Number} height\n  // *  Height of this path (pixels)\n  // * @property {String} svgD\n  // *  SVG path \"d\" attribute string\n}\n\n/**\n * Update the dimension view models based on the dimension models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\nfunction updateDimensionViewModels(parcatsViewModel) {\n  // Compute dimension ordering\n  var dimensionsIndInfo = parcatsViewModel.model.dimensions.map(function (d) {\n    return {\n      displayInd: d.displayInd,\n      dimensionInd: d.dimensionInd\n    };\n  });\n  dimensionsIndInfo.sort(function (a, b) {\n    return a.displayInd - b.displayInd;\n  });\n  var dimensions = [];\n  for (var displayInd in dimensionsIndInfo) {\n    var dimensionInd = dimensionsIndInfo[displayInd].dimensionInd;\n    var dimModel = parcatsViewModel.model.dimensions[dimensionInd];\n    dimensions.push(createDimensionViewModel(parcatsViewModel, dimModel));\n  }\n  parcatsViewModel.dimensions = dimensions;\n}\n\n/**\n * Create a parcats DimensionViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n * @param {DimensionModel} dimensionModel\n * @return {DimensionViewModel}\n */\nfunction createDimensionViewModel(parcatsViewModel, dimensionModel) {\n  // Compute dimension x position\n  var categoryLabelPad = 40;\n  var dimWidth = 16;\n  var numDimensions = parcatsViewModel.model.dimensions.length;\n  var displayInd = dimensionModel.displayInd;\n\n  // Compute x coordinate values\n  var dimDx;\n  var dimX0;\n  var dimX;\n  if (numDimensions > 1) {\n    dimDx = (parcatsViewModel.width - 2 * categoryLabelPad - dimWidth) / (numDimensions - 1);\n  } else {\n    dimDx = 0;\n  }\n  dimX0 = categoryLabelPad;\n  dimX = dimX0 + dimDx * displayInd;\n\n  // Compute categories\n  var categories = [];\n  var maxCats = parcatsViewModel.model.maxCats;\n  var numCats = dimensionModel.categories.length;\n  var catSpacing = 8;\n  var totalCount = dimensionModel.count;\n  var totalHeight = parcatsViewModel.height - catSpacing * (maxCats - 1);\n  var nextCatHeight;\n  var nextCatModel;\n  var nextCat;\n  var catInd;\n  var catDisplayInd;\n\n  // Compute starting Y offset\n  var nextCatY = (maxCats - numCats) * catSpacing / 2.0;\n\n  // Compute category ordering\n  var categoryIndInfo = dimensionModel.categories.map(function (c) {\n    return {\n      displayInd: c.displayInd,\n      categoryInd: c.categoryInd\n    };\n  });\n  categoryIndInfo.sort(function (a, b) {\n    return a.displayInd - b.displayInd;\n  });\n  for (catDisplayInd = 0; catDisplayInd < numCats; catDisplayInd++) {\n    catInd = categoryIndInfo[catDisplayInd].categoryInd;\n    nextCatModel = dimensionModel.categories[catInd];\n    if (totalCount > 0) {\n      nextCatHeight = nextCatModel.count / totalCount * totalHeight;\n    } else {\n      nextCatHeight = 0;\n    }\n    nextCat = {\n      key: nextCatModel.valueInds[0],\n      model: nextCatModel,\n      width: dimWidth,\n      height: nextCatHeight,\n      y: nextCatModel.dragY !== null ? nextCatModel.dragY : nextCatY,\n      bands: [],\n      parcatsViewModel: parcatsViewModel\n    };\n    nextCatY = nextCatY + nextCatHeight + catSpacing;\n    categories.push(nextCat);\n  }\n  return {\n    key: dimensionModel.dimensionInd,\n    x: dimensionModel.dragX !== null ? dimensionModel.dragX : dimX,\n    y: 0,\n    width: dimWidth,\n    model: dimensionModel,\n    categories: categories,\n    parcatsViewModel: parcatsViewModel,\n    dragCategoryDisplayInd: null,\n    dragDimensionDisplayInd: null,\n    initialDragDimensionDisplayInds: null,\n    initialDragCategoryDisplayInds: null,\n    dragHasMoved: null,\n    potentialClickBand: null\n  };\n}\n\n// JSDoc typedefs\n// ==============\n/**\n * @typedef {Object} Layout\n *  Object containing svg layout information\n *\n * @property {Number} width (pixels)\n *  Usable width for Figure (after margins are removed)\n * @property {Number} height (pixels)\n *  Usable height for Figure (after margins are removed)\n * @property {Margin} margin\n *  Margin around the Figure (pixels)\n */\n\n/**\n * @typedef {Object} Margin\n *  Object containing padding information in pixels\n *\n * @property {Number} t\n *  Top margin\n * @property {Number} r\n *  Right margin\n * @property {Number} b\n *  Bottom margin\n * @property {Number} l\n *  Left margin\n */\n\n/**\n * @typedef {Object} Font\n *  Object containing font information\n *\n * @property {Number} size: Font size\n * @property {String} color: Font color\n * @property {String} family: Font family\n */\n\n/**\n * @typedef {Object} ParcatsViewModel\n *  Object containing calculated parcats view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {ParcatsModel} model\n *  Source parcats model\n * @property {Array.<DimensionViewModel>} dimensions\n *  Array of dimension view models\n * @property {Number} width\n *  Width for this trace (pixels)\n * @property {Number} height\n *  Height for this trace (pixels)\n * @property {Number} x\n *  X position of this trace with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of this trace with respect to the Figure (pixels)\n * @property {String} hoveron\n *  Hover interaction mode. One of: 'category', 'color', or 'dimension'\n * @property {Array.<String>} hoverinfoItems\n *  Info to display on hover. Array with a combination of 'counts' and/or 'probabilities', or 'none', or 'skip'\n * @property {String} arrangement\n *  Category arrangement. One of: 'perpendicular', 'freeform', or 'fixed'\n * @property {Boolean} bundlecolors\n *  Whether paths should be sorted so that like colors are bundled together as they pass through categories\n * @property {String} sortpaths\n *  If 'forward' then sort paths based on dimensions from left to right. If 'backward' sort based on dimensions\n *  from right to left\n * @property {Font} labelfont\n *  Font for the dimension labels\n * @property {Font} categorylabelfont\n *  Font for the category labels\n * @property {String} pathShape\n *  The shape of the paths. Either 'linear' or 'hspline'.\n * @property {DimensionViewModel|null} dragDimension\n *  Dimension currently being dragged. Null if no drag in progress\n * @property {Margin} margin\n *  Margin around the Figure\n * @property {Object} graphDiv\n *  Top-level graph div element\n * @property {Object} traceSelection\n *  D3 selection of this view models trace group element\n * @property {Object} pathSelection\n *  D3 selection of this view models path elements\n * @property {Object} dimensionSelection\n *  D3 selection of this view models dimension group element\n */\n\n/**\n * @typedef {Object} DimensionViewModel\n *  Object containing calculated parcats dimension view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {DimensionModel} model\n *  Source dimension model\n * @property {Number} x\n *  X position of the center of this dimension with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of the top of this dimension with respect to the Figure (pixels)\n * @property {Number} width\n *  Width of categories in this dimension (pixels)\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n * @property {Array.<CategoryViewModel>} categories\n *  Dimensions category view models\n * @property {Number|null} dragCategoryDisplayInd\n *  Display index of category currently being dragged. null if no category is being dragged\n * @property {Number|null} dragDimensionDisplayInd\n *  Display index of the dimension being dragged. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragDimensionDisplayInds\n *  Dimensions display indexes at the beginning of the current drag. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragCategoryDisplayInds\n *  Category display indexes for the at the beginning of the current drag. null if no category is being dragged\n * @property {HTMLElement} potentialClickBand\n *  Band under mouse when current drag began. If no drag movement takes place then a click will be emitted for this\n *  band. Null if not drag in progress.\n * @property {Boolean} dragHasMoved\n *  True if there is an active drag and the drag has moved. If drag doesn't move before being ended then\n *  this may be interpreted as a click. Null if no drag in progress\n */\n\n/**\n * @typedef {Object} CategoryViewModel\n *  Object containing calculated parcats category view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {CategoryModel} model\n *  Source category model\n * @property {Number} width\n *  Width for this category (pixels)\n * @property {Number} height\n *  Height for this category (pixels)\n * @property {Number} y\n *  Y position of this cateogry with respect to the Figure (pixels)\n * @property {Array.<CategoryBandViewModel>} bands\n *  Array of color bands inside the category\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} CategoryBandViewModel\n *  Object containing calculated category band information. A category band is a region inside a category covering\n *  paths of a single color\n *\n * @property key\n *  Unique key for this model\n * @property color\n *  Band color\n * @property rawColor\n *  Raw color value for band\n * @property {Number} width\n *  Band width\n * @property {Number} height\n *  Band height\n * @property {Number} y\n *  Y position of top of the band with respect to the category\n * @property {Number} count\n *  The number of samples represented by the band\n * @property {CategoryViewModel} categoryViewModel\n *  The parent categorie's view model\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} PathViewModel\n *  Object containing calculated parcats path view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {PathModel} model\n *  Source path model\n * @property {Number} height\n *  Height of this path (pixels)\n * @property {Array.<Number>} leftXs\n *  The x position of the left edge of each display dimension\n * @property {Array.<Number>} topYs\n *  The y position of the top of the path for each display dimension\n * @property {Array.<Number>} dimWidths\n *  The width of each display dimension\n * @property {String} svgD\n *  SVG path \"d\" attribute string\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */","map":{"version":3,"names":["require","d3","interpolateNumber","Plotly","Fx","Lib","strTranslate","Drawing","tinycolor","svgTextUtils","performPlot","parcatsModels","graphDiv","layout","svg","isStatic","_context","staticPlot","viewModels","map","createParcatsViewModel","bind","layerSelection","selectAll","data","enter","append","attr","style","traceSelection","key","traceEnter","d","x","y","pathsSelection","select","pathSelection","paths","model","color","pathSelectionEnter","stylePathsNoHover","svgD","empty","sort","compareRawColor","exit","remove","on","mouseoverPath","mouseoutPath","clickPath","dimensionsSelection","dimensionSelection","dimensions","categorySelection","categories","categoryGroupEnterSelection","width","height","styleCategoriesNoHover","bandSelection","catViewModel","bands","each","raiseToTop","bandsSelectionEnter","bandModel","parcatsViewModel","arrangement","styleBandsNoHover","paperColor","_fullLayout","paper_bgcolor","catInRightDim","makeTextShadow","text","categoryLabel","catModel","font","categorylabelfont","convertToTspans","i","dimensionInd","dimensionLabel","labelfont","mouseoverCategoryBand","mouseoutCategory","call","behavior","drag","origin","dragDimensionStart","dragDimension","dragDimensionEnd","module","exports","numDims","length","leftDimInd","a","b","rawColor","hoverinfoItems","indexOf","stylePathsHover","points","buildPointsArrayForPath","constraints","buildConstraintsForPath","emit","event","hoverX","mouse","gd","trace","fullLayout","rootBBox","_paperdiv","node","getBoundingClientRect","graphDivBBox","pathCenterX","pathCenterY","dimInd","leftXs","dimWidths","leftDim","rightDim","topYs","hoverCenterX","hoverCenterY","textColor","mostReadable","count","prob","labels","countLabel","probabilityLabel","toFixed","hovertextParts","push","join","hovertext","mouseX","loneHover","left","top","borderColor","fontFamily","fontSize","fontColor","idealAlign","hovertemplate","line","hovertemplateLabels","eventData","_input","fullData","probability","container","_hoverlayer","outerContainer","_paper","loneUnhover","curveNumber","getTraceIndex","valueInds","pointNumber","dimension","category","categoryInds","containerInd","categoryValue","undefined","styleCategoryHover","styleBandsHover","bandsSelection","selectPathsThroughCategoryBandColor","catBandViewModel","allPaths","categoryViewModel","catInd","categoryInd","filter","pathViewModel","styleForCategoryHovermode","bandElement","bandSel","parentNode","bvm","styleForColorHovermode","bandViewModel","datum","catPaths","emitPointsEventCategoryHovermode","eventName","categoryModel","Array","prototype","apply","emitPointsEventColorHovermode","createHoverLabelForCategoryHovermode","_calcInverseTransform","scaleX","_invScaleX","scaleY","_invScaleY","rectSelection","rectBoundingBox","dimensionModel","hoverLabelIdealAlign","displayInd","catLabel","hoverinfoParts","createHoverLabelForDimensionHovermode","allHoverlabels","bandNode","createHoverLabelForColorHovermode","bandBoundingBox","totalCount","bandColorCount","forEach","catCount","colorCount","pColorAndCat","pCatGivenColor","pColorGivenCat","categorycount","colorcount","bandcolorcount","mouseY","hoveron","hoverItems","dragDimensionDisplayInd","initialDragDimensionDisplayInds","dragHasMoved","dragCategoryDisplayInd","catMouseX","catMouseY","initialDragCategoryDisplayInds","c","dragY","potentialClickBand","dragDimInd","prevDimInd","nextDimInd","dragCategory","dy","categoryY","catDisplayInd","dimCategoryViews","catAbove","catBelow","dragX","prevDimension","nextDimension","updateDimensionViewModels","updatePathViewModels","updateSvgCategories","updateSvgPaths","restyleData","traceInd","finalDragDimensionDisplayInds","anyDimsReordered","some","initDimDisplay","finalDimDisplay","anyCatsReordered","finalDragCategoryDisplayInds","initCatDisplay","sortedCategoryModels","slice","newCategoryArray","v","newCategoryLabels","sourceEvent","transition","duration","ease","restyle","allTraces","_fullData","uid","hasTransition","selection","dimLabelSelection","catLabelSelection","newX","newAnchor","wrappedParcatsModel","parcatsModel","margin","l","r","t","domain","figureWidth","figureHeight","traceWidth","Math","floor","traceHeight","traceX","traceY","pathShape","shape","hoverinfo","split","bundlecolors","sortpaths","tickfont","buildSvgPath","leftXPositions","pathYs","pathHeight","curvature","xRefPoints1","xRefPoints2","refInterpolator","dimensionViewModels","nextYPositions","catToDisplayIndPerDim","dimToDisplayInd","displayToDimInd","pathModels","p","hasOwnProperty","pathDisplayCategoryInds","pathModel","dimensionInds","displayInds","v1","v2","sortArray1","sortArray2","reverse","unshift","pathViewModels","totalHeight","reduce","pathNumber","dimDisplayInd","catViewModle","numBands","lastCatBand","bandY","currentBand","dimensionsIndInfo","dimModel","createDimensionViewModel","categoryLabelPad","dimWidth","numDimensions","dimDx","dimX0","dimX","maxCats","numCats","catSpacing","nextCatHeight","nextCatModel","nextCat","nextCatY","categoryIndInfo"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/node_modules/plotly.js/src/traces/parcats/parcats.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar interpolateNumber = require('d3-interpolate').interpolateNumber;\nvar Plotly = require('../../plot_api/plot_api');\nvar Fx = require('../../components/fx');\nvar Lib = require('../../lib');\nvar strTranslate = Lib.strTranslate;\nvar Drawing = require('../../components/drawing');\nvar tinycolor = require('tinycolor2');\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nfunction performPlot(parcatsModels, graphDiv, layout, svg) {\n    var isStatic = graphDiv._context.staticPlot;\n\n    var viewModels = parcatsModels.map(createParcatsViewModel.bind(0, graphDiv, layout));\n\n    // Get (potentially empty) parcatslayer selection with bound data to single element array\n    var layerSelection = svg.selectAll('g.parcatslayer').data([null]);\n\n    // Initialize single parcatslayer group if it doesn't exist\n    layerSelection.enter()\n        .append('g')\n        .attr('class', 'parcatslayer')\n        .style('pointer-events', isStatic ? 'none' : 'all');\n\n    // Bind data to children of layerSelection and get reference to traceSelection\n    var traceSelection = layerSelection\n        .selectAll('g.trace.parcats')\n        .data(viewModels, key);\n\n    // Initialize group for each trace/dimensions\n    var traceEnter = traceSelection.enter()\n        .append('g')\n        .attr('class', 'trace parcats');\n\n    // Update properties for each trace\n    traceSelection\n        .attr('transform', function(d) {\n            return strTranslate(d.x, d.y);\n        });\n\n    // Initialize paths group\n    traceEnter\n        .append('g')\n        .attr('class', 'paths');\n\n    // Update paths transform\n    var pathsSelection = traceSelection\n        .select('g.paths');\n\n    // Get paths selection\n    var pathSelection = pathsSelection\n        .selectAll('path.path')\n        .data(function(d) {\n            return d.paths;\n        }, key);\n\n    // Update existing path colors\n    pathSelection\n        .attr('fill', function(d) {\n            return d.model.color;\n        });\n\n    // Create paths\n    var pathSelectionEnter = pathSelection\n        .enter()\n        .append('path')\n        .attr('class', 'path')\n        .attr('stroke-opacity', 0)\n        .attr('fill', function(d) {\n            return d.model.color;\n        })\n        .attr('fill-opacity', 0);\n\n    stylePathsNoHover(pathSelectionEnter);\n\n    // Set path geometry\n    pathSelection\n        .attr('d', function(d) {\n            return d.svgD;\n        });\n\n    // sort paths\n    if(!pathSelectionEnter.empty()) {\n        // Only sort paths if there has been a change.\n        // Otherwise paths are already sorted or a hover operation may be in progress\n        pathSelection.sort(compareRawColor);\n    }\n\n    // Remove any old paths\n    pathSelection.exit().remove();\n\n    // Path hover\n    pathSelection\n        .on('mouseover', mouseoverPath)\n        .on('mouseout', mouseoutPath)\n        .on('click', clickPath);\n\n    // Initialize dimensions group\n    traceEnter.append('g').attr('class', 'dimensions');\n\n    // Update dimensions transform\n    var dimensionsSelection = traceSelection\n        .select('g.dimensions');\n\n    // Get dimension selection\n    var dimensionSelection = dimensionsSelection\n        .selectAll('g.dimension')\n        .data(function(d) {\n            return d.dimensions;\n        }, key);\n\n    // Create dimension groups\n    dimensionSelection.enter()\n        .append('g')\n        .attr('class', 'dimension');\n\n    // Update dimension group transforms\n    dimensionSelection.attr('transform', function(d) {\n        return strTranslate(d.x, 0);\n    });\n\n    // Remove any old dimensions\n    dimensionSelection.exit().remove();\n\n    // Get category selection\n    var categorySelection = dimensionSelection\n        .selectAll('g.category')\n        .data(function(d) {\n            return d.categories;\n        }, key);\n\n    // Initialize category groups\n    var categoryGroupEnterSelection = categorySelection\n        .enter()\n        .append('g')\n        .attr('class', 'category');\n\n    // Update category transforms\n    categorySelection\n        .attr('transform', function(d) {\n            return strTranslate(0, d.y);\n        });\n\n\n    // Initialize rectangle\n    categoryGroupEnterSelection\n        .append('rect')\n        .attr('class', 'catrect')\n        .attr('pointer-events', 'none');\n\n\n    // Update rectangle\n    categorySelection.select('rect.catrect')\n        .attr('fill', 'none')\n        .attr('width', function(d) {\n            return d.width;\n        })\n        .attr('height', function(d) {\n            return d.height;\n        });\n\n    styleCategoriesNoHover(categoryGroupEnterSelection);\n\n    // Initialize color band rects\n    var bandSelection = categorySelection\n        .selectAll('rect.bandrect')\n        .data(\n            /** @param {CategoryViewModel} catViewModel*/\n            function(catViewModel) {\n                return catViewModel.bands;\n            }, key);\n\n    // Raise all update bands to the top so that fading enter/exit bands will be behind\n    bandSelection.each(function() {Lib.raiseToTop(this);});\n\n    // Update band color\n    bandSelection\n        .attr('fill', function(d) {\n            return d.color;\n        });\n\n    var bandsSelectionEnter = bandSelection.enter()\n        .append('rect')\n        .attr('class', 'bandrect')\n        .attr('stroke-opacity', 0)\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('fill-opacity', 0);\n\n    bandSelection\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('width', function(d) {\n            return d.width;\n        })\n        .attr('height', function(d) {\n            return d.height;\n        })\n        .attr('y', function(d) {\n            return d.y;\n        })\n        .attr('cursor',\n            /** @param {CategoryBandViewModel} bandModel*/\n            function(bandModel) {\n                if(bandModel.parcatsViewModel.arrangement === 'fixed') {\n                    return 'default';\n                } else if(bandModel.parcatsViewModel.arrangement === 'perpendicular') {\n                    return 'ns-resize';\n                } else {\n                    return 'move';\n                }\n            });\n\n    styleBandsNoHover(bandsSelectionEnter);\n\n    bandSelection.exit().remove();\n\n    // Initialize category label\n    categoryGroupEnterSelection\n        .append('text')\n        .attr('class', 'catlabel')\n        .attr('pointer-events', 'none');\n\n    var paperColor = graphDiv._fullLayout.paper_bgcolor;\n\n    // Update category label\n    categorySelection.select('text.catlabel')\n        .attr('text-anchor',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return 'start';\n                } else {\n                    // Place label to the left of category\n                    return 'end';\n                }\n            })\n        .attr('alignment-baseline', 'middle')\n\n        .style('text-shadow', svgTextUtils.makeTextShadow(paperColor))\n        .style('fill', 'rgb(0, 0, 0)')\n        .attr('x',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return d.width + 5;\n                } else {\n                    // Place label to the left of category\n                    return -5;\n                }\n            })\n        .attr('y', function(d) {\n            return d.height / 2;\n        })\n        .text(function(d) {\n            return d.model.categoryLabel;\n        })\n        .each(\n            /** @param {CategoryViewModel} catModel*/\n            function(catModel) {\n                Drawing.font(d3.select(this), catModel.parcatsViewModel.categorylabelfont);\n                svgTextUtils.convertToTspans(d3.select(this), graphDiv);\n            });\n\n    // Initialize dimension label\n    categoryGroupEnterSelection\n        .append('text')\n        .attr('class', 'dimlabel');\n\n    // Update dimension label\n    categorySelection.select('text.dimlabel')\n        .attr('text-anchor', 'middle')\n        .attr('alignment-baseline', 'baseline')\n        .attr('cursor',\n             /** @param {CategoryViewModel} catModel*/\n            function(catModel) {\n                if(catModel.parcatsViewModel.arrangement === 'fixed') {\n                    return 'default';\n                } else {\n                    return 'ew-resize';\n                }\n            })\n        .attr('x', function(d) {\n            return d.width / 2;\n        })\n        .attr('y', -5)\n        .text(function(d, i) {\n            if(i === 0) {\n                // Add dimension label above topmost category\n                return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n            } else {\n                return null;\n            }\n        })\n        .each(\n            /** @param {CategoryViewModel} catModel*/\n            function(catModel) {\n                Drawing.font(d3.select(this), catModel.parcatsViewModel.labelfont);\n            });\n\n    // Category hover\n    // categorySelection.select('rect.catrect')\n    categorySelection.selectAll('rect.bandrect')\n        .on('mouseover', mouseoverCategoryBand)\n        .on('mouseout', mouseoutCategory);\n\n    // Remove unused categories\n    categorySelection.exit().remove();\n\n    // Setup drag\n    dimensionSelection.call(d3.behavior.drag()\n        .origin(function(d) {\n            return {x: d.x, y: 0};\n        })\n        .on('dragstart', dragDimensionStart)\n        .on('drag', dragDimension)\n        .on('dragend', dragDimensionEnd));\n\n\n    // Save off selections to view models\n    traceSelection.each(function(d) {\n        d.traceSelection = d3.select(this);\n        d.pathSelection = d3.select(this).selectAll('g.paths').selectAll('path.path');\n        d.dimensionSelection = d3.select(this).selectAll('g.dimensions').selectAll('g.dimension');\n    });\n\n    // Remove any orphan traces\n    traceSelection.exit().remove();\n}\n\n/**\n * Create / update parcat traces\n *\n * @param {Object} graphDiv\n * @param {Object} svg\n * @param {Array.<ParcatsModel>} parcatsModels\n * @param {Layout} layout\n */\nmodule.exports = function(graphDiv, svg, parcatsModels, layout) {\n    performPlot(parcatsModels, graphDiv, layout, svg);\n};\n\n/**\n * Function the returns the key property of an object for use with as D3 join function\n * @param d\n */\nfunction key(d) {\n    return d.key;\n}\n\n /** True if a category view model is in the right-most display dimension\n  * @param {CategoryViewModel} d */\nfunction catInRightDim(d) {\n    var numDims = d.parcatsViewModel.dimensions.length;\n    var leftDimInd = d.parcatsViewModel.dimensions[numDims - 1].model.dimensionInd;\n    return d.model.dimensionInd === leftDimInd;\n}\n\n/**\n * @param {PathViewModel} a\n * @param {PathViewModel} b\n */\nfunction compareRawColor(a, b) {\n    if(a.model.rawColor > b.model.rawColor) {\n        return 1;\n    } else if(a.model.rawColor < b.model.rawColor) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\n/**\n * Handle path mouseover\n * @param {PathViewModel} d\n */\nfunction mouseoverPath(d) {\n    if(!d.parcatsViewModel.dragDimension) {\n        // We're not currently dragging\n\n        if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            // hoverinfo is not skip, so we at least style the paths and emit interaction events\n\n            // Raise path to top\n            Lib.raiseToTop(this);\n\n            stylePathsHover(d3.select(this));\n\n            // Emit hover event\n            var points = buildPointsArrayForPath(d);\n            var constraints = buildConstraintsForPath(d);\n            d.parcatsViewModel.graphDiv.emit('plotly_hover', {\n                points: points, event: d3.event, constraints: constraints\n            });\n\n            // Handle hover label\n            if(d.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n                // hoverinfo is a combination of 'count' and 'probability'\n\n                // Mouse\n                var hoverX = d3.mouse(this)[0];\n\n                // Label\n                var gd = d.parcatsViewModel.graphDiv;\n                var trace = d.parcatsViewModel.trace;\n                var fullLayout = gd._fullLayout;\n                var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n                var graphDivBBox = d.parcatsViewModel.graphDiv.getBoundingClientRect();\n\n                // Find path center in path coordinates\n                var pathCenterX,\n                    pathCenterY,\n                    dimInd;\n\n                for(dimInd = 0; dimInd < (d.leftXs.length - 1); dimInd++) {\n                    if(d.leftXs[dimInd] + d.dimWidths[dimInd] - 2 <= hoverX && hoverX <= d.leftXs[dimInd + 1] + 2) {\n                        var leftDim = d.parcatsViewModel.dimensions[dimInd];\n                        var rightDim = d.parcatsViewModel.dimensions[dimInd + 1];\n                        pathCenterX = (leftDim.x + leftDim.width + rightDim.x) / 2;\n                        pathCenterY = (d.topYs[dimInd] + d.topYs[dimInd + 1] + d.height) / 2;\n                        break;\n                    }\n                }\n\n                // Find path center in root coordinates\n                var hoverCenterX = d.parcatsViewModel.x + pathCenterX;\n                var hoverCenterY = d.parcatsViewModel.y + pathCenterY;\n\n                var textColor = tinycolor.mostReadable(d.model.color, ['black', 'white']);\n\n                var count = d.model.count;\n                var prob = count / d.parcatsViewModel.model.count;\n                var labels = {\n                    countLabel: count,\n                    probabilityLabel: prob.toFixed(3)\n                };\n\n                // Build hover text\n                var hovertextParts = [];\n                if(d.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n                    hovertextParts.push(['Count:', labels.countLabel].join(' '));\n                }\n                if(d.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n                    hovertextParts.push(['P:', labels.probabilityLabel].join(' '));\n                }\n\n                var hovertext = hovertextParts.join('<br>');\n                var mouseX = d3.mouse(gd)[0];\n\n                Fx.loneHover({\n                    trace: trace,\n                    x: hoverCenterX - rootBBox.left + graphDivBBox.left,\n                    y: hoverCenterY - rootBBox.top + graphDivBBox.top,\n                    text: hovertext,\n                    color: d.model.color,\n                    borderColor: 'black',\n                    fontFamily: 'Monaco, \"Courier New\", monospace',\n                    fontSize: 10,\n                    fontColor: textColor,\n                    idealAlign: mouseX < hoverCenterX ? 'right' : 'left',\n                    hovertemplate: (trace.line || {}).hovertemplate,\n                    hovertemplateLabels: labels,\n                    eventData: [{\n                        data: trace._input,\n                        fullData: trace,\n                        count: count,\n                        probability: prob\n                    }]\n                }, {\n                    container: fullLayout._hoverlayer.node(),\n                    outerContainer: fullLayout._paper.node(),\n                    gd: gd\n                });\n            }\n        }\n    }\n}\n\n/**\n * Handle path mouseout\n * @param {PathViewModel} d\n */\nfunction mouseoutPath(d) {\n    if(!d.parcatsViewModel.dragDimension) {\n        // We're not currently dragging\n        stylePathsNoHover(d3.select(this));\n\n        // Remove and hover label\n        Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n\n        // Restore path order\n        d.parcatsViewModel.pathSelection.sort(compareRawColor);\n\n        // Emit unhover event\n        if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            var points = buildPointsArrayForPath(d);\n            var constraints = buildConstraintsForPath(d);\n            d.parcatsViewModel.graphDiv.emit('plotly_unhover', {\n                points: points, event: d3.event, constraints: constraints\n            });\n        }\n    }\n}\n\n/**\n * Build array of point objects for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\nfunction buildPointsArrayForPath(d) {\n    var points = [];\n    var curveNumber = getTraceIndex(d.parcatsViewModel);\n\n    for(var i = 0; i < d.model.valueInds.length; i++) {\n        var pointNumber = d.model.valueInds[i];\n        points.push({\n            curveNumber: curveNumber,\n            pointNumber: pointNumber\n        });\n    }\n    return points;\n}\n\n/**\n * Build constraints object for a path\n *\n * For use in click/hover events\n * @param {PathViewModel} d\n */\nfunction buildConstraintsForPath(d) {\n    var constraints = {};\n    var dimensions = d.parcatsViewModel.model.dimensions;\n\n    // dimensions\n    for(var i = 0; i < dimensions.length; i++) {\n        var dimension = dimensions[i];\n        var category = dimension.categories[d.model.categoryInds[i]];\n        constraints[dimension.containerInd] = category.categoryValue;\n    }\n\n    // color\n    if(d.model.rawColor !== undefined) {\n        constraints.color = d.model.rawColor;\n    }\n    return constraints;\n}\n\n/**\n * Handle path click\n * @param {PathViewModel} d\n */\nfunction clickPath(d) {\n    if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n        // hoverinfo it's skip, so interaction events aren't disabled\n        var points = buildPointsArrayForPath(d);\n        var constraints = buildConstraintsForPath(d);\n        d.parcatsViewModel.graphDiv.emit('plotly_click', {\n            points: points, event: d3.event, constraints: constraints\n        });\n    }\n}\n\nfunction stylePathsNoHover(pathSelection) {\n    pathSelection\n        .attr('fill', function(d) {\n            return d.model.color;\n        })\n        .attr('fill-opacity', 0.6)\n        .attr('stroke', 'lightgray')\n        .attr('stroke-width', 0.2)\n        .attr('stroke-opacity', 1.0);\n}\n\nfunction stylePathsHover(pathSelection) {\n    pathSelection\n        .attr('fill-opacity', 0.8)\n        .attr('stroke', function(d) {\n            return tinycolor.mostReadable(d.model.color, ['black', 'white']);\n        })\n        .attr('stroke-width', 0.3);\n}\n\nfunction styleCategoryHover(categorySelection) {\n    categorySelection\n        .select('rect.catrect')\n        .attr('stroke', 'black')\n        .attr('stroke-width', 2.5);\n}\n\nfunction styleCategoriesNoHover(categorySelection) {\n    categorySelection\n        .select('rect.catrect')\n        .attr('stroke', 'black')\n        .attr('stroke-width', 1)\n        .attr('stroke-opacity', 1);\n}\n\nfunction styleBandsHover(bandsSelection) {\n    bandsSelection\n        .attr('stroke', 'black')\n        .attr('stroke-width', 1.5);\n}\n\nfunction styleBandsNoHover(bandsSelection) {\n    bandsSelection\n        .attr('stroke', 'black')\n        .attr('stroke-width', 0.2)\n        .attr('stroke-opacity', 1.0)\n        .attr('fill-opacity', 1.0);\n}\n\n/**\n * Return selection of all paths that pass through the specified category\n * @param {CategoryBandViewModel} catBandViewModel\n */\nfunction selectPathsThroughCategoryBandColor(catBandViewModel) {\n    var allPaths = catBandViewModel.parcatsViewModel.pathSelection;\n    var dimInd = catBandViewModel.categoryViewModel.model.dimensionInd;\n    var catInd = catBandViewModel.categoryViewModel.model.categoryInd;\n\n    return allPaths\n        .filter(\n            /** @param {PathViewModel} pathViewModel */\n            function(pathViewModel) {\n                return pathViewModel.model.categoryInds[dimInd] === catInd &&\n                    pathViewModel.model.color === catBandViewModel.color;\n            });\n}\n\n\n/**\n * Perform hover styling for all paths that pass though the specified band element's category\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction styleForCategoryHovermode(bandElement) {\n    // Get all bands in the current category\n    var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect');\n\n    // Raise and style paths\n    bandSel.each(function(bvm) {\n        var paths = selectPathsThroughCategoryBandColor(bvm);\n        stylePathsHover(paths);\n        paths.each(function() {\n            // Raise path to top\n            Lib.raiseToTop(this);\n        });\n    });\n\n    // Style category\n    styleCategoryHover(d3.select(bandElement.parentNode));\n}\n\n/**\n * Perform hover styling for all paths that pass though the category of the specified band element and share the\n * same color\n *\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction styleForColorHovermode(bandElement) {\n    var bandViewModel = d3.select(bandElement).datum();\n    var catPaths = selectPathsThroughCategoryBandColor(bandViewModel);\n    stylePathsHover(catPaths);\n    catPaths.each(function() {\n        // Raise path to top\n        Lib.raiseToTop(this);\n    });\n\n    // Style category for drag\n    d3.select(bandElement.parentNode)\n        .selectAll('rect.bandrect')\n        .filter(function(b) {return b.color === bandViewModel.color;})\n        .each(function() {\n            Lib.raiseToTop(this);\n            styleBandsHover(d3.select(this));\n        });\n}\n\n\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\nfunction emitPointsEventCategoryHovermode(bandElement, eventName, event) {\n    // Get all bands in the current category\n    var bandViewModel = d3.select(bandElement).datum();\n    var categoryModel = bandViewModel.categoryViewModel.model;\n    var gd = bandViewModel.parcatsViewModel.graphDiv;\n    var bandSel = d3.select(bandElement.parentNode).selectAll('rect.bandrect');\n\n    var points = [];\n    bandSel.each(function(bvm) {\n        var paths = selectPathsThroughCategoryBandColor(bvm);\n        paths.each(function(pathViewModel) {\n            // Extend points array\n            Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n        });\n    });\n\n    var constraints = {};\n    constraints[categoryModel.dimensionInd] = categoryModel.categoryValue;\n    gd.emit(eventName, {\n        points: points, event: event, constraints: constraints\n    });\n}\n\n/**\n * @param {HTMLElement} bandElement\n *  HTML element for band\n * @param eventName\n *  Event name (plotly_hover or plotly_click)\n * @param event\n *  Mouse Event\n */\nfunction emitPointsEventColorHovermode(bandElement, eventName, event) {\n    var bandViewModel = d3.select(bandElement).datum();\n    var categoryModel = bandViewModel.categoryViewModel.model;\n    var gd = bandViewModel.parcatsViewModel.graphDiv;\n    var paths = selectPathsThroughCategoryBandColor(bandViewModel);\n\n    var points = [];\n    paths.each(function(pathViewModel) {\n        // Extend points array\n        Array.prototype.push.apply(points, buildPointsArrayForPath(pathViewModel));\n    });\n\n    var constraints = {};\n    constraints[categoryModel.dimensionInd] = categoryModel.categoryValue;\n    // color\n    if(bandViewModel.rawColor !== undefined) {\n        constraints.color = bandViewModel.rawColor;\n    }\n    gd.emit(eventName, {\n        points: points, event: event, constraints: constraints\n    });\n}\n\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement) {\n    gd._fullLayout._calcInverseTransform(gd);\n    var scaleX = gd._fullLayout._invScaleX;\n    var scaleY = gd._fullLayout._invScaleY;\n\n    // Selections\n    var rectSelection = d3.select(bandElement.parentNode).select('rect.catrect');\n    var rectBoundingBox = rectSelection.node().getBoundingClientRect();\n\n    // Models\n    /** @type {CategoryViewModel} */\n    var catViewModel = rectSelection.datum();\n    var parcatsViewModel = catViewModel.parcatsViewModel;\n    var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n    var trace = parcatsViewModel.trace;\n\n    // Positions\n    var hoverCenterY = rectBoundingBox.top + rectBoundingBox.height / 2;\n    var hoverCenterX,\n        hoverLabelIdealAlign;\n\n    if(parcatsViewModel.dimensions.length > 1 &&\n        dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n        // right most dimension\n        hoverCenterX = rectBoundingBox.left;\n        hoverLabelIdealAlign = 'left';\n    } else {\n        hoverCenterX = rectBoundingBox.left + rectBoundingBox.width;\n        hoverLabelIdealAlign = 'right';\n    }\n\n    var count = catViewModel.model.count;\n    var catLabel = catViewModel.model.categoryLabel;\n    var prob = count / catViewModel.parcatsViewModel.model.count;\n    var labels = {\n        countLabel: count,\n        categoryLabel: catLabel,\n        probabilityLabel: prob.toFixed(3)\n    };\n\n    // Hover label text\n    var hoverinfoParts = [];\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n        hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n    }\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n        hoverinfoParts.push(['P(' + labels.categoryLabel + '):', labels.probabilityLabel].join(' '));\n    }\n\n    var hovertext = hoverinfoParts.join('<br>');\n    return {\n        trace: trace,\n        x: scaleX * (hoverCenterX - rootBBox.left),\n        y: scaleY * (hoverCenterY - rootBBox.top),\n        text: hovertext,\n        color: 'lightgray',\n        borderColor: 'black',\n        fontFamily: 'Monaco, \"Courier New\", monospace',\n        fontSize: 12,\n        fontColor: 'black',\n        idealAlign: hoverLabelIdealAlign,\n        hovertemplate: trace.hovertemplate,\n        hovertemplateLabels: labels,\n        eventData: [{\n            data: trace._input,\n            fullData: trace,\n            count: count,\n            category: catLabel,\n            probability: prob\n        }]\n    };\n}\n\n/**\n * Create hover label for a band element's category (for use when hoveron === 'category')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement) {\n    var allHoverlabels = [];\n\n    d3.select(bandElement.parentNode.parentNode)\n        .selectAll('g.category')\n        .select('rect.catrect')\n        .each(function() {\n            var bandNode = this;\n            allHoverlabels.push(createHoverLabelForCategoryHovermode(gd, rootBBox, bandNode));\n        });\n\n    return allHoverlabels;\n}\n\n/**\n * Create hover labels for a band element's category (for use when hoveron === 'dimension')\n *\n * @param {ClientRect} rootBBox\n *  Client bounding box for root of figure\n * @param {HTMLElement} bandElement\n *  HTML element for band\n *\n */\nfunction createHoverLabelForColorHovermode(gd, rootBBox, bandElement) {\n    gd._fullLayout._calcInverseTransform(gd);\n    var scaleX = gd._fullLayout._invScaleX;\n    var scaleY = gd._fullLayout._invScaleY;\n\n    var bandBoundingBox = bandElement.getBoundingClientRect();\n\n    // Models\n    /** @type {CategoryBandViewModel} */\n    var bandViewModel = d3.select(bandElement).datum();\n    var catViewModel = bandViewModel.categoryViewModel;\n    var parcatsViewModel = catViewModel.parcatsViewModel;\n    var dimensionModel = parcatsViewModel.model.dimensions[catViewModel.model.dimensionInd];\n    var trace = parcatsViewModel.trace;\n\n    // positions\n    var hoverCenterY = bandBoundingBox.y + bandBoundingBox.height / 2;\n\n    var hoverCenterX,\n        hoverLabelIdealAlign;\n    if(parcatsViewModel.dimensions.length > 1 &&\n        dimensionModel.displayInd === parcatsViewModel.dimensions.length - 1) {\n        // right most dimension\n        hoverCenterX = bandBoundingBox.left;\n        hoverLabelIdealAlign = 'left';\n    } else {\n        hoverCenterX = bandBoundingBox.left + bandBoundingBox.width;\n        hoverLabelIdealAlign = 'right';\n    }\n\n    // Labels\n    var catLabel = catViewModel.model.categoryLabel;\n\n    // Counts\n    var totalCount = bandViewModel.parcatsViewModel.model.count;\n\n    var bandColorCount = 0;\n    bandViewModel.categoryViewModel.bands.forEach(function(b) {\n        if(b.color === bandViewModel.color) {\n            bandColorCount += b.count;\n        }\n    });\n\n    var catCount = catViewModel.model.count;\n\n    var colorCount = 0;\n    parcatsViewModel.pathSelection.each(\n        /** @param {PathViewModel} pathViewModel */\n        function(pathViewModel) {\n            if(pathViewModel.model.color === bandViewModel.color) {\n                colorCount += pathViewModel.model.count;\n            }\n        });\n\n    var pColorAndCat = bandColorCount / totalCount;\n    var pCatGivenColor = bandColorCount / colorCount;\n    var pColorGivenCat = bandColorCount / catCount;\n\n    var labels = {\n        countLabel: bandColorCount,\n        categoryLabel: catLabel,\n        probabilityLabel: pColorAndCat.toFixed(3)\n    };\n\n    // Hover label text\n    var hoverinfoParts = [];\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('count') !== -1) {\n        hoverinfoParts.push(['Count:', labels.countLabel].join(' '));\n    }\n    if(catViewModel.parcatsViewModel.hoverinfoItems.indexOf('probability') !== -1) {\n        hoverinfoParts.push('P(color ∩ ' + catLabel + '): ' + labels.probabilityLabel);\n        hoverinfoParts.push('P(' + catLabel + ' | color): ' + pCatGivenColor.toFixed(3));\n        hoverinfoParts.push('P(color | ' + catLabel + '): ' + pColorGivenCat.toFixed(3));\n    }\n\n    var hovertext = hoverinfoParts.join('<br>');\n\n    // Compute text color\n    var textColor = tinycolor.mostReadable(bandViewModel.color, ['black', 'white']);\n\n    return {\n        trace: trace,\n        x: scaleX * (hoverCenterX - rootBBox.left),\n        y: scaleY * (hoverCenterY - rootBBox.top),\n        // name: 'NAME',\n        text: hovertext,\n        color: bandViewModel.color,\n        borderColor: 'black',\n        fontFamily: 'Monaco, \"Courier New\", monospace',\n        fontColor: textColor,\n        fontSize: 10,\n        idealAlign: hoverLabelIdealAlign,\n        hovertemplate: trace.hovertemplate,\n        hovertemplateLabels: labels,\n        eventData: [{\n            data: trace._input,\n            fullData: trace,\n            category: catLabel,\n            count: totalCount,\n            probability: pColorAndCat,\n            categorycount: catCount,\n            colorcount: colorCount,\n            bandcolorcount: bandColorCount\n        }]\n    };\n}\n\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\nfunction mouseoverCategoryBand(bandViewModel) {\n    if(!bandViewModel.parcatsViewModel.dragDimension) {\n        // We're not currently dragging\n\n        if(bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            // hoverinfo is not skip, so we at least style the bands and emit interaction events\n\n            // Mouse\n            var mouseY = d3.mouse(this)[1];\n            if(mouseY < -1) {\n                // Hover is above above the category rectangle (probably the dimension title text)\n                return;\n            }\n\n            var gd = bandViewModel.parcatsViewModel.graphDiv;\n            var fullLayout = gd._fullLayout;\n            var rootBBox = fullLayout._paperdiv.node().getBoundingClientRect();\n            var hoveron = bandViewModel.parcatsViewModel.hoveron;\n\n            /** @type {HTMLElement} */\n            var bandElement = this;\n\n            // Handle style and events\n            if(hoveron === 'color') {\n                styleForColorHovermode(bandElement);\n                emitPointsEventColorHovermode(bandElement, 'plotly_hover', d3.event);\n            } else {\n                styleForCategoryHovermode(bandElement);\n                emitPointsEventCategoryHovermode(bandElement, 'plotly_hover', d3.event);\n            }\n\n            // Handle hover label\n            if(bandViewModel.parcatsViewModel.hoverinfoItems.indexOf('none') === -1) {\n                var hoverItems;\n                if(hoveron === 'category') {\n                    hoverItems = createHoverLabelForCategoryHovermode(gd, rootBBox, bandElement);\n                } else if(hoveron === 'color') {\n                    hoverItems = createHoverLabelForColorHovermode(gd, rootBBox, bandElement);\n                } else if(hoveron === 'dimension') {\n                    hoverItems = createHoverLabelForDimensionHovermode(gd, rootBBox, bandElement);\n                }\n\n                if(hoverItems) {\n                    Fx.loneHover(hoverItems, {\n                        container: fullLayout._hoverlayer.node(),\n                        outerContainer: fullLayout._paper.node(),\n                        gd: gd\n                    });\n                }\n            }\n        }\n    }\n}\n\n\n/**\n * Handle dimension mouseover\n * @param {CategoryBandViewModel} bandViewModel\n */\nfunction mouseoutCategory(bandViewModel) {\n    var parcatsViewModel = bandViewModel.parcatsViewModel;\n\n    if(!parcatsViewModel.dragDimension) {\n        // We're not dragging anything\n\n        // Reset unhovered styles\n        stylePathsNoHover(parcatsViewModel.pathSelection);\n        styleCategoriesNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category'));\n        styleBandsNoHover(parcatsViewModel.dimensionSelection.selectAll('g.category').selectAll('rect.bandrect'));\n\n        // Remove hover label\n        Fx.loneUnhover(parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n\n        // Restore path order\n        parcatsViewModel.pathSelection.sort(compareRawColor);\n\n        // Emit unhover event\n        if(parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n            var hoveron = bandViewModel.parcatsViewModel.hoveron;\n            var bandElement = this;\n\n            // Handle style and events\n            if(hoveron === 'color') {\n                emitPointsEventColorHovermode(bandElement, 'plotly_unhover', d3.event);\n            } else {\n                emitPointsEventCategoryHovermode(bandElement, 'plotly_unhover', d3.event);\n            }\n        }\n    }\n}\n\n\n/**\n * Handle dimension drag start\n * @param {DimensionViewModel} d\n */\nfunction dragDimensionStart(d) {\n    // Check if dragging is supported\n    if(d.parcatsViewModel.arrangement === 'fixed') {\n        return;\n    }\n\n    // Save off initial drag indexes for dimension\n    d.dragDimensionDisplayInd = d.model.displayInd;\n    d.initialDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function(d) {return d.displayInd;});\n    d.dragHasMoved = false;\n\n    // Check for category hit\n    d.dragCategoryDisplayInd = null;\n    d3.select(this)\n        .selectAll('g.category')\n        .select('rect.catrect')\n        .each(\n            /** @param {CategoryViewModel} catViewModel */\n            function(catViewModel) {\n                var catMouseX = d3.mouse(this)[0];\n                var catMouseY = d3.mouse(this)[1];\n\n\n                if(-2 <= catMouseX && catMouseX <= catViewModel.width + 2 &&\n                    -2 <= catMouseY && catMouseY <= catViewModel.height + 2) {\n                    // Save off initial drag indexes for categories\n                    d.dragCategoryDisplayInd = catViewModel.model.displayInd;\n                    d.initialDragCategoryDisplayInds = d.model.categories.map(function(c) {\n                        return c.displayInd;\n                    });\n\n                    // Initialize categories dragY to be the current y position\n                    catViewModel.model.dragY = catViewModel.y;\n\n                    // Raise category\n                    Lib.raiseToTop(this.parentNode);\n\n                    // Get band element\n                    d3.select(this.parentNode)\n                        .selectAll('rect.bandrect')\n                        /** @param {CategoryBandViewModel} bandViewModel */\n                        .each(function(bandViewModel) {\n                            if(bandViewModel.y < catMouseY && catMouseY <= bandViewModel.y + bandViewModel.height) {\n                                d.potentialClickBand = this;\n                            }\n                        });\n                }\n            });\n\n    // Update toplevel drag dimension\n    d.parcatsViewModel.dragDimension = d;\n\n    // Remove hover label if any\n    Fx.loneUnhover(d.parcatsViewModel.graphDiv._fullLayout._hoverlayer.node());\n}\n\n/**\n * Handle dimension drag\n * @param {DimensionViewModel} d\n */\nfunction dragDimension(d) {\n    // Check if dragging is supported\n    if(d.parcatsViewModel.arrangement === 'fixed') {\n        return;\n    }\n\n    d.dragHasMoved = true;\n\n    if(d.dragDimensionDisplayInd === null) {\n        return;\n    }\n\n    var dragDimInd = d.dragDimensionDisplayInd;\n    var prevDimInd = dragDimInd - 1;\n    var nextDimInd = dragDimInd + 1;\n\n    var dragDimension = d.parcatsViewModel\n        .dimensions[dragDimInd];\n\n    // Update category\n    if(d.dragCategoryDisplayInd !== null) {\n        var dragCategory = dragDimension.categories[d.dragCategoryDisplayInd];\n\n        // Update dragY by dy\n        dragCategory.model.dragY += d3.event.dy;\n        var categoryY = dragCategory.model.dragY;\n\n        // Check for category drag swaps\n        var catDisplayInd = dragCategory.model.displayInd;\n        var dimCategoryViews = dragDimension.categories;\n\n        var catAbove = dimCategoryViews[catDisplayInd - 1];\n        var catBelow = dimCategoryViews[catDisplayInd + 1];\n\n        // Check for overlap above\n        if(catAbove !== undefined) {\n            if(categoryY < (catAbove.y + catAbove.height / 2.0)) {\n                // Swap display inds\n                dragCategory.model.displayInd = catAbove.model.displayInd;\n                catAbove.model.displayInd = catDisplayInd;\n            }\n        }\n\n        if(catBelow !== undefined) {\n            if((categoryY + dragCategory.height) > (catBelow.y + catBelow.height / 2.0)) {\n                // Swap display inds\n                dragCategory.model.displayInd = catBelow.model.displayInd;\n                catBelow.model.displayInd = catDisplayInd;\n            }\n        }\n\n        // Update category drag display index\n        d.dragCategoryDisplayInd = dragCategory.model.displayInd;\n    }\n\n    // Update dimension position\n    if(d.dragCategoryDisplayInd === null || d.parcatsViewModel.arrangement === 'freeform') {\n        dragDimension.model.dragX = d3.event.x;\n\n        // Check for dimension swaps\n        var prevDimension = d.parcatsViewModel.dimensions[prevDimInd];\n        var nextDimension = d.parcatsViewModel.dimensions[nextDimInd];\n\n        if(prevDimension !== undefined) {\n            if(dragDimension.model.dragX < (prevDimension.x + prevDimension.width)) {\n                // Swap display inds\n                dragDimension.model.displayInd = prevDimension.model.displayInd;\n                prevDimension.model.displayInd = dragDimInd;\n            }\n        }\n\n        if(nextDimension !== undefined) {\n            if((dragDimension.model.dragX + dragDimension.width) > nextDimension.x) {\n                // Swap display inds\n                dragDimension.model.displayInd = nextDimension.model.displayInd;\n                nextDimension.model.displayInd = d.dragDimensionDisplayInd;\n            }\n        }\n\n        // Update drag display index\n        d.dragDimensionDisplayInd = dragDimension.model.displayInd;\n    }\n\n    // Update view models\n    updateDimensionViewModels(d.parcatsViewModel);\n    updatePathViewModels(d.parcatsViewModel);\n\n    // Update svg geometry\n    updateSvgCategories(d.parcatsViewModel);\n    updateSvgPaths(d.parcatsViewModel);\n}\n\n\n/**\n * Handle dimension drag end\n * @param {DimensionViewModel} d\n */\nfunction dragDimensionEnd(d) {\n    // Check if dragging is supported\n    if(d.parcatsViewModel.arrangement === 'fixed') {\n        return;\n    }\n\n    if(d.dragDimensionDisplayInd === null) {\n        return;\n    }\n\n    d3.select(this).selectAll('text').attr('font-weight', 'normal');\n\n    // Compute restyle command\n    // -----------------------\n    var restyleData = {};\n    var traceInd = getTraceIndex(d.parcatsViewModel);\n\n    // ### Handle dimension reordering ###\n    var finalDragDimensionDisplayInds = d.parcatsViewModel.model.dimensions.map(function(d) {return d.displayInd;});\n    var anyDimsReordered = d.initialDragDimensionDisplayInds.some(function(initDimDisplay, dimInd) {\n        return initDimDisplay !== finalDragDimensionDisplayInds[dimInd];\n    });\n\n    if(anyDimsReordered) {\n        finalDragDimensionDisplayInds.forEach(function(finalDimDisplay, dimInd) {\n            var containerInd = d.parcatsViewModel.model.dimensions[dimInd].containerInd;\n            restyleData['dimensions[' + containerInd + '].displayindex'] = finalDimDisplay;\n        });\n    }\n\n    // ### Handle category reordering ###\n    var anyCatsReordered = false;\n    if(d.dragCategoryDisplayInd !== null) {\n        var finalDragCategoryDisplayInds = d.model.categories.map(function(c) {\n            return c.displayInd;\n        });\n\n        anyCatsReordered = d.initialDragCategoryDisplayInds.some(function(initCatDisplay, catInd) {\n            return initCatDisplay !== finalDragCategoryDisplayInds[catInd];\n        });\n\n        if(anyCatsReordered) {\n            // Sort a shallow copy of the category models by display index\n            var sortedCategoryModels = d.model.categories.slice().sort(\n                function(a, b) { return a.displayInd - b.displayInd; });\n\n            // Get new categoryarray and ticktext values\n            var newCategoryArray = sortedCategoryModels.map(function(v) { return v.categoryValue; });\n            var newCategoryLabels = sortedCategoryModels.map(function(v) { return v.categoryLabel; });\n\n            restyleData['dimensions[' + d.model.containerInd + '].categoryarray'] = [newCategoryArray];\n            restyleData['dimensions[' + d.model.containerInd + '].ticktext'] = [newCategoryLabels];\n            restyleData['dimensions[' + d.model.containerInd + '].categoryorder'] = 'array';\n        }\n    }\n\n    // Handle potential click event\n    // ----------------------------\n    if(d.parcatsViewModel.hoverinfoItems.indexOf('skip') === -1) {\n        if(!d.dragHasMoved && d.potentialClickBand) {\n            if(d.parcatsViewModel.hoveron === 'color') {\n                emitPointsEventColorHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n            } else {\n                emitPointsEventCategoryHovermode(d.potentialClickBand, 'plotly_click', d3.event.sourceEvent);\n            }\n        }\n    }\n\n    // Nullify drag states\n    // -------------------\n    d.model.dragX = null;\n    if(d.dragCategoryDisplayInd !== null) {\n        var dragCategory = d.parcatsViewModel\n            .dimensions[d.dragDimensionDisplayInd]\n            .categories[d.dragCategoryDisplayInd];\n\n        dragCategory.model.dragY = null;\n        d.dragCategoryDisplayInd = null;\n    }\n\n    d.dragDimensionDisplayInd = null;\n    d.parcatsViewModel.dragDimension = null;\n    d.dragHasMoved = null;\n    d.potentialClickBand = null;\n\n    // Update view models\n    // ------------------\n    updateDimensionViewModels(d.parcatsViewModel);\n    updatePathViewModels(d.parcatsViewModel);\n\n    // Perform transition\n    // ------------------\n    var transition = d3.transition()\n        .duration(300)\n        .ease('cubic-in-out');\n\n    transition\n        .each(function() {\n            updateSvgCategories(d.parcatsViewModel, true);\n            updateSvgPaths(d.parcatsViewModel, true);\n        })\n        .each('end', function() {\n            if(anyDimsReordered || anyCatsReordered) {\n                // Perform restyle if the order of categories or dimensions changed\n                Plotly.restyle(d.parcatsViewModel.graphDiv, restyleData, [traceInd]);\n            }\n        });\n}\n\n/**\n *\n * @param {ParcatsViewModel} parcatsViewModel\n */\nfunction getTraceIndex(parcatsViewModel) {\n    var traceInd;\n    var allTraces = parcatsViewModel.graphDiv._fullData;\n    for(var i = 0; i < allTraces.length; i++) {\n        if(parcatsViewModel.key === allTraces[i].uid) {\n            traceInd = i;\n            break;\n        }\n    }\n    return traceInd;\n}\n\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\nfunction updateSvgPaths(parcatsViewModel, hasTransition) {\n    if(hasTransition === undefined) {\n        hasTransition = false;\n    }\n\n    function transition(selection) {\n        return hasTransition ? selection.transition() : selection;\n    }\n\n    // Update binding\n    parcatsViewModel.pathSelection.data(function(d) {\n        return d.paths;\n    }, key);\n\n    // Update paths\n    transition(parcatsViewModel.pathSelection).attr('d', function(d) {\n        return d.svgD;\n    });\n}\n\n/** Update the svg paths for view model\n * @param {ParcatsViewModel} parcatsViewModel\n * @param {boolean} hasTransition Whether to update element with transition\n */\nfunction updateSvgCategories(parcatsViewModel, hasTransition) {\n    if(hasTransition === undefined) {\n        hasTransition = false;\n    }\n\n    function transition(selection) {\n        return hasTransition ? selection.transition() : selection;\n    }\n\n    // Update binding\n    parcatsViewModel.dimensionSelection\n        .data(function(d) {\n            return d.dimensions;\n        }, key);\n\n    var categorySelection = parcatsViewModel.dimensionSelection\n        .selectAll('g.category')\n        .data(function(d) {return d.categories;}, key);\n\n    // Update dimension position\n    transition(parcatsViewModel.dimensionSelection)\n        .attr('transform', function(d) {\n            return strTranslate(d.x, 0);\n        });\n\n    // Update category position\n    transition(categorySelection)\n        .attr('transform', function(d) {\n            return strTranslate(0, d.y);\n        });\n\n    var dimLabelSelection = categorySelection.select('.dimlabel');\n\n    // ### Update dimension label\n    // Only the top-most display category should have the dimension label\n    dimLabelSelection\n        .text(function(d, i) {\n            if(i === 0) {\n                // Add dimension label above topmost category\n                return d.parcatsViewModel.model.dimensions[d.model.dimensionInd].dimensionLabel;\n            } else {\n                return null;\n            }\n        });\n\n    // Update category label\n    // Categories in the right-most display dimension have their labels on\n    // the right, all others on the left\n    var catLabelSelection = categorySelection.select('.catlabel');\n    catLabelSelection\n        .attr('text-anchor',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return 'start';\n                } else {\n                    // Place label to the left of category\n                    return 'end';\n                }\n            })\n        .attr('x',\n            function(d) {\n                if(catInRightDim(d)) {\n                    // Place label to the right of category\n                    return d.width + 5;\n                } else {\n                    // Place label to the left of category\n                    return -5;\n                }\n            })\n        .each(function(d) {\n            // Update attriubutes of <tspan> elements\n            var newX;\n            var newAnchor;\n            if(catInRightDim(d)) {\n                // Place label to the right of category\n                newX = d.width + 5;\n                newAnchor = 'start';\n            } else {\n                // Place label to the left of category\n                newX = -5;\n                newAnchor = 'end';\n            }\n            d3.select(this)\n                .selectAll('tspan')\n                .attr('x', newX)\n                .attr('text-anchor', newAnchor);\n        });\n\n    // Update bands\n    // Initialize color band rects\n    var bandSelection = categorySelection\n        .selectAll('rect.bandrect')\n        .data(\n            /** @param {CategoryViewModel} catViewModel*/\n            function(catViewModel) {\n                return catViewModel.bands;\n            }, key);\n\n    var bandsSelectionEnter = bandSelection.enter()\n        .append('rect')\n        .attr('class', 'bandrect')\n        .attr('cursor', 'move')\n        .attr('stroke-opacity', 0)\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('fill-opacity', 0);\n\n    bandSelection\n        .attr('fill', function(d) {\n            return d.color;\n        })\n        .attr('width', function(d) {\n            return d.width;\n        })\n        .attr('height', function(d) {\n            return d.height;\n        })\n        .attr('y', function(d) {\n            return d.y;\n        });\n\n    styleBandsNoHover(bandsSelectionEnter);\n\n    // Raise bands to the top\n    bandSelection.each(function() {Lib.raiseToTop(this);});\n\n    // Remove unused bands\n    bandSelection.exit().remove();\n}\n\n/**\n * Create a ParcatsViewModel traces\n * @param {Object} graphDiv\n *  Top-level graph div element\n * @param {Layout} layout\n *  SVG layout object\n * @param {Array.<ParcatsModel>} wrappedParcatsModel\n *  Wrapped ParcatsModel for this trace\n * @return {ParcatsViewModel}\n */\nfunction createParcatsViewModel(graphDiv, layout, wrappedParcatsModel) {\n    // Unwrap model\n    var parcatsModel = wrappedParcatsModel[0];\n\n    // Compute margin\n    var margin = layout.margin || {l: 80, r: 80, t: 100, b: 80};\n\n    // Compute pixel position/extents\n    var trace = parcatsModel.trace;\n    var domain = trace.domain;\n    var figureWidth = layout.width;\n    var figureHeight = layout.height;\n    var traceWidth = Math.floor(figureWidth * (domain.x[1] - domain.x[0]));\n    var traceHeight = Math.floor(figureHeight * (domain.y[1] - domain.y[0]));\n    var traceX = domain.x[0] * figureWidth + margin.l;\n    var traceY = layout.height - domain.y[1] * layout.height + margin.t;\n\n    // Handle path shape\n    // -----------------\n    var pathShape = trace.line.shape;\n\n    // Handle hover info\n    // -----------------\n    var hoverinfoItems;\n    if(trace.hoverinfo === 'all') {\n        hoverinfoItems = ['count', 'probability'];\n    } else {\n        hoverinfoItems = (trace.hoverinfo || '').split('+');\n    }\n\n    // Construct parcatsViewModel\n    // --------------------------\n    var parcatsViewModel = {\n        trace: trace,\n        key: trace.uid,\n        model: parcatsModel,\n        x: traceX,\n        y: traceY,\n        width: traceWidth,\n        height: traceHeight,\n        hoveron: trace.hoveron,\n        hoverinfoItems: hoverinfoItems,\n        arrangement: trace.arrangement,\n        bundlecolors: trace.bundlecolors,\n        sortpaths: trace.sortpaths,\n        labelfont: trace.labelfont,\n        categorylabelfont: trace.tickfont,\n        pathShape: pathShape,\n        dragDimension: null,\n        margin: margin,\n        paths: [],\n        dimensions: [],\n        graphDiv: graphDiv,\n        traceSelection: null,\n        pathSelection: null,\n        dimensionSelection: null\n    };\n\n    // Update dimension view models if we have at least 1 dimension\n    if(parcatsModel.dimensions) {\n        updateDimensionViewModels(parcatsViewModel);\n\n        // Update path view models if we have at least 2 dimensions\n        updatePathViewModels(parcatsViewModel);\n    }\n    // Inside a categories view model\n    return parcatsViewModel;\n}\n\n/**\n * Build the SVG string to represents a parallel categories path\n * @param {Array.<Number>} leftXPositions\n *  Array of the x positions of the left edge of each dimension (in display order)\n * @param {Array.<Number>} pathYs\n *  Array of the y positions of the top of the path at each dimension (in display order)\n * @param {Array.<Number>} dimWidths\n *  Array of the widths of each dimension in display order\n * @param {Number} pathHeight\n *  The height of the path in pixels\n * @param {Number} curvature\n *  The curvature factor for the path. 0 results in a straight line and values greater than zero result in curved paths\n * @return {string}\n */\nfunction buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, curvature) {\n    // Compute the x midpoint of each path segment\n    var xRefPoints1 = [];\n    var xRefPoints2 = [];\n    var refInterpolator;\n    var d;\n\n    for(d = 0; d < dimWidths.length - 1; d++) {\n        refInterpolator = interpolateNumber(dimWidths[d] + leftXPositions[d], leftXPositions[d + 1]);\n        xRefPoints1.push(refInterpolator(curvature));\n        xRefPoints2.push(refInterpolator(1 - curvature));\n    }\n\n    // Move to top of path on left edge of left-most category\n    var svgD = 'M ' + leftXPositions[0] + ',' + pathYs[0];\n\n    // Horizontal line to right edge\n    svgD += 'l' + dimWidths[0] + ',0 ';\n\n    // Horizontal line to right edge\n    for(d = 1; d < dimWidths.length; d++) {\n        // Curve to left edge of category\n        svgD += 'C' + xRefPoints1[d - 1] + ',' + pathYs[d - 1] +\n              ' ' + xRefPoints2[d - 1] + ',' + pathYs[d] +\n              ' ' + leftXPositions[d] + ',' + pathYs[d];\n\n        // svgD += 'L' + leftXPositions[d] + ',' + pathYs[d];\n\n        // Horizontal line to right edge\n        svgD += 'l' + dimWidths[d] + ',0 ';\n    }\n\n    // Line down\n    svgD += 'l' + '0,' + pathHeight + ' ';\n\n    // Line to left edge of right-most category\n    svgD += 'l -' + dimWidths[dimWidths.length - 1] + ',0 ';\n\n    for(d = dimWidths.length - 2; d >= 0; d--) {\n        // Curve to right edge of category\n        svgD += 'C' + xRefPoints2[d] + ',' + (pathYs[d + 1] + pathHeight) +\n             ' ' + xRefPoints1[d] + ',' + (pathYs[d] + pathHeight) +\n             ' ' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight);\n\n        // svgD += 'L' + (leftXPositions[d] + dimWidths[d]) + ',' + (pathYs[d] + pathHeight);\n\n        // Horizontal line to right edge\n        svgD += 'l-' + dimWidths[d] + ',0 ';\n    }\n\n    // Close path\n    svgD += 'Z';\n    return svgD;\n}\n\n/**\n * Update the path view models based on the dimension view models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\nfunction updatePathViewModels(parcatsViewModel) {\n    // Initialize an array of the y position of the top of the next path to be added to each category.\n    //\n    // nextYPositions[d][c] is the y position of the next path through category with index c of dimension with index d\n    var dimensionViewModels = parcatsViewModel.dimensions;\n    var parcatsModel = parcatsViewModel.model;\n    var nextYPositions = dimensionViewModels.map(\n        function(d) {\n            return d.categories.map(\n                function(c) {\n                    return c.y;\n                });\n        });\n\n    // Array from category index to category display index for each true dimension index\n    var catToDisplayIndPerDim = parcatsViewModel.model.dimensions.map(\n        function(d) {\n            return d.categories.map(function(c) {return c.displayInd;});\n        });\n\n    // Array from true dimension index to dimension display index\n    var dimToDisplayInd = parcatsViewModel.model.dimensions.map(function(d) {return d.displayInd;});\n    var displayToDimInd = parcatsViewModel.dimensions.map(function(d) {return d.model.dimensionInd;});\n\n    // Array of the x position of the left edge of the rectangles for each dimension\n    var leftXPositions = dimensionViewModels.map(\n        function(d) {\n            return d.x;\n        });\n\n    // Compute dimension widths\n    var dimWidths = dimensionViewModels.map(function(d) {return d.width;});\n\n    // Build sorted Array of PathModel objects\n    var pathModels = [];\n    for(var p in parcatsModel.paths) {\n        if(parcatsModel.paths.hasOwnProperty(p)) {\n            pathModels.push(parcatsModel.paths[p]);\n        }\n    }\n\n    // Compute category display inds to use for sorting paths\n    function pathDisplayCategoryInds(pathModel) {\n        var dimensionInds = pathModel.categoryInds.map(function(catInd, dimInd) {return catToDisplayIndPerDim[dimInd][catInd];});\n        var displayInds = displayToDimInd.map(function(dimInd) {\n            return dimensionInds[dimInd];\n        });\n        return displayInds;\n    }\n\n    // Sort in ascending order by display index array\n    pathModels.sort(function(v1, v2) {\n        // Build display inds for each path\n        var sortArray1 = pathDisplayCategoryInds(v1);\n        var sortArray2 = pathDisplayCategoryInds(v2);\n\n        // Handle path sort order\n        if(parcatsViewModel.sortpaths === 'backward') {\n            sortArray1.reverse();\n            sortArray2.reverse();\n        }\n\n        // Append the first value index of the path to break ties\n        sortArray1.push(v1.valueInds[0]);\n        sortArray2.push(v2.valueInds[0]);\n\n        // Handle color bundling\n        if(parcatsViewModel.bundlecolors) {\n            // Prepend sort array with the raw color value\n            sortArray1.unshift(v1.rawColor);\n            sortArray2.unshift(v2.rawColor);\n        }\n\n        // colors equal, sort by display categories\n        if(sortArray1 < sortArray2) {\n            return -1;\n        }\n        if(sortArray1 > sortArray2) {\n            return 1;\n        }\n\n        return 0;\n    });\n\n    // Create path models\n    var pathViewModels = new Array(pathModels.length);\n    var totalCount = dimensionViewModels[0].model.count;\n    var totalHeight = dimensionViewModels[0].categories\n        .map(function(c) { return c.height; })\n        .reduce(function(v1, v2) { return v1 + v2; });\n\n\n    for(var pathNumber = 0; pathNumber < pathModels.length; pathNumber++) {\n        var pathModel = pathModels[pathNumber];\n\n        var pathHeight;\n        if(totalCount > 0) {\n            pathHeight = totalHeight * (pathModel.count / totalCount);\n        } else {\n            pathHeight = 0;\n        }\n\n        // Build path y coords\n        var pathYs = new Array(nextYPositions.length);\n        for(var d = 0; d < pathModel.categoryInds.length; d++) {\n            var catInd = pathModel.categoryInds[d];\n            var catDisplayInd = catToDisplayIndPerDim[d][catInd];\n            var dimDisplayInd = dimToDisplayInd[d];\n\n            // Update next y position\n            pathYs[dimDisplayInd] = nextYPositions[dimDisplayInd][catDisplayInd];\n            nextYPositions[dimDisplayInd][catDisplayInd] += pathHeight;\n\n            // Update category color information\n            var catViewModle = parcatsViewModel.dimensions[dimDisplayInd].categories[catDisplayInd];\n            var numBands = catViewModle.bands.length;\n            var lastCatBand = catViewModle.bands[numBands - 1];\n\n            if(lastCatBand === undefined || pathModel.rawColor !== lastCatBand.rawColor) {\n                // Create a new band\n                var bandY = lastCatBand === undefined ? 0 : lastCatBand.y + lastCatBand.height;\n                catViewModle.bands.push({\n                    key: bandY,\n                    color: pathModel.color,\n                    rawColor: pathModel.rawColor,\n                    height: pathHeight,\n                    width: catViewModle.width,\n                    count: pathModel.count,\n                    y: bandY,\n                    categoryViewModel: catViewModle,\n                    parcatsViewModel: parcatsViewModel\n                });\n            } else {\n                // Extend current band\n                var currentBand = catViewModle.bands[numBands - 1];\n                currentBand.height += pathHeight;\n                currentBand.count += pathModel.count;\n            }\n        }\n\n        // build svg path\n        var svgD;\n        if(parcatsViewModel.pathShape === 'hspline') {\n            svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0.5);\n        } else {\n            svgD = buildSvgPath(leftXPositions, pathYs, dimWidths, pathHeight, 0);\n        }\n\n        pathViewModels[pathNumber] = {\n            key: pathModel.valueInds[0],\n            model: pathModel,\n            height: pathHeight,\n            leftXs: leftXPositions,\n            topYs: pathYs,\n            dimWidths: dimWidths,\n            svgD: svgD,\n            parcatsViewModel: parcatsViewModel\n        };\n    }\n\n    parcatsViewModel.paths = pathViewModels;\n\n // * @property key\n // *  Unique key for this model\n // * @property {PathModel} model\n // *  Source path model\n // * @property {Number} height\n // *  Height of this path (pixels)\n // * @property {String} svgD\n // *  SVG path \"d\" attribute string\n}\n\n/**\n * Update the dimension view models based on the dimension models in a ParcatsViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n */\nfunction updateDimensionViewModels(parcatsViewModel) {\n    // Compute dimension ordering\n    var dimensionsIndInfo = parcatsViewModel.model.dimensions.map(function(d) {\n        return {displayInd: d.displayInd, dimensionInd: d.dimensionInd};\n    });\n\n    dimensionsIndInfo.sort(function(a, b) {\n        return a.displayInd - b.displayInd;\n    });\n\n    var dimensions = [];\n    for(var displayInd in dimensionsIndInfo) {\n        var dimensionInd = dimensionsIndInfo[displayInd].dimensionInd;\n        var dimModel = parcatsViewModel.model.dimensions[dimensionInd];\n        dimensions.push(createDimensionViewModel(parcatsViewModel, dimModel));\n    }\n\n    parcatsViewModel.dimensions = dimensions;\n}\n\n/**\n * Create a parcats DimensionViewModel\n *\n * @param {ParcatsViewModel} parcatsViewModel\n *  View model for trace\n * @param {DimensionModel} dimensionModel\n * @return {DimensionViewModel}\n */\nfunction createDimensionViewModel(parcatsViewModel, dimensionModel) {\n    // Compute dimension x position\n    var categoryLabelPad = 40;\n    var dimWidth = 16;\n    var numDimensions = parcatsViewModel.model.dimensions.length;\n    var displayInd = dimensionModel.displayInd;\n\n    // Compute x coordinate values\n    var dimDx;\n    var dimX0;\n    var dimX;\n\n    if(numDimensions > 1) {\n        dimDx = (parcatsViewModel.width - 2 * categoryLabelPad - dimWidth) / (numDimensions - 1);\n    } else {\n        dimDx = 0;\n    }\n    dimX0 = categoryLabelPad;\n    dimX = dimX0 + dimDx * displayInd;\n\n    // Compute categories\n    var categories = [];\n    var maxCats = parcatsViewModel.model.maxCats;\n    var numCats = dimensionModel.categories.length;\n    var catSpacing = 8;\n    var totalCount = dimensionModel.count;\n    var totalHeight = parcatsViewModel.height - catSpacing * (maxCats - 1);\n    var nextCatHeight;\n    var nextCatModel;\n    var nextCat;\n    var catInd;\n    var catDisplayInd;\n\n    // Compute starting Y offset\n    var nextCatY = (maxCats - numCats) * catSpacing / 2.0;\n\n    // Compute category ordering\n    var categoryIndInfo = dimensionModel.categories.map(function(c) {\n        return {displayInd: c.displayInd, categoryInd: c.categoryInd};\n    });\n\n    categoryIndInfo.sort(function(a, b) {\n        return a.displayInd - b.displayInd;\n    });\n\n    for(catDisplayInd = 0; catDisplayInd < numCats; catDisplayInd++) {\n        catInd = categoryIndInfo[catDisplayInd].categoryInd;\n        nextCatModel = dimensionModel.categories[catInd];\n\n        if(totalCount > 0) {\n            nextCatHeight = (nextCatModel.count / totalCount) * totalHeight;\n        } else {\n            nextCatHeight = 0;\n        }\n\n        nextCat = {\n            key: nextCatModel.valueInds[0],\n            model: nextCatModel,\n            width: dimWidth,\n            height: nextCatHeight,\n            y: nextCatModel.dragY !== null ? nextCatModel.dragY : nextCatY,\n            bands: [],\n            parcatsViewModel: parcatsViewModel\n        };\n\n        nextCatY = nextCatY + nextCatHeight + catSpacing;\n        categories.push(nextCat);\n    }\n\n    return {\n        key: dimensionModel.dimensionInd,\n        x: dimensionModel.dragX !== null ? dimensionModel.dragX : dimX,\n        y: 0,\n        width: dimWidth,\n        model: dimensionModel,\n        categories: categories,\n        parcatsViewModel: parcatsViewModel,\n        dragCategoryDisplayInd: null,\n        dragDimensionDisplayInd: null,\n        initialDragDimensionDisplayInds: null,\n        initialDragCategoryDisplayInds: null,\n        dragHasMoved: null,\n        potentialClickBand: null\n    };\n}\n\n// JSDoc typedefs\n// ==============\n/**\n * @typedef {Object} Layout\n *  Object containing svg layout information\n *\n * @property {Number} width (pixels)\n *  Usable width for Figure (after margins are removed)\n * @property {Number} height (pixels)\n *  Usable height for Figure (after margins are removed)\n * @property {Margin} margin\n *  Margin around the Figure (pixels)\n */\n\n/**\n * @typedef {Object} Margin\n *  Object containing padding information in pixels\n *\n * @property {Number} t\n *  Top margin\n * @property {Number} r\n *  Right margin\n * @property {Number} b\n *  Bottom margin\n * @property {Number} l\n *  Left margin\n */\n\n/**\n * @typedef {Object} Font\n *  Object containing font information\n *\n * @property {Number} size: Font size\n * @property {String} color: Font color\n * @property {String} family: Font family\n */\n\n/**\n * @typedef {Object} ParcatsViewModel\n *  Object containing calculated parcats view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {ParcatsModel} model\n *  Source parcats model\n * @property {Array.<DimensionViewModel>} dimensions\n *  Array of dimension view models\n * @property {Number} width\n *  Width for this trace (pixels)\n * @property {Number} height\n *  Height for this trace (pixels)\n * @property {Number} x\n *  X position of this trace with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of this trace with respect to the Figure (pixels)\n * @property {String} hoveron\n *  Hover interaction mode. One of: 'category', 'color', or 'dimension'\n * @property {Array.<String>} hoverinfoItems\n *  Info to display on hover. Array with a combination of 'counts' and/or 'probabilities', or 'none', or 'skip'\n * @property {String} arrangement\n *  Category arrangement. One of: 'perpendicular', 'freeform', or 'fixed'\n * @property {Boolean} bundlecolors\n *  Whether paths should be sorted so that like colors are bundled together as they pass through categories\n * @property {String} sortpaths\n *  If 'forward' then sort paths based on dimensions from left to right. If 'backward' sort based on dimensions\n *  from right to left\n * @property {Font} labelfont\n *  Font for the dimension labels\n * @property {Font} categorylabelfont\n *  Font for the category labels\n * @property {String} pathShape\n *  The shape of the paths. Either 'linear' or 'hspline'.\n * @property {DimensionViewModel|null} dragDimension\n *  Dimension currently being dragged. Null if no drag in progress\n * @property {Margin} margin\n *  Margin around the Figure\n * @property {Object} graphDiv\n *  Top-level graph div element\n * @property {Object} traceSelection\n *  D3 selection of this view models trace group element\n * @property {Object} pathSelection\n *  D3 selection of this view models path elements\n * @property {Object} dimensionSelection\n *  D3 selection of this view models dimension group element\n */\n\n/**\n * @typedef {Object} DimensionViewModel\n *  Object containing calculated parcats dimension view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {DimensionModel} model\n *  Source dimension model\n * @property {Number} x\n *  X position of the center of this dimension with respect to the Figure (pixels)\n * @property {Number} y\n *  Y position of the top of this dimension with respect to the Figure (pixels)\n * @property {Number} width\n *  Width of categories in this dimension (pixels)\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n * @property {Array.<CategoryViewModel>} categories\n *  Dimensions category view models\n * @property {Number|null} dragCategoryDisplayInd\n *  Display index of category currently being dragged. null if no category is being dragged\n * @property {Number|null} dragDimensionDisplayInd\n *  Display index of the dimension being dragged. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragDimensionDisplayInds\n *  Dimensions display indexes at the beginning of the current drag. null if no dimension is being dragged\n * @property {Array.<Number>|null} initialDragCategoryDisplayInds\n *  Category display indexes for the at the beginning of the current drag. null if no category is being dragged\n * @property {HTMLElement} potentialClickBand\n *  Band under mouse when current drag began. If no drag movement takes place then a click will be emitted for this\n *  band. Null if not drag in progress.\n * @property {Boolean} dragHasMoved\n *  True if there is an active drag and the drag has moved. If drag doesn't move before being ended then\n *  this may be interpreted as a click. Null if no drag in progress\n */\n\n/**\n * @typedef {Object} CategoryViewModel\n *  Object containing calculated parcats category view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {CategoryModel} model\n *  Source category model\n * @property {Number} width\n *  Width for this category (pixels)\n * @property {Number} height\n *  Height for this category (pixels)\n * @property {Number} y\n *  Y position of this cateogry with respect to the Figure (pixels)\n * @property {Array.<CategoryBandViewModel>} bands\n *  Array of color bands inside the category\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} CategoryBandViewModel\n *  Object containing calculated category band information. A category band is a region inside a category covering\n *  paths of a single color\n *\n * @property key\n *  Unique key for this model\n * @property color\n *  Band color\n * @property rawColor\n *  Raw color value for band\n * @property {Number} width\n *  Band width\n * @property {Number} height\n *  Band height\n * @property {Number} y\n *  Y position of top of the band with respect to the category\n * @property {Number} count\n *  The number of samples represented by the band\n * @property {CategoryViewModel} categoryViewModel\n *  The parent categorie's view model\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n\n/**\n * @typedef {Object} PathViewModel\n *  Object containing calculated parcats path view information\n *\n *  These are quantities that require Layout information to calculate\n * @property key\n *  Unique key for this model\n * @property {PathModel} model\n *  Source path model\n * @property {Number} height\n *  Height of this path (pixels)\n * @property {Array.<Number>} leftXs\n *  The x position of the left edge of each display dimension\n * @property {Array.<Number>} topYs\n *  The y position of the top of the path for each display dimension\n * @property {Array.<Number>} dimWidths\n *  The width of each display dimension\n * @property {String} svgD\n *  SVG path \"d\" attribute string\n * @property {ParcatsViewModel} parcatsViewModel\n *  The parent trace's view model\n */\n"],"mappings":"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frS,MAAM,EAAE6S,aAAa;MACrBvU,CAAC,EAAEwU,YAAY,CAACvH,KAAK,KAAK,IAAI,GAAGuH,YAAY,CAACvH,KAAK,GAAGyH,QAAQ;MAC9D5S,KAAK,EAAE,EAAE;MACTK,gBAAgB,EAAEA;IACtB,CAAC;IAEDuS,QAAQ,GAAGA,QAAQ,GAAGH,aAAa,GAAGD,UAAU;IAChD/S,UAAU,CAACqF,IAAI,CAAC6N,OAAO,CAAC;EAC5B;EAEA,OAAO;IACH7U,GAAG,EAAEqL,cAAc,CAAC/H,YAAY;IAChCnD,CAAC,EAAEkL,cAAc,CAAC4C,KAAK,KAAK,IAAI,GAAG5C,cAAc,CAAC4C,KAAK,GAAGsG,IAAI;IAC9DnU,CAAC,EAAE,CAAC;IACJyB,KAAK,EAAEsS,QAAQ;IACf1T,KAAK,EAAE4K,cAAc;IACrB1J,UAAU,EAAEA,UAAU;IACtBY,gBAAgB,EAAEA,gBAAgB;IAClCyK,sBAAsB,EAAE,IAAI;IAC5BH,uBAAuB,EAAE,IAAI;IAC7BC,+BAA+B,EAAE,IAAI;IACrCK,8BAA8B,EAAE,IAAI;IACpCJ,YAAY,EAAE,IAAI;IAClBO,kBAAkB,EAAE;EACxB,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}