{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\n//import { TextureLoader } from 'three/examples/jsm/loaders/TextureLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\nimport texturePath from '@/public/skullbottom.jpg';\nimport modelPath from '@/public/skullbottom.ply';\nexport default {\n  name: 'ThreejsPlyTexture',\n  mounted() {\n    this.init();\n  },\n  methods: {\n    init() {\n      const container = this.$refs.container;\n\n      // Create scene\n      const scene = new THREE.Scene();\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n      camera.position.set(0, 0, 5);\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(container.clientWidth, container.clientHeight);\n      container.appendChild(renderer.domElement);\n\n      // Add orbit controls\n      const controls = new OrbitControls(camera, renderer.domElement);\n\n      // Load PLY model\n      const loader = new PLYLoader();\n      loader.load(modelPath, geometry => {\n        // Load texture\n        const textureLoader = new TextureLoader();\n        textureLoader.load(texturePath, texture => {\n          const material = new THREE.MeshBasicMaterial({\n            map: texture\n          });\n          const mesh = new THREE.Mesh(geometry, material);\n          scene.add(mesh);\n        });\n      });\n\n      // Animation loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        renderer.render(scene, camera);\n      };\n      animate();\n    }\n  }\n};","map":{"version":3,"names":["THREE","OrbitControls","PLYLoader","texturePath","modelPath","name","mounted","init","methods","container","$refs","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","renderer","WebGLRenderer","setSize","appendChild","domElement","controls","loader","load","geometry","textureLoader","TextureLoader","texture","material","MeshBasicMaterial","map","mesh","Mesh","add","animate","requestAnimationFrame","update","render"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"threeContainer\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\n//import { TextureLoader } from 'three/examples/jsm/loaders/TextureLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\nimport texturePath from '@/public/skullbottom.jpg';\nimport modelPath from '@/public/skullbottom.ply';\n\nexport default {\n  name: 'ThreejsPlyTexture',\n  mounted() {\n    this.init();\n  },\n  methods: {\n    init() {\n      const container = this.$refs.container;\n\n      // Create scene\n      const scene = new THREE.Scene();\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n      camera.position.set(0, 0, 5);\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(container.clientWidth, container.clientHeight);\n      container.appendChild(renderer.domElement);\n\n      // Add orbit controls\n      const controls = new OrbitControls(camera, renderer.domElement);\n\n      // Load PLY model\n      const loader = new PLYLoader();\n      loader.load(modelPath, (geometry) => {\n        // Load texture\n        const textureLoader = new TextureLoader();\n        textureLoader.load(texturePath, (texture) => {\n          const material = new THREE.MeshBasicMaterial({ map: texture });\n          const mesh = new THREE.Mesh(geometry, material);\n          scene.add(mesh);\n        });\n      });\n\n      // Animation loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        renderer.render(scene, camera);\n      };\n      animate();\n    },\n  },\n};\n</script>\n\n<style scoped>\n  div {\n    width: 100%;\n    height: 100vh;\n  }\n</style>"],"mappings":"AAKA,OAAO,KAAKA,KAAI,MAAO,OAAO;AAC9B,SAASC,aAAY,QAAS,8CAA8C;AAC5E,SAASC,SAAQ,QAAS,yCAAyC;AACnE;AACA;;AAEA,OAAOC,WAAU,MAAO,0BAA0B;AAClD,OAAOC,SAAQ,MAAO,0BAA0B;AAEhD,eAAe;EACbC,IAAI,EAAE,mBAAmB;EACzBC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,IAAI,CAAC,CAAC;EACb,CAAC;EACDC,OAAO,EAAE;IACPD,IAAIA,CAAA,EAAG;MACL,MAAME,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACD,SAAS;;MAEtC;MACA,MAAME,KAAI,GAAI,IAAIX,KAAK,CAACY,KAAK,CAAC,CAAC;;MAE/B;MACA,MAAMC,MAAK,GAAI,IAAIb,KAAK,CAACc,iBAAiB,CAAC,EAAE,EAAEL,SAAS,CAACM,WAAU,GAAIN,SAAS,CAACO,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC;MACzGH,MAAM,CAACI,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;MAE5B;MACA,MAAMC,QAAO,GAAI,IAAInB,KAAK,CAACoB,aAAa,CAAC,CAAC;MAC1CD,QAAQ,CAACE,OAAO,CAACZ,SAAS,CAACM,WAAW,EAAEN,SAAS,CAACO,YAAY,CAAC;MAC/DP,SAAS,CAACa,WAAW,CAACH,QAAQ,CAACI,UAAU,CAAC;;MAE1C;MACA,MAAMC,QAAO,GAAI,IAAIvB,aAAa,CAACY,MAAM,EAAEM,QAAQ,CAACI,UAAU,CAAC;;MAE/D;MACA,MAAME,MAAK,GAAI,IAAIvB,SAAS,CAAC,CAAC;MAC9BuB,MAAM,CAACC,IAAI,CAACtB,SAAS,EAAGuB,QAAQ,IAAK;QACnC;QACA,MAAMC,aAAY,GAAI,IAAIC,aAAa,CAAC,CAAC;QACzCD,aAAa,CAACF,IAAI,CAACvB,WAAW,EAAG2B,OAAO,IAAK;UAC3C,MAAMC,QAAO,GAAI,IAAI/B,KAAK,CAACgC,iBAAiB,CAAC;YAAEC,GAAG,EAAEH;UAAQ,CAAC,CAAC;UAC9D,MAAMI,IAAG,GAAI,IAAIlC,KAAK,CAACmC,IAAI,CAACR,QAAQ,EAAEI,QAAQ,CAAC;UAC/CpB,KAAK,CAACyB,GAAG,CAACF,IAAI,CAAC;QACjB,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,MAAMG,OAAM,GAAIA,CAAA,KAAM;QACpBC,qBAAqB,CAACD,OAAO,CAAC;QAC9Bb,QAAQ,CAACe,MAAM,CAAC,CAAC;QACjBpB,QAAQ,CAACqB,MAAM,CAAC7B,KAAK,EAAEE,MAAM,CAAC;MAChC,CAAC;MACDwB,OAAO,CAAC,CAAC;IACX;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}