{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"container\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n// import tortobj from '../../public/assets/tort8141.obj';\n// import torttext from '../../public/assets/tort8141.mtl';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\n\nexport default {\n  name: 'ObjViewer',\n  mounted() {\n    this.initThreeJS();\n  },\n  methods: {\n    initThreeJS() {\n      // Set up the scene\n      const scene = new THREE.Scene();\n\n      // Set up the camera\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      camera.position.z = 5;\n\n      // Set up the renderer\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      this.$refs.sceneContainer.appendChild(renderer.domElement);\n\n      // Set up lighting\n      const ambientLight = new THREE.AmbientLight(0x404040); // soft white light\n      scene.add(ambientLight);\n\n      const pointLight = new THREE.PointLight(0xffffff, 1, 100);\n      pointLight.position.set(10, 10, 10);\n      scene.add(pointLight);\n\n      // Load the .mtl file and then the .obj file\n      const mtlLoader = new MTLLoader();\n      mtlLoader.load(torttext, (materials) => {\n        materials.preload();\n\n        const objLoader = new OBJLoader();\n        objLoader.setMaterials(materials);\n        objLoader.load(\n          '../../public/assets/tort8141.obj',\n          (object) => {\n            scene.add(object);\n          },\n          (xhr) => {\n            console.log((xhr.loaded / xhr.total) * 100 + '% loaded');\n          },\n          (error) => {\n            console.error('An error happened', error);\n          }\n        );\n      });\n\n      // Animation loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n\n        // Rotate the object (optional)\n        // object.rotation.x += 0.01;\n        // object.rotation.y += 0.01;\n\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      // Handle window resize\n      window.addEventListener('resize', () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n    },\n  },\n};\n</script>\n\n<style>\n  #container {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n</style>"],"mappings":";;EACOA,GAAG,EAAC;AAAW;;uBAApBC,mBAAA,CAA2B,OAA3BC,UAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}