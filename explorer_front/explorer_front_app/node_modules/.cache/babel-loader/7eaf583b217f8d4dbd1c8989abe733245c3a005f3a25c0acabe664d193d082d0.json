{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-541da24a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"threeContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"threeContainer\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\nimport texturePath from '../assets/skullbottom.jpg';\nimport modelPath from './assets/skullbottom.ply';\n\n\nexport default {\n  name: 'ThreeJSRenderer',\n  mounted() {\n    this.initThree();\n  },\n  methods: {\n    initThree() {\n      const container = this.$refs.threeContainer;\n      if (container) {\n        this.scene = new THREE.Scene();\n\n        this.camera = new THREE.PerspectiveCamera(\n          75,\n          container.clientWidth / container.clientHeight,\n          0.1,\n          1000\n        );\n        this.camera.position.z = 5;\n\n         this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(container.clientWidth, container.clientHeight);\n        container.appendChild(this.renderer.domElement);\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        this.scene.add(ambientLight);\n\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(0, 1, 1).normalize();\n        this.scene.add(directionalLight);\n\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n        // Load the PLY file\n        const plyLoader = new PLYLoader();\n        plyLoader.load(modelPath, (geometry) => {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(texturePath, (texture) => {\n            const material = new THREE.MeshBasicMaterial({ map: texture });\n            const mesh = new THREE.Mesh(geometry, material);\n            this.scene.add(mesh);\n          });\n        });\n\n        this.animate = this.animate.bind(this); // Bind the animate function to the component instance\n        this.animate();\n      } else {\n        console.error('Three.js container not found');\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n\n      if (this.controls) {\n        this.controls.update();\n      }\n\n      this.renderer.render(this.scene, this.camera);\n    },\n  },\n};\n</script>\n\n<style scoped>\ndiv {\n  width: 100%;\n  height: 100vh;\n}\n</style>"],"mappings":";;;EACOA,GAAG,EAAC;AAAgB;;uBAAzBC,mBAAA,CAAgC,OAAhCC,UAAgC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}