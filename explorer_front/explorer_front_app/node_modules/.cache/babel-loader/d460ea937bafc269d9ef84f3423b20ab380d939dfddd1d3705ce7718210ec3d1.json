{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport * as THREE from 'three';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nexport default {\n  __name: 'ThreeJSRenderer',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const container = ref(null);\n    onMounted(() => {\n      if (!container.value) {\n        console.error('Container element not found');\n        return;\n      }\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.value.appendChild(renderer.domElement);\n      const plyLoader = new PLYLoader();\n      //plyLoader.load('/assets/skullbottom.ply', (geometry) => {\n      plyLoader.load('/assets/Fish.ply', geometry => {\n        const textureLoader = new TextureLoader();\n        //textureLoader.load('/assets/skullbottom.jpg', (texture) => {\n        textureLoader.load('/assets/Fish_0.jpg', texture => {\n          const material = new THREE.MeshBasicMaterial({\n            map: texture\n          });\n          const mesh = new THREE.Mesh(geometry, material);\n          scene.add(mesh);\n          camera.position.z = 5;\n          const controls = new OrbitControls(camera, renderer.domElement);\n          controls.enableDamping = true;\n          controls.dampingFactor = 0.25;\n          controls.enableZoom = true;\n          const animate = () => {\n            requestAnimationFrame(animate);\n            controls.update();\n            mesh.rotation.y += 0.01;\n            renderer.render(scene, camera);\n          };\n          animate();\n        });\n      });\n      window.addEventListener('resize', () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n      return () => {\n        window.removeEventListener('resize', () => {\n          camera.aspect = window.innerWidth / window.innerHeight;\n          camera.updateProjectionMatrix();\n          renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n      };\n    });\n    const __returned__ = {\n      container,\n      ref,\n      onMounted,\n      get THREE() {\n        return THREE;\n      },\n      get PLYLoader() {\n        return PLYLoader;\n      },\n      get TextureLoader() {\n        return TextureLoader;\n      },\n      get OrbitControls() {\n        return OrbitControls;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","THREE","PLYLoader","TextureLoader","OrbitControls","container","value","console","error","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","appendChild","domElement","plyLoader","load","geometry","textureLoader","texture","material","MeshBasicMaterial","map","mesh","Mesh","add","position","z","controls","enableDamping","dampingFactor","enableZoom","animate","requestAnimationFrame","update","rotation","y","render","addEventListener","aspect","updateProjectionMatrix","removeEventListener"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"container\"></div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport * as THREE from 'three';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst container = ref(null);\n\nonMounted(() => {\n  if (!container.value) {\n    console.error('Container element not found');\n    return;\n  }\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.value.appendChild(renderer.domElement);\n\n  const plyLoader = new PLYLoader();\n  //plyLoader.load('/assets/skullbottom.ply', (geometry) => {\n  plyLoader.load('/assets/Fish.ply', (geometry) => {\n    const textureLoader = new TextureLoader();\n    //textureLoader.load('/assets/skullbottom.jpg', (texture) => {\n    textureLoader.load('/assets/Fish_0.jpg', (texture) => {\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n\n      camera.position.z = 5;\n\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.25;\n      controls.enableZoom = true;\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        mesh.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n      animate();\n    });\n  });\n\n  window.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  });\n\n  return () => {\n    window.removeEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n});\n</script>\n\n<style>\n  #container {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}