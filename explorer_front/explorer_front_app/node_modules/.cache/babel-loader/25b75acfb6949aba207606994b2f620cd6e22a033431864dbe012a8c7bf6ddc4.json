{"ast":null,"code":"import { onMounted, ref } from 'vue';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\nexport default {\n  setup() {\n    const container = ref(null);\n    onMounted(() => {\n      if (!container.value) {\n        console.error('Container element not found');\n        return;\n      }\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.value.appendChild(renderer.domElement);\n      const plyLoader = new PLYLoader();\n      plyLoader.load('../../public/assets/skullbottom.ply', geometry => {\n        const textureLoader = new TextureLoader();\n        textureLoader.load('../../public/assets/skullbottom.jpg', texture => {\n          const material = new THREE.MeshBasicMaterial({\n            map: texture\n          });\n          const mesh = new THREE.Mesh(geometry, material);\n          scene.add(mesh);\n          camera.position.z = 5;\n          const controls = new OrbitControls(camera, renderer.domElement);\n          controls.enableDamping = true;\n          controls.dampingFactor = 0.25;\n          controls.enableZoom = true;\n          const animate = () => {\n            requestAnimationFrame(animate);\n            mesh.rotation.y += 0.01;\n            renderer.render(scene, camera);\n          };\n          animate();\n        });\n      });\n      window.addEventListener('resize', () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n      return () => {\n        window.removeEventListener('resize', () => {\n          camera.aspect = window.innerWidth / window.innerHeight;\n          camera.updateProjectionMatrix();\n          renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n      };\n    });\n    return {\n      container\n    };\n  }\n};","map":{"version":3,"names":["onMounted","ref","THREE","OrbitControls","PLYLoader","TextureLoader","setup","container","value","console","error","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","appendChild","domElement","plyLoader","load","geometry","textureLoader","texture","material","MeshBasicMaterial","map","mesh","Mesh","add","position","z","controls","enableDamping","dampingFactor","enableZoom","animate","requestAnimationFrame","rotation","y","render","addEventListener","aspect","updateProjectionMatrix","removeEventListener"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"container\"></div>\n</template>\n\n<script>\nimport { onMounted, ref} from 'vue';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\n\nexport default {\n  setup() {\n    const container = ref(null);\n\n    onMounted(() => {\n      if (!container.value) {\n        console.error('Container element not found');\n        return;\n      }\n\n      const scene = new THREE.Scene();\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.value.appendChild(renderer.domElement);\n\n      const plyLoader = new PLYLoader();\n      plyLoader.load('../../public/assets/skullbottom.ply', (geometry) => {\n        const textureLoader = new TextureLoader();\n        textureLoader.load('../../public/assets/skullbottom.jpg', (texture) => {\n          const material = new THREE.MeshBasicMaterial({ map: texture });\n          const mesh = new THREE.Mesh(geometry, material);\n          scene.add(mesh);\n\n          camera.position.z = 5;\n\n           const controls = new OrbitControls(camera, renderer.domElement);\n           controls.enableDamping = true;\n           controls.dampingFactor = 0.25;\n           controls.enableZoom = true;\n\n          const animate = () => {\n            requestAnimationFrame(animate);\n            mesh.rotation.y += 0.01;\n            renderer.render(scene, camera);\n          };\n          animate();\n        });\n      });\n\n      window.addEventListener('resize', () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n\n      return () => {\n        window.removeEventListener('resize', () => {\n          camera.aspect = window.innerWidth / window.innerHeight;\n          camera.updateProjectionMatrix();\n          renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n      };\n    });\n\n    return {\n      container,\n    };\n  },\n};\n</script>\n\n<style>\n  #container {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}