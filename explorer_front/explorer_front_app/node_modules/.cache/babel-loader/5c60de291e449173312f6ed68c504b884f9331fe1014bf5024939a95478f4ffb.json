{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport * as THREE from 'three';\nimport image from '../../public/assets/skullbottom.jpg';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nexport default {\n  __name: 'ThreeJSRenderer',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const container = ref(null);\n    onMounted(() => {\n      if (!container.value) {\n        console.error('Container element not found');\n        return;\n      }\n      const scene = new THREE.Scene();\n      // const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);\n      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      //camera.position.set(200, .15, 3);\n      camera.position.z = 5;\n      //camera.updateProjectionMatrix();\n\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      container.value.appendChild(renderer.domElement);\n      const ambientLight = new THREE.AmbientLight(0xffffff, 1);\n      scene.add(ambientLight);\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.25;\n      controls.enableZoom = true;\n      // console.log(image);\n\n      const textureLoader = new TextureLoader();\n      const texture = textureLoader.load(image, texture => {\n        console.log(texture);\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat.set(1, 1);\n      });\n      const plyLoader = new PLYLoader();\n      plyLoader.load('/assets/skullbottom.ply', geometry => {\n        //console.log(plyLoader);\n        //textureLoader.load('/assets/skullbottom.jpg', (texture) => {\n        geometry.computeVertexNormals();\n        const material = new THREE.MeshPhysicalMaterial({\n          map: texture\n        });\n        const mesh = new THREE.Mesh(geometry, material);\n        scene.add(mesh);\n        camera.position.z = 5;\n        const animate = () => {\n          requestAnimationFrame(animate);\n          controls.update();\n          //mesh.rotation.y += 0.01;\n          renderer.render(scene, camera);\n        };\n        //console.log(texture)\n        animate();\n      });\n      window.addEventListener('resize', () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n      return () => {\n        window.removeEventListener('resize', () => {\n          camera.aspect = window.innerWidth / window.innerHeight;\n          camera.updateProjectionMatrix();\n          renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n      };\n    });\n    const __returned__ = {\n      container,\n      ref,\n      onMounted,\n      get THREE() {\n        return THREE;\n      },\n      get image() {\n        return image;\n      },\n      get PLYLoader() {\n        return PLYLoader;\n      },\n      get TextureLoader() {\n        return TextureLoader;\n      },\n      get OrbitControls() {\n        return OrbitControls;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","THREE","image","PLYLoader","TextureLoader","OrbitControls","container","value","console","error","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","ambientLight","AmbientLight","add","controls","enableDamping","dampingFactor","enableZoom","textureLoader","texture","load","log","wrapS","wrapT","RepeatWrapping","repeat","set","plyLoader","geometry","computeVertexNormals","material","MeshPhysicalMaterial","map","mesh","Mesh","animate","requestAnimationFrame","update","render","addEventListener","aspect","updateProjectionMatrix","removeEventListener"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"container\"></div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport * as THREE from 'three';\nimport image from '../../public/assets/skullbottom.jpg';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst container = ref(null);\n\nonMounted(() => {\n  if (!container.value) {\n    console.error('Container element not found');\n    return;\n  }\n\n  const scene = new THREE.Scene();\n  // const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1000);\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n  //camera.position.set(200, .15, 3);\n  camera.position.z = 5;\n  //camera.updateProjectionMatrix();\n \n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.value.appendChild(renderer.domElement);\n\n  const ambientLight = new THREE.AmbientLight(0xffffff, 1);\n  scene.add(ambientLight);\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.enableDamping = true;\n  controls.dampingFactor = 0.25;\n  controls.enableZoom = true;\n  // console.log(image);\n\n  const textureLoader = new TextureLoader();\n  const texture = textureLoader.load(image, (texture) => { \n      console.log(texture); \n      texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n      texture.repeat.set(1,1);\n  });\n\n  const plyLoader = new PLYLoader();\n  plyLoader.load('/assets/skullbottom.ply', (geometry) => {\n    //console.log(plyLoader);\n    //textureLoader.load('/assets/skullbottom.jpg', (texture) => {\n    geometry.computeVertexNormals();\n\n    const material = new THREE.MeshPhysicalMaterial({ map: texture });\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n\n    camera.position.z = 5;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      //mesh.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    };\n      //console.log(texture)\n    animate();\n  });\n\n  window.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  });\n\n  return () => {\n    window.removeEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n});\n</script>\n\n<style>\n  #container {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}