{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-541da24a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  ref: \"threeContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"threeContainer\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\n//import { TextureLoader } from 'three/examples/jsm/loaders/TextureLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\nimport texturePath from '../public/skullbottom.jpg';\nimport modelPath from '../public/skullbottom.ply';\n\nexport default {\n  name: 'ThreejsPlyTexture',\n  mounted() {\n    this.init();\n  },\n  methods: {\n    init() {\n      const container = this.$refs.container;\n\n      // Create scene\n      const scene = new THREE.Scene();\n\n      // Create camera\n      const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n      camera.position.set(0, 0, 5);\n\n      // Create renderer\n      const renderer = new THREE.WebGLRenderer();\n      renderer.setSize(container.clientWidth, container.clientHeight);\n      container.appendChild(renderer.domElement);\n\n      // Add orbit controls\n      const controls = new OrbitControls(camera, renderer.domElement);\n\n      // Load PLY model\n      const loader = new PLYLoader();\n      loader.load(modelPath, (geometry) => {\n        // Load texture\n        const textureLoader = new TextureLoader();\n        textureLoader.load(texturePath, (texture) => {\n          const material = new THREE.MeshBasicMaterial({ map: texture });\n          const mesh = new THREE.Mesh(geometry, material);\n          scene.add(mesh);\n        });\n      });\n\n      // Animation loop\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        renderer.render(scene, camera);\n      };\n      animate();\n    },\n  },\n};\n</script>\n\n<style scoped>\n  div {\n    width: 100%;\n    height: 100vh;\n  }\n</style>"],"mappings":";;;EACOA,GAAG,EAAC;AAAgB;;uBAAzBC,mBAAA,CAAgC,OAAhCC,UAAgC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}