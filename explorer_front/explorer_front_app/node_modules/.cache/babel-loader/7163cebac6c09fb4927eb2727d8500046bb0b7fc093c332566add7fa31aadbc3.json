{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-0f7e9296\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Collections Dashboard\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"stacked-bar-chart\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_1, _hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [..._hoisted_3]);\n}","map":{"version":3,"names":["_createElementVNode","id","_hoisted_1","_hoisted_2","_createElementBlock","_hoisted_3"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/explorerDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Collections Dashboard</h1>\n    <div id=\"stacked-bar-chart\"></div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Plotly from 'plotly.js/lib/core';\n\nexport default {\n  data() {\n    return {\n      totalCollections: 0\n    };\n  },\n  mounted() {\n    axios.get('http://0.0.0.0:8000/collection/')\n      .then(response => {\n        // Assuming your API response contains a 'count' field for total collections\n        this.collectionsData = response.data;\n        console.log(this.collectionsData)\n        console.log(this.collectionsData.Date)\n\n        this.createBarChart();\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  },\n  methods: {\n    createBarChart(){\n      //const xValues = this.collectionsData.map(item => item.Date); // Assuming date is a property in your data\n      //const yValues = this.collectionsData.map(item => item.Collections); // Assuming count is a property in your data\n      // const xValues = this.collectionsData.Date;\n      // const yValues = this.collectionsData.Collections;\n      // const trace = {\n      //   x: xValues,\n      //   y: yValues,\n      //   mode: 'lines+markers',\n      //   type: 'scatter',\n      //   name: 'Collections over Time'\n      // };\n\n      // const layout = {\n      //   title: 'Collections Over Time (stacked by year)',\n      //   xaxis: { title: 'Date' },\n      //   yaxis: { title: 'Number of Collections' }\n      // };\n\n      const aggregatedAmounts = {};\n\n      for (const date in collectionsData){\n        const year = date.substring(0,4);\n        if(!aggregatedAmounts[year]){\n          aggregatedAmounts[year] = collectionsData[date];\n        } else{\n          aggregatedAmounts[year] += collectionsData[date];\n        }\n\n        const xValues = Object.keys(aggregatedAmounts);\n        const yValues = Object.values(aggregatedAmounts);\n\n        const data = [{\n          x: xValues,\n          y: yValues,\n          type: 'bar'\n        }];\n\n      }\n\n      Plotly.newPlot('bar-chart', [trace], layout);\n    }\n  }\n};\n</script>\n\n\n\n<style scoped>\n/* Add any custom styles here */\n</style>\n"],"mappings":";;gEAEIA,mBAAA,CAA8B,YAA1B,uBAAqB;gEACzBA,mBAAA,CAAkC;EAA7BC,EAAE,EAAC;AAAmB;oBAD3BC,UAA8B,EAC9BC,UAAkC,C;;uBAFpCC,mBAAA,CAGM,aAJR,IAAAC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}