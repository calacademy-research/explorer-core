{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar d3 = require('@plotly/d3');\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Plots = require('../plots');\nvar Drawing = require('../../components/drawing');\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\nvar axisIds = require('./axis_ids');\nvar constants = require('./constants');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar ensureSingle = Lib.ensureSingle;\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n  return Lib.ensureSingle(parent, nodeType, className, function (s) {\n    s.datum(className);\n  });\n}\nexports.name = 'cartesian';\nexports.attr = ['xaxis', 'yaxis'];\nexports.idRoot = ['x', 'y'];\nexports.idRegex = constants.idRegex;\nexports.attrRegex = constants.attrRegex;\nexports.attributes = require('./attributes');\nexports.layoutAttributes = require('./layout_attributes');\nexports.supplyLayoutDefaults = require('./layout_defaults');\nexports.transitionAxes = require('./transition_axes');\nexports.finalizeSubplots = function (layoutIn, layoutOut) {\n  var subplots = layoutOut._subplots;\n  var xList = subplots.xaxis;\n  var yList = subplots.yaxis;\n  var spSVG = subplots.cartesian;\n  var spAll = spSVG.concat(subplots.gl2d || []);\n  var allX = {};\n  var allY = {};\n  var i, xi, yi;\n  for (i = 0; i < spAll.length; i++) {\n    var parts = spAll[i].split('y');\n    allX[parts[0]] = 1;\n    allY['y' + parts[1]] = 1;\n  }\n\n  // check for x axes with no subplot, and make one from the anchor of that x axis\n  for (i = 0; i < xList.length; i++) {\n    xi = xList[i];\n    if (!allX[xi]) {\n      yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n      if (!constants.idRegex.y.test(yi)) yi = 'y';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n      if (!allY[yi]) {\n        allY[yi] = 1;\n        Lib.pushUnique(yList, yi);\n      }\n    }\n  }\n\n  // same for y axes with no subplot\n  for (i = 0; i < yList.length; i++) {\n    yi = yList[i];\n    if (!allY[yi]) {\n      xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n      if (!constants.idRegex.x.test(xi)) xi = 'x';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n      if (!allX[xi]) {\n        allX[xi] = 1;\n        Lib.pushUnique(xList, xi);\n      }\n    }\n  }\n\n  // finally, if we've gotten here we're supposed to show cartesian...\n  // so if there are NO subplots at all, make one from the first\n  // x & y axes in the input layout\n  if (!spAll.length) {\n    xi = '';\n    yi = '';\n    for (var ki in layoutIn) {\n      if (constants.attrRegex.test(ki)) {\n        var axLetter = ki.charAt(0);\n        if (axLetter === 'x') {\n          if (!xi || +ki.substr(5) < +xi.substr(5)) {\n            xi = ki;\n          }\n        } else if (!yi || +ki.substr(5) < +yi.substr(5)) {\n          yi = ki;\n        }\n      }\n    }\n    xi = xi ? axisIds.name2id(xi) : 'x';\n    yi = yi ? axisIds.name2id(yi) : 'y';\n    xList.push(xi);\n    yList.push(yi);\n    spSVG.push(xi + yi);\n  }\n};\n\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array (optional)} traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\nexports.plot = function (gd, traces, transitionOpts, makeOnCompleteCallback) {\n  var fullLayout = gd._fullLayout;\n  var subplots = fullLayout._subplots.cartesian;\n  var calcdata = gd.calcdata;\n  var i;\n\n  // Traces is a list of trace indices to (re)plot. If it's not provided,\n  // then it's a complete replot so we create a new list and add all trace indices\n  // which are in calcdata.\n\n  if (!Array.isArray(traces)) {\n    // If traces is not provided, then it's a complete replot and missing\n    // traces are removed\n    traces = [];\n    for (i = 0; i < calcdata.length; i++) traces.push(i);\n  }\n\n  // For each subplot\n  for (i = 0; i < subplots.length; i++) {\n    var subplot = subplots[i];\n    var subplotInfo = fullLayout._plots[subplot];\n\n    // Get all calcdata (traces) for this subplot:\n    var cdSubplot = [];\n    var pcd;\n\n    // For each trace\n    for (var j = 0; j < calcdata.length; j++) {\n      var cd = calcdata[j];\n      var trace = cd[0].trace;\n\n      // Skip trace if whitelist provided and it's not whitelisted:\n      // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n      if (trace.xaxis + trace.yaxis === subplot) {\n        // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n        // axis has actually changed:\n        //\n        // If this trace is specifically requested, add it to the list:\n        if (traces.indexOf(trace.index) !== -1 || trace.carpet) {\n          // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n          // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n          // is outdated. So this retroactively adds the previous trace if the\n          // traces are interdependent.\n          if (pcd && pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot && ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 && cdSubplot.indexOf(pcd) === -1) {\n            cdSubplot.push(pcd);\n          }\n          cdSubplot.push(cd);\n        }\n\n        // Track the previous trace on this subplot for the retroactive-add step\n        // above:\n        pcd = cd;\n      }\n    }\n    // Plot the traces for this subplot\n    plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n  }\n};\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n  var traceLayerClasses = constants.traceLayerClasses;\n  var fullLayout = gd._fullLayout;\n  var modules = fullLayout._modules;\n  var _module, cdModuleAndOthers, cdModule;\n\n  // Separate traces by zorder and plot each zorder group separately\n  // TODO: Performance\n  var traceZorderGroups = {};\n  for (var t = 0; t < cdSubplot.length; t++) {\n    var trace = cdSubplot[t][0].trace;\n    var zi = trace.zorder || 0;\n    if (!traceZorderGroups[zi]) traceZorderGroups[zi] = [];\n    traceZorderGroups[zi].push(cdSubplot[t]);\n  }\n  var layerData = [];\n  var zoomScaleQueryParts = [];\n\n  // Plot each zorder group in ascending order\n  var zindices = Object.keys(traceZorderGroups).map(Number).sort(Lib.sorterAsc);\n  for (var z = 0; z < zindices.length; z++) {\n    var zorder = zindices[z];\n    // For each \"module\" (trace type)\n    for (var i = 0; i < modules.length; i++) {\n      _module = modules[i];\n      var name = _module.name;\n      var categories = Registry.modules[name].categories;\n      if (categories.svg) {\n        var classBaseName = _module.layerName || name + 'layer';\n        var className = classBaseName + (z ? Number(z) + 1 : '');\n        var plotMethod = _module.plot;\n\n        // plot all visible traces of this type on this subplot at once\n        cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod, zorder);\n        cdModule = cdModuleAndOthers[0];\n        // don't need to search the found traces again - in fact we need to NOT\n        // so that if two modules share the same plotter we don't double-plot\n        cdSubplot = cdModuleAndOthers[1];\n        if (cdModule.length) {\n          layerData.push({\n            i: traceLayerClasses.indexOf(classBaseName),\n            zorder: z,\n            className: className,\n            plotMethod: plotMethod,\n            cdModule: cdModule\n          });\n        }\n        if (categories.zoomScale) {\n          zoomScaleQueryParts.push('.' + className);\n        }\n      }\n    }\n  }\n  // Sort the layers primarily by z, then by i\n  layerData.sort(function (a, b) {\n    return (a.zorder || 0) - (b.zorder || 0) || a.i - b.i;\n  });\n  var layers = plotinfo.plot.selectAll('g.mlayer').data(layerData, function (d) {\n    return d.className;\n  });\n  layers.enter().append('g').attr('class', function (d) {\n    return d.className;\n  }).classed('mlayer', true).classed('rangeplot', plotinfo.isRangePlot);\n  layers.exit().remove();\n  layers.order();\n  layers.each(function (d) {\n    var sel = d3.select(this);\n    var className = d.className;\n    d.plotMethod(gd, plotinfo, d.cdModule, sel, transitionOpts, makeOnCompleteCallback);\n\n    // layers that allow `cliponaxis: false`\n    if (constants.clipOnAxisFalseQuery.indexOf('.' + className) === -1) {\n      Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n    }\n  });\n\n  // call Scattergl.plot separately\n  if (fullLayout._has('scattergl')) {\n    _module = Registry.getModule('scattergl');\n    cdModule = getModuleCalcData(cdSubplot, _module)[0];\n    _module.plot(gd, plotinfo, cdModule);\n  }\n\n  // stash \"hot\" selections for faster interaction on drag and scroll\n  if (!gd._context.staticPlot) {\n    if (plotinfo._hasClipOnAxisFalse) {\n      plotinfo.clipOnAxisFalseTraces = plotinfo.plot.selectAll(constants.clipOnAxisFalseQuery.join(',')).selectAll('.trace');\n    }\n    if (zoomScaleQueryParts.length) {\n      var traces = plotinfo.plot.selectAll(zoomScaleQueryParts.join(',')).selectAll('.trace');\n      plotinfo.zoomScalePts = traces.selectAll('path.point');\n      plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n    }\n  }\n}\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldPlots = oldFullLayout._plots || {};\n  var newPlots = newFullLayout._plots || {};\n  var oldSubplotList = oldFullLayout._subplots || {};\n  var plotinfo;\n  var i, k;\n\n  // when going from a large splom graph to something else,\n  // we need to clear <g subplot> so that the new cartesian subplot\n  // can have the correct layer ordering\n  if (oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo.plotgroup) plotinfo.plotgroup.remove();\n    }\n  }\n  var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n  var hasGl = newFullLayout._has && newFullLayout._has('gl');\n  if (hadGl && !hasGl) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo._scene) plotinfo._scene.destroy();\n    }\n  }\n\n  // delete any titles we don't need anymore\n  // check if axis list has changed, and if so clear old titles\n  if (oldSubplotList.xaxis && oldSubplotList.yaxis) {\n    var oldAxIDs = axisIds.listIds({\n      _fullLayout: oldFullLayout\n    });\n    for (i = 0; i < oldAxIDs.length; i++) {\n      var oldAxId = oldAxIDs[i];\n      if (!newFullLayout[axisIds.id2name(oldAxId)]) {\n        oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n      }\n    }\n  }\n  var hadCartesian = oldFullLayout._has && oldFullLayout._has('cartesian');\n  var hasCartesian = newFullLayout._has && newFullLayout._has('cartesian');\n  if (hadCartesian && !hasCartesian) {\n    // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n\n    purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n    oldFullLayout._defs.selectAll('.axesclip').remove();\n    delete oldFullLayout._axisConstraintGroups;\n    delete oldFullLayout._axisMatchGroups;\n  } else if (oldSubplotList.cartesian) {\n    // otherwise look for subplots we need to remove\n\n    for (i = 0; i < oldSubplotList.cartesian.length; i++) {\n      var oldSubplotId = oldSubplotList.cartesian[i];\n      if (!newPlots[oldSubplotId]) {\n        var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n        oldFullLayout._cartesianlayer.selectAll(selector).remove();\n        removeSubplotExtras(oldSubplotId, oldFullLayout);\n      }\n    }\n  }\n};\nexports.drawFramework = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotData = makeSubplotData(gd);\n  var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot').data(subplotData, String);\n  subplotLayers.enter().append('g').attr('class', function (d) {\n    return 'subplot ' + d[0];\n  });\n  subplotLayers.order();\n  subplotLayers.exit().call(purgeSubplotLayers, fullLayout);\n  subplotLayers.each(function (d) {\n    var id = d[0];\n    var plotinfo = fullLayout._plots[id];\n    plotinfo.plotgroup = d3.select(this);\n    makeSubplotLayer(gd, plotinfo);\n\n    // make separate drag layers for each subplot,\n    // but append them to paper rather than the plot groups,\n    // so they end up on top of the rest\n    plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n  });\n};\nexports.rangePlot = function (gd, plotinfo, cdSubplot) {\n  makeSubplotLayer(gd, plotinfo);\n  plotOne(gd, plotinfo, cdSubplot);\n  Plots.style(gd);\n};\nfunction makeSubplotData(gd) {\n  var fullLayout = gd._fullLayout;\n  var ids = fullLayout._subplots.cartesian;\n  var len = ids.length;\n  var i, j, id, plotinfo, xa, ya;\n\n  // split 'regular' and 'overlaying' subplots\n  var regulars = [];\n  var overlays = [];\n  for (i = 0; i < len; i++) {\n    id = ids[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n    var xa2 = xa._mainAxis;\n    var ya2 = ya._mainAxis;\n    var mainplot = xa2._id + ya2._id;\n    var mainplotinfo = fullLayout._plots[mainplot];\n    plotinfo.overlays = [];\n    if (mainplot !== id && mainplotinfo) {\n      plotinfo.mainplot = mainplot;\n      plotinfo.mainplotinfo = mainplotinfo;\n      overlays.push(id);\n    } else {\n      plotinfo.mainplot = undefined;\n      plotinfo.mainplotinfo = undefined;\n      regulars.push(id);\n    }\n  }\n\n  // fill in list of overlaying subplots in 'main plot'\n  for (i = 0; i < overlays.length; i++) {\n    id = overlays[i];\n    plotinfo = fullLayout._plots[id];\n    plotinfo.mainplotinfo.overlays.push(plotinfo);\n  }\n\n  // put 'regular' subplot data before 'overlaying'\n  var subplotIds = regulars.concat(overlays);\n  var subplotData = new Array(len);\n  for (i = 0; i < len; i++) {\n    id = subplotIds[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n\n    // use info about axis layer and overlaying pattern\n    // to clean what need to be cleaned up in exit selection\n    var d = [id, xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || ''];\n    for (j = 0; j < plotinfo.overlays.length; j++) {\n      d.push(plotinfo.overlays[j].id);\n    }\n    subplotData[i] = d;\n  }\n  return subplotData;\n}\nfunction makeSubplotLayer(gd, plotinfo) {\n  var plotgroup = plotinfo.plotgroup;\n  var id = plotinfo.id;\n  var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n  var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n  var hasOnlyLargeSploms = gd._fullLayout._hasOnlyLargeSploms;\n  if (!plotinfo.mainplot) {\n    if (hasOnlyLargeSploms) {\n      // TODO could do even better\n      // - we don't need plot (but we would have to mock it in lsInner\n      //   and other places\n      // - we don't (x|y)lines and (x|y)axislayer for most subplots\n      //   usually just the bottom x and left y axes.\n      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n      plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n      plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n    } else {\n      var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n      plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n      plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n      plotinfo.minorGridlayer = ensureSingle(plotgroup, 'g', 'minor-gridlayer');\n      plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n      plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n      var betweenLayer = ensureSingle(plotgroup, 'g', 'layer-between');\n      plotinfo.shapelayerBetween = ensureSingle(betweenLayer, 'g', 'shapelayer');\n      plotinfo.imagelayerBetween = ensureSingle(betweenLayer, 'g', 'imagelayer');\n      ensureSingle(plotgroup, 'path', 'xlines-below');\n      ensureSingle(plotgroup, 'path', 'ylines-below');\n      plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n      ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n      ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n      plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n      plotinfo.plot = ensureSingle(plotgroup, 'g', 'plot');\n      plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n      plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n      ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n      ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n      plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above');\n\n      // set refs to correct layers as determined by 'axis.layer'\n      plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n      plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n      plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n      plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n    }\n  } else {\n    var mainplotinfo = plotinfo.mainplotinfo;\n    var mainplotgroup = mainplotinfo.plotgroup;\n    var xId = id + '-x';\n    var yId = id + '-y';\n\n    // now make the components of overlaid subplots\n    // overlays don't have backgrounds, and append all\n    // their other components to the corresponding\n    // extra groups of their main plots.\n\n    plotinfo.minorGridlayer = mainplotinfo.minorGridlayer;\n    plotinfo.gridlayer = mainplotinfo.gridlayer;\n    plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n    plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', yId);\n\n    // set refs to correct layers as determined by 'abovetraces'\n    plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n    plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n    plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n    plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n  }\n\n  // common attributes for all subplots, overlays or not\n\n  if (!hasOnlyLargeSploms) {\n    ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.xaxis._id);\n    ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.yaxis._id);\n    plotinfo.minorGridlayer.selectAll('g').map(function (d) {\n      return d[0];\n    }).sort(axisIds.idSort);\n    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n    ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n    plotinfo.gridlayer.selectAll('g').map(function (d) {\n      return d[0];\n    }).sort(axisIds.idSort);\n  }\n  plotinfo.xlines.style('fill', 'none').classed('crisp', true);\n  plotinfo.ylines.style('fill', 'none').classed('crisp', true);\n}\nfunction purgeSubplotLayers(layers, fullLayout) {\n  if (!layers) return;\n  var overlayIdsToRemove = {};\n  layers.each(function (d) {\n    var id = d[0];\n    var plotgroup = d3.select(this);\n    plotgroup.remove();\n    removeSubplotExtras(id, fullLayout);\n    overlayIdsToRemove[id] = true;\n\n    // do not remove individual axis <clipPath>s here\n    // as other subplots may need them\n  });\n\n  // must remove overlaid subplot trace layers 'manually'\n\n  for (var k in fullLayout._plots) {\n    var subplotInfo = fullLayout._plots[k];\n    var overlays = subplotInfo.overlays || [];\n    for (var j = 0; j < overlays.length; j++) {\n      var overlayInfo = overlays[j];\n      if (overlayIdsToRemove[overlayInfo.id]) {\n        overlayInfo.plot.selectAll('.trace').remove();\n      }\n    }\n  }\n}\nfunction removeSubplotExtras(subplotId, fullLayout) {\n  fullLayout._draggers.selectAll('g.' + subplotId).remove();\n  fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\nexports.toSVG = function (gd) {\n  var imageRoot = gd._fullLayout._glimages;\n  var root = d3.select(gd).selectAll('.svg-container');\n  var canvases = root.filter(function (d, i) {\n    return i === root.size() - 1;\n  }).selectAll('.gl-canvas-context, .gl-canvas-focus');\n  function canvasToImage() {\n    var canvas = this;\n    var imageData = canvas.toDataURL('image/png');\n    var image = imageRoot.append('svg:image');\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      preserveAspectRatio: 'none',\n      x: 0,\n      y: 0,\n      width: canvas.style.width,\n      height: canvas.style.height\n    });\n  }\n  canvases.each(canvasToImage);\n};\nexports.updateFx = require('./graph_interact').updateFx;","map":{"version":3,"names":["require","d3","Registry","Lib","Plots","Drawing","getModuleCalcData","axisIds","constants","xmlnsNamespaces","ensureSingle","ensureSingleAndAddDatum","parent","nodeType","className","s","datum","exports","name","attr","idRoot","idRegex","attrRegex","attributes","layoutAttributes","supplyLayoutDefaults","transitionAxes","finalizeSubplots","layoutIn","layoutOut","subplots","_subplots","xList","xaxis","yList","yaxis","spSVG","cartesian","spAll","concat","gl2d","allX","allY","i","xi","yi","length","parts","split","id2name","anchor","y","test","push","pushUnique","x","ki","axLetter","charAt","substr","name2id","plot","gd","traces","transitionOpts","makeOnCompleteCallback","fullLayout","_fullLayout","calcdata","Array","isArray","subplot","subplotInfo","_plots","cdSubplot","pcd","j","cd","trace","indexOf","index","carpet","fill","plotOne","plotinfo","traceLayerClasses","modules","_modules","_module","cdModuleAndOthers","cdModule","traceZorderGroups","t","zi","zorder","layerData","zoomScaleQueryParts","zindices","Object","keys","map","Number","sort","sorterAsc","z","categories","svg","classBaseName","layerName","plotMethod","zoomScale","a","b","layers","selectAll","data","d","enter","append","classed","isRangePlot","exit","remove","order","each","sel","select","clipOnAxisFalseQuery","setClipUrl","layerClipId","_has","getModule","_context","staticPlot","_hasClipOnAxisFalse","clipOnAxisFalseTraces","join","zoomScalePts","zoomScaleTxt","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldPlots","newPlots","oldSubplotList","k","_hasOnlyLargeSploms","plotgroup","hadGl","hasGl","_scene","destroy","oldAxIDs","listIds","oldAxId","_infolayer","hadCartesian","hasCartesian","purgeSubplotLayers","_cartesianlayer","_defs","_axisConstraintGroups","_axisMatchGroups","oldSubplotId","selector","removeSubplotExtras","drawFramework","subplotData","makeSubplotData","subplotLayers","String","call","id","makeSubplotLayer","draglayer","_draggers","rangePlot","style","ids","len","xa","ya","regulars","overlays","xa2","_mainAxis","ya2","mainplot","_id","mainplotinfo","undefined","subplotIds","layer","overlaying","xLayer","layerValue2layerClass","yLayer","hasOnlyLargeSploms","xlines","ylines","xaxislayer","yaxislayer","backLayer","shapelayer","imagelayer","minorGridlayer","gridlayer","zerolinelayer","betweenLayer","shapelayerBetween","imagelayerBetween","overlinesBelow","overaxesBelow","overplot","overlinesAbove","overaxesAbove","mainplotgroup","xId","yId","idSort","overlayIdsToRemove","overlayInfo","subplotId","_uid","toSVG","imageRoot","_glimages","root","canvases","filter","size","canvasToImage","canvas","imageData","toDataURL","image","xmlns","preserveAspectRatio","width","height","updateFx"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/node_modules/plotly.js/src/plots/cartesian/index.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Plots = require('../plots');\nvar Drawing = require('../../components/drawing');\n\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\nvar axisIds = require('./axis_ids');\nvar constants = require('./constants');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar ensureSingle = Lib.ensureSingle;\n\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n    return Lib.ensureSingle(parent, nodeType, className, function(s) {\n        s.datum(className);\n    });\n}\n\nexports.name = 'cartesian';\n\nexports.attr = ['xaxis', 'yaxis'];\n\nexports.idRoot = ['x', 'y'];\n\nexports.idRegex = constants.idRegex;\n\nexports.attrRegex = constants.attrRegex;\n\nexports.attributes = require('./attributes');\n\nexports.layoutAttributes = require('./layout_attributes');\n\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.transitionAxes = require('./transition_axes');\n\nexports.finalizeSubplots = function(layoutIn, layoutOut) {\n    var subplots = layoutOut._subplots;\n    var xList = subplots.xaxis;\n    var yList = subplots.yaxis;\n    var spSVG = subplots.cartesian;\n    var spAll = spSVG.concat(subplots.gl2d || []);\n    var allX = {};\n    var allY = {};\n    var i, xi, yi;\n\n    for(i = 0; i < spAll.length; i++) {\n        var parts = spAll[i].split('y');\n        allX[parts[0]] = 1;\n        allY['y' + parts[1]] = 1;\n    }\n\n    // check for x axes with no subplot, and make one from the anchor of that x axis\n    for(i = 0; i < xList.length; i++) {\n        xi = xList[i];\n        if(!allX[xi]) {\n            yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n            if(!constants.idRegex.y.test(yi)) yi = 'y';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allY[yi]) {\n                allY[yi] = 1;\n                Lib.pushUnique(yList, yi);\n            }\n        }\n    }\n\n    // same for y axes with no subplot\n    for(i = 0; i < yList.length; i++) {\n        yi = yList[i];\n        if(!allY[yi]) {\n            xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n            if(!constants.idRegex.x.test(xi)) xi = 'x';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allX[xi]) {\n                allX[xi] = 1;\n                Lib.pushUnique(xList, xi);\n            }\n        }\n    }\n\n    // finally, if we've gotten here we're supposed to show cartesian...\n    // so if there are NO subplots at all, make one from the first\n    // x & y axes in the input layout\n    if(!spAll.length) {\n        xi = '';\n        yi = '';\n        for(var ki in layoutIn) {\n            if(constants.attrRegex.test(ki)) {\n                var axLetter = ki.charAt(0);\n                if(axLetter === 'x') {\n                    if(!xi || (+ki.substr(5) < +xi.substr(5))) {\n                        xi = ki;\n                    }\n                } else if(!yi || (+ki.substr(5) < +yi.substr(5))) {\n                    yi = ki;\n                }\n            }\n        }\n        xi = xi ? axisIds.name2id(xi) : 'x';\n        yi = yi ? axisIds.name2id(yi) : 'y';\n        xList.push(xi);\n        yList.push(yi);\n        spSVG.push(xi + yi);\n    }\n};\n\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array (optional)} traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\nexports.plot = function(gd, traces, transitionOpts, makeOnCompleteCallback) {\n    var fullLayout = gd._fullLayout;\n    var subplots = fullLayout._subplots.cartesian;\n    var calcdata = gd.calcdata;\n    var i;\n\n    // Traces is a list of trace indices to (re)plot. If it's not provided,\n    // then it's a complete replot so we create a new list and add all trace indices\n    // which are in calcdata.\n\n    if(!Array.isArray(traces)) {\n        // If traces is not provided, then it's a complete replot and missing\n        // traces are removed\n        traces = [];\n        for(i = 0; i < calcdata.length; i++) traces.push(i);\n    }\n\n    // For each subplot\n    for(i = 0; i < subplots.length; i++) {\n        var subplot = subplots[i];\n        var subplotInfo = fullLayout._plots[subplot];\n\n        // Get all calcdata (traces) for this subplot:\n        var cdSubplot = [];\n        var pcd;\n\n        // For each trace\n        for(var j = 0; j < calcdata.length; j++) {\n            var cd = calcdata[j];\n            var trace = cd[0].trace;\n\n            // Skip trace if whitelist provided and it's not whitelisted:\n            // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n            if(trace.xaxis + trace.yaxis === subplot) {\n                // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n                // axis has actually changed:\n                //\n                // If this trace is specifically requested, add it to the list:\n                if(traces.indexOf(trace.index) !== -1 || trace.carpet) {\n                    // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n                    // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n                    // is outdated. So this retroactively adds the previous trace if the\n                    // traces are interdependent.\n                    if(\n                        pcd &&\n                        pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot &&\n                        ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 &&\n                        cdSubplot.indexOf(pcd) === -1\n                    ) {\n                        cdSubplot.push(pcd);\n                    }\n\n                    cdSubplot.push(cd);\n                }\n\n                // Track the previous trace on this subplot for the retroactive-add step\n                // above:\n                pcd = cd;\n            }\n        }\n        // Plot the traces for this subplot\n        plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n    }\n};\n\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n    var traceLayerClasses = constants.traceLayerClasses;\n    var fullLayout = gd._fullLayout;\n    var modules = fullLayout._modules;\n    var _module, cdModuleAndOthers, cdModule;\n\n    // Separate traces by zorder and plot each zorder group separately\n    // TODO: Performance\n    var traceZorderGroups = {};\n    for(var t = 0; t < cdSubplot.length; t++) {\n        var trace = cdSubplot[t][0].trace;\n        var zi = trace.zorder || 0;\n        if(!traceZorderGroups[zi]) traceZorderGroups[zi] = [];\n        traceZorderGroups[zi].push(cdSubplot[t]);\n    }\n\n    var layerData = [];\n    var zoomScaleQueryParts = [];\n\n    // Plot each zorder group in ascending order\n    var zindices = Object.keys(traceZorderGroups)\n        .map(Number)\n        .sort(Lib.sorterAsc);\n    for(var z = 0; z < zindices.length; z++) {\n        var zorder = zindices[z];\n        // For each \"module\" (trace type)\n        for(var i = 0; i < modules.length; i++) {\n            _module = modules[i];\n            var name = _module.name;\n            var categories = Registry.modules[name].categories;\n\n            if(categories.svg) {\n                var classBaseName = (_module.layerName || name + 'layer');\n                var className = classBaseName + (z ? Number(z) + 1 : '');\n                var plotMethod = _module.plot;\n\n                // plot all visible traces of this type on this subplot at once\n                cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod, zorder);\n                cdModule = cdModuleAndOthers[0];\n                // don't need to search the found traces again - in fact we need to NOT\n                // so that if two modules share the same plotter we don't double-plot\n                cdSubplot = cdModuleAndOthers[1];\n\n                if(cdModule.length) {\n                    layerData.push({\n                        i: traceLayerClasses.indexOf(classBaseName),\n                        zorder: z,\n                        className: className,\n                        plotMethod: plotMethod,\n                        cdModule: cdModule\n                    });\n                }\n\n                if(categories.zoomScale) {\n                    zoomScaleQueryParts.push('.' + className);\n                }\n            }\n        }\n    }\n    // Sort the layers primarily by z, then by i\n    layerData.sort(function(a, b) {\n        return (\n            (a.zorder || 0) - (b.zorder || 0) ||\n            (a.i - b.i)\n        );\n    });\n\n    var layers = plotinfo.plot.selectAll('g.mlayer')\n        .data(layerData, function(d) { return d.className; });\n\n    layers.enter().append('g')\n        .attr('class', function(d) { return d.className; })\n        .classed('mlayer', true)\n        .classed('rangeplot', plotinfo.isRangePlot);\n\n    layers.exit().remove();\n\n    layers.order();\n\n    layers.each(function(d) {\n        var sel = d3.select(this);\n        var className = d.className;\n\n        d.plotMethod(\n            gd, plotinfo, d.cdModule, sel,\n            transitionOpts, makeOnCompleteCallback\n        );\n\n        // layers that allow `cliponaxis: false`\n        if(constants.clipOnAxisFalseQuery.indexOf('.' + className) === -1) {\n            Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n        }\n    });\n\n    // call Scattergl.plot separately\n    if(fullLayout._has('scattergl')) {\n        _module = Registry.getModule('scattergl');\n        cdModule = getModuleCalcData(cdSubplot, _module)[0];\n        _module.plot(gd, plotinfo, cdModule);\n    }\n\n    // stash \"hot\" selections for faster interaction on drag and scroll\n    if(!gd._context.staticPlot) {\n        if(plotinfo._hasClipOnAxisFalse) {\n            plotinfo.clipOnAxisFalseTraces = plotinfo.plot\n                .selectAll(constants.clipOnAxisFalseQuery.join(','))\n                .selectAll('.trace');\n        }\n\n        if(zoomScaleQueryParts.length) {\n            var traces = plotinfo.plot\n                .selectAll(zoomScaleQueryParts.join(','))\n                .selectAll('.trace');\n\n            plotinfo.zoomScalePts = traces.selectAll('path.point');\n            plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n        }\n    }\n}\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldPlots = oldFullLayout._plots || {};\n    var newPlots = newFullLayout._plots || {};\n    var oldSubplotList = oldFullLayout._subplots || {};\n    var plotinfo;\n    var i, k;\n\n    // when going from a large splom graph to something else,\n    // we need to clear <g subplot> so that the new cartesian subplot\n    // can have the correct layer ordering\n    if(oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo.plotgroup) plotinfo.plotgroup.remove();\n        }\n    }\n\n    var hadGl = (oldFullLayout._has && oldFullLayout._has('gl'));\n    var hasGl = (newFullLayout._has && newFullLayout._has('gl'));\n\n    if(hadGl && !hasGl) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo._scene) plotinfo._scene.destroy();\n        }\n    }\n\n    // delete any titles we don't need anymore\n    // check if axis list has changed, and if so clear old titles\n    if(oldSubplotList.xaxis && oldSubplotList.yaxis) {\n        var oldAxIDs = axisIds.listIds({_fullLayout: oldFullLayout});\n        for(i = 0; i < oldAxIDs.length; i++) {\n            var oldAxId = oldAxIDs[i];\n            if(!newFullLayout[axisIds.id2name(oldAxId)]) {\n                oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n            }\n        }\n    }\n\n    var hadCartesian = (oldFullLayout._has && oldFullLayout._has('cartesian'));\n    var hasCartesian = (newFullLayout._has && newFullLayout._has('cartesian'));\n\n    if(hadCartesian && !hasCartesian) {\n        // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n\n        purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n        oldFullLayout._defs.selectAll('.axesclip').remove();\n        delete oldFullLayout._axisConstraintGroups;\n        delete oldFullLayout._axisMatchGroups;\n    } else if(oldSubplotList.cartesian) {\n        // otherwise look for subplots we need to remove\n\n        for(i = 0; i < oldSubplotList.cartesian.length; i++) {\n            var oldSubplotId = oldSubplotList.cartesian[i];\n            if(!newPlots[oldSubplotId]) {\n                var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n                oldFullLayout._cartesianlayer.selectAll(selector).remove();\n                removeSubplotExtras(oldSubplotId, oldFullLayout);\n            }\n        }\n    }\n};\n\nexports.drawFramework = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotData = makeSubplotData(gd);\n\n    var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot')\n        .data(subplotData, String);\n\n    subplotLayers.enter().append('g')\n        .attr('class', function(d) { return 'subplot ' + d[0]; });\n\n    subplotLayers.order();\n\n    subplotLayers.exit()\n        .call(purgeSubplotLayers, fullLayout);\n\n    subplotLayers.each(function(d) {\n        var id = d[0];\n        var plotinfo = fullLayout._plots[id];\n\n        plotinfo.plotgroup = d3.select(this);\n        makeSubplotLayer(gd, plotinfo);\n\n        // make separate drag layers for each subplot,\n        // but append them to paper rather than the plot groups,\n        // so they end up on top of the rest\n        plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n    });\n};\n\nexports.rangePlot = function(gd, plotinfo, cdSubplot) {\n    makeSubplotLayer(gd, plotinfo);\n    plotOne(gd, plotinfo, cdSubplot);\n    Plots.style(gd);\n};\n\nfunction makeSubplotData(gd) {\n    var fullLayout = gd._fullLayout;\n    var ids = fullLayout._subplots.cartesian;\n    var len = ids.length;\n    var i, j, id, plotinfo, xa, ya;\n\n    // split 'regular' and 'overlaying' subplots\n    var regulars = [];\n    var overlays = [];\n\n    for(i = 0; i < len; i++) {\n        id = ids[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        var xa2 = xa._mainAxis;\n        var ya2 = ya._mainAxis;\n        var mainplot = xa2._id + ya2._id;\n        var mainplotinfo = fullLayout._plots[mainplot];\n        plotinfo.overlays = [];\n\n        if(mainplot !== id && mainplotinfo) {\n            plotinfo.mainplot = mainplot;\n            plotinfo.mainplotinfo = mainplotinfo;\n            overlays.push(id);\n        } else {\n            plotinfo.mainplot = undefined;\n            plotinfo.mainplotinfo = undefined;\n            regulars.push(id);\n        }\n    }\n\n    // fill in list of overlaying subplots in 'main plot'\n    for(i = 0; i < overlays.length; i++) {\n        id = overlays[i];\n        plotinfo = fullLayout._plots[id];\n        plotinfo.mainplotinfo.overlays.push(plotinfo);\n    }\n\n    // put 'regular' subplot data before 'overlaying'\n    var subplotIds = regulars.concat(overlays);\n    var subplotData = new Array(len);\n\n    for(i = 0; i < len; i++) {\n        id = subplotIds[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        // use info about axis layer and overlaying pattern\n        // to clean what need to be cleaned up in exit selection\n        var d = [id, xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || ''];\n        for(j = 0; j < plotinfo.overlays.length; j++) {\n            d.push(plotinfo.overlays[j].id);\n        }\n        subplotData[i] = d;\n    }\n    return subplotData;\n}\n\nfunction makeSubplotLayer(gd, plotinfo) {\n    var plotgroup = plotinfo.plotgroup;\n    var id = plotinfo.id;\n    var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n    var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n    var hasOnlyLargeSploms = gd._fullLayout._hasOnlyLargeSploms;\n\n    if(!plotinfo.mainplot) {\n        if(hasOnlyLargeSploms) {\n            // TODO could do even better\n            // - we don't need plot (but we would have to mock it in lsInner\n            //   and other places\n            // - we don't (x|y)lines and (x|y)axislayer for most subplots\n            //   usually just the bottom x and left y axes.\n            plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n            plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n            plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n            plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n        } else {\n            var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n            plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n            plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n\n            plotinfo.minorGridlayer = ensureSingle(plotgroup, 'g', 'minor-gridlayer');\n            plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n            plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n\n            var betweenLayer = ensureSingle(plotgroup, 'g', 'layer-between');\n            plotinfo.shapelayerBetween = ensureSingle(betweenLayer, 'g', 'shapelayer');\n            plotinfo.imagelayerBetween = ensureSingle(betweenLayer, 'g', 'imagelayer');\n\n            ensureSingle(plotgroup, 'path', 'xlines-below');\n            ensureSingle(plotgroup, 'path', 'ylines-below');\n            plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n\n            ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n            ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n            plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n\n            plotinfo.plot = ensureSingle(plotgroup, 'g', 'plot');\n            plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n\n            plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n            plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n            plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n\n            ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n            ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n            plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above');\n\n            // set refs to correct layers as determined by 'axis.layer'\n            plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n            plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n            plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n            plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n        }\n    } else {\n        var mainplotinfo = plotinfo.mainplotinfo;\n        var mainplotgroup = mainplotinfo.plotgroup;\n        var xId = id + '-x';\n        var yId = id + '-y';\n\n        // now make the components of overlaid subplots\n        // overlays don't have backgrounds, and append all\n        // their other components to the corresponding\n        // extra groups of their main plots.\n\n        plotinfo.minorGridlayer = mainplotinfo.minorGridlayer;\n        plotinfo.gridlayer = mainplotinfo.gridlayer;\n        plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n\n        plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', yId);\n\n        // set refs to correct layers as determined by 'abovetraces'\n        plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n        plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n        plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n        plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n    }\n\n    // common attributes for all subplots, overlays or not\n\n    if(!hasOnlyLargeSploms) {\n        ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.xaxis._id);\n        ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.yaxis._id);\n        plotinfo.minorGridlayer.selectAll('g')\n            .map(function(d) { return d[0]; })\n            .sort(axisIds.idSort);\n\n        ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n        ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n        plotinfo.gridlayer.selectAll('g')\n            .map(function(d) { return d[0]; })\n            .sort(axisIds.idSort);\n    }\n\n    plotinfo.xlines\n        .style('fill', 'none')\n        .classed('crisp', true);\n\n    plotinfo.ylines\n        .style('fill', 'none')\n        .classed('crisp', true);\n}\n\nfunction purgeSubplotLayers(layers, fullLayout) {\n    if(!layers) return;\n\n    var overlayIdsToRemove = {};\n\n    layers.each(function(d) {\n        var id = d[0];\n        var plotgroup = d3.select(this);\n\n        plotgroup.remove();\n        removeSubplotExtras(id, fullLayout);\n        overlayIdsToRemove[id] = true;\n\n        // do not remove individual axis <clipPath>s here\n        // as other subplots may need them\n    });\n\n    // must remove overlaid subplot trace layers 'manually'\n\n    for(var k in fullLayout._plots) {\n        var subplotInfo = fullLayout._plots[k];\n        var overlays = subplotInfo.overlays || [];\n\n        for(var j = 0; j < overlays.length; j++) {\n            var overlayInfo = overlays[j];\n\n            if(overlayIdsToRemove[overlayInfo.id]) {\n                overlayInfo.plot.selectAll('.trace').remove();\n            }\n        }\n    }\n}\n\nfunction removeSubplotExtras(subplotId, fullLayout) {\n    fullLayout._draggers.selectAll('g.' + subplotId).remove();\n    fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\n\nexports.toSVG = function(gd) {\n    var imageRoot = gd._fullLayout._glimages;\n    var root = d3.select(gd).selectAll('.svg-container');\n    var canvases = root.filter(function(d, i) {return i === root.size() - 1;})\n        .selectAll('.gl-canvas-context, .gl-canvas-focus');\n\n    function canvasToImage() {\n        var canvas = this;\n        var imageData = canvas.toDataURL('image/png');\n        var image = imageRoot.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            preserveAspectRatio: 'none',\n            x: 0,\n            y: 0,\n            width: canvas.style.width,\n            height: canvas.style.height\n        });\n    }\n\n    canvases.each(canvasToImage);\n};\n\nexports.updateFx = require('./graph_interact').updateFx;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}