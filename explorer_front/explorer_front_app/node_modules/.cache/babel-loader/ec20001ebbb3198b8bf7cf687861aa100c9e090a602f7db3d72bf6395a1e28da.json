{"ast":null,"code":"import axios from 'axios';\nimport Plotly from 'plotly.js/lib/core';\nexport default {\n  data() {\n    return {\n      totalCollections: 0\n    };\n  },\n  mounted() {\n    axios.get('http://0.0.0.0:8000/collection/').then(response => {\n      // Assuming your API response contains a 'count' field for total collections\n      this.collectionsData = response.data;\n      console.log(this.collectionsData);\n      console.log(this.collectionsData.Date);\n      this.createBarChart();\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  },\n  methods: {\n    createBarChart() {\n      //const xValues = this.collectionsData.map(item => item.Date); // Assuming date is a property in your data\n      //const yValues = this.collectionsData.map(item => item.Collections); // Assuming count is a property in your data\n      // const xValues = this.collectionsData.Date;\n      // const yValues = this.collectionsData.Collections;\n      // const trace = {\n      //   x: xValues,\n      //   y: yValues,\n      //   mode: 'lines+markers',\n      //   type: 'scatter',\n      //   name: 'Collections over Time'\n      // };\n\n      // const layout = {\n      //   title: 'Collections Over Time (stacked by year)',\n      //   xaxis: { title: 'Date' },\n      //   yaxis: { title: 'Number of Collections' }\n      // };\n\n      const aggregatedAmounts = {};\n      for (const date in collectionsData) {\n        const year = date.substring(0, 4);\n        if (!aggregatedAmounts[year]) {\n          aggregatedAmounts[year] = collectionsData[date];\n        } else {\n          aggregatedAmounts[year] += collectionsData[date];\n        }\n      }\n      const xValues = Object.keys(aggregatedAmounts);\n      const yValues = Object.values(aggregatedAmounts);\n      const data = [{\n        x: xValues,\n        y: yValues,\n        type: 'bar'\n      }];\n      Plotly.newPlot('bar-chart', [trace], layout);\n    }\n  }\n};","map":{"version":3,"names":["axios","Plotly","data","totalCollections","mounted","get","then","response","collectionsData","console","log","Date","createBarChart","catch","error","methods","aggregatedAmounts","date","year","substring","xValues","Object","keys","yValues","values","x","y","type","newPlot","trace","layout"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/explorerDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Collections Dashboard</h1>\n    <div id=\"stacked-bar-chart\"></div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Plotly from 'plotly.js/lib/core';\n\nexport default {\n  data() {\n    return {\n      totalCollections: 0\n    };\n  },\n  mounted() {\n    axios.get('http://0.0.0.0:8000/collection/')\n      .then(response => {\n        // Assuming your API response contains a 'count' field for total collections\n        this.collectionsData = response.data;\n        console.log(this.collectionsData)\n        console.log(this.collectionsData.Date)\n\n        this.createBarChart();\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  },\n  methods: {\n    createBarChart(){\n      //const xValues = this.collectionsData.map(item => item.Date); // Assuming date is a property in your data\n      //const yValues = this.collectionsData.map(item => item.Collections); // Assuming count is a property in your data\n      // const xValues = this.collectionsData.Date;\n      // const yValues = this.collectionsData.Collections;\n      // const trace = {\n      //   x: xValues,\n      //   y: yValues,\n      //   mode: 'lines+markers',\n      //   type: 'scatter',\n      //   name: 'Collections over Time'\n      // };\n\n      // const layout = {\n      //   title: 'Collections Over Time (stacked by year)',\n      //   xaxis: { title: 'Date' },\n      //   yaxis: { title: 'Number of Collections' }\n      // };\n\n      const aggregatedAmounts = {};\n\n      for (const date in collectionsData){\n        const year = date.substring(0,4);\n        if(!aggregatedAmounts[year]){\n          aggregatedAmounts[year] = collectionsData[date];\n        } else{\n          aggregatedAmounts[year] += collectionsData[date];\n        }\n      }\n\n\n        const xValues = Object.keys(aggregatedAmounts);\n        const yValues = Object.values(aggregatedAmounts);\n\n        const data = [{\n          x: xValues,\n          y: yValues,\n          type: 'bar'\n        }];\n\n      Plotly.newPlot('bar-chart', [trace], layout);\n    }\n  }\n};\n</script>\n\n\n\n<style scoped>\n/* Add any custom styles here */\n</style>\n"],"mappings":"AAQA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,MAAK,MAAO,oBAAoB;AAEvC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE;IACpB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACRJ,KAAK,CAACK,GAAG,CAAC,iCAAiC,EACxCC,IAAI,CAACC,QAAO,IAAK;MAChB;MACA,IAAI,CAACC,eAAc,GAAID,QAAQ,CAACL,IAAI;MACpCO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,eAAe;MAChCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,eAAe,CAACG,IAAI;MAErC,IAAI,CAACC,cAAc,CAAC,CAAC;IACvB,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;MACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC;EACDC,OAAO,EAAE;IACPH,cAAcA,CAAA,EAAE;MACd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA,MAAMI,iBAAgB,GAAI,CAAC,CAAC;MAE5B,KAAK,MAAMC,IAAG,IAAKT,eAAe,EAAC;QACjC,MAAMU,IAAG,GAAID,IAAI,CAACE,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC;QAChC,IAAG,CAACH,iBAAiB,CAACE,IAAI,CAAC,EAAC;UAC1BF,iBAAiB,CAACE,IAAI,IAAIV,eAAe,CAACS,IAAI,CAAC;QACjD,OAAM;UACJD,iBAAiB,CAACE,IAAI,KAAKV,eAAe,CAACS,IAAI,CAAC;QAClD;MACF;MAGE,MAAMG,OAAM,GAAIC,MAAM,CAACC,IAAI,CAACN,iBAAiB,CAAC;MAC9C,MAAMO,OAAM,GAAIF,MAAM,CAACG,MAAM,CAACR,iBAAiB,CAAC;MAEhD,MAAMd,IAAG,GAAI,CAAC;QACZuB,CAAC,EAAEL,OAAO;QACVM,CAAC,EAAEH,OAAO;QACVI,IAAI,EAAE;MACR,CAAC,CAAC;MAEJ1B,MAAM,CAAC2B,OAAO,CAAC,WAAW,EAAE,CAACC,KAAK,CAAC,EAAEC,MAAM,CAAC;IAC9C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}