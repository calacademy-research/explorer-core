{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar scatterSubTypes = require('../../traces/scatter/subtypes');\nvar Registry = require('../../registry');\nvar isUnifiedHover = require('../fx/helpers').isUnifiedHover;\nvar createModeBar = require('./modebar');\nvar modeBarButtons = require('./buttons');\nvar DRAW_MODES = require('./constants').DRAW_MODES;\nvar extendDeep = require('../../lib').extendDeep;\n\n/**\n * ModeBar wrapper around 'create' and 'update',\n * chooses buttons to pass to ModeBar constructor based on\n * plot type and plot config.\n *\n * @param {object} gd main plot object\n *\n */\nmodule.exports = function manageModeBar(gd) {\n  var fullLayout = gd._fullLayout;\n  var context = gd._context;\n  var modeBar = fullLayout._modeBar;\n  if (!context.displayModeBar && !context.watermark) {\n    if (modeBar) {\n      modeBar.destroy();\n      delete fullLayout._modeBar;\n    }\n    return;\n  }\n  if (!Array.isArray(context.modeBarButtonsToRemove)) {\n    throw new Error(['*modeBarButtonsToRemove* configuration options', 'must be an array.'].join(' '));\n  }\n  if (!Array.isArray(context.modeBarButtonsToAdd)) {\n    throw new Error(['*modeBarButtonsToAdd* configuration options', 'must be an array.'].join(' '));\n  }\n  var customButtons = context.modeBarButtons;\n  var buttonGroups;\n  if (Array.isArray(customButtons) && customButtons.length) {\n    buttonGroups = fillCustomButton(customButtons);\n  } else if (!context.displayModeBar && context.watermark) {\n    buttonGroups = [];\n  } else {\n    buttonGroups = getButtonGroups(gd);\n  }\n  if (modeBar) modeBar.update(gd, buttonGroups);else fullLayout._modeBar = createModeBar(gd, buttonGroups);\n};\n\n// logic behind which buttons are displayed by default\nfunction getButtonGroups(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var context = gd._context;\n  function match(name, B) {\n    if (typeof B === 'string') {\n      if (B.toLowerCase() === name.toLowerCase()) return true;\n    } else {\n      var v0 = B.name;\n      var v1 = B._cat || B.name;\n      if (v0 === name || v1 === name.toLowerCase()) return true;\n    }\n    return false;\n  }\n  var layoutAdd = fullLayout.modebar.add;\n  if (typeof layoutAdd === 'string') layoutAdd = [layoutAdd];\n  var layoutRemove = fullLayout.modebar.remove;\n  if (typeof layoutRemove === 'string') layoutRemove = [layoutRemove];\n  var buttonsToAdd = context.modeBarButtonsToAdd.concat(layoutAdd.filter(function (e) {\n    for (var i = 0; i < context.modeBarButtonsToRemove.length; i++) {\n      if (match(e, context.modeBarButtonsToRemove[i])) return false;\n    }\n    return true;\n  }));\n  var buttonsToRemove = context.modeBarButtonsToRemove.concat(layoutRemove.filter(function (e) {\n    for (var i = 0; i < context.modeBarButtonsToAdd.length; i++) {\n      if (match(e, context.modeBarButtonsToAdd[i])) return false;\n    }\n    return true;\n  }));\n  var hasCartesian = fullLayout._has('cartesian');\n  var hasGL3D = fullLayout._has('gl3d');\n  var hasGeo = fullLayout._has('geo');\n  var hasPie = fullLayout._has('pie');\n  var hasFunnelarea = fullLayout._has('funnelarea');\n  var hasGL2D = fullLayout._has('gl2d');\n  var hasTernary = fullLayout._has('ternary');\n  var hasMapbox = fullLayout._has('mapbox');\n  var hasPolar = fullLayout._has('polar');\n  var hasSmith = fullLayout._has('smith');\n  var hasSankey = fullLayout._has('sankey');\n  var allAxesFixed = areAllAxesFixed(fullLayout);\n  var hasUnifiedHoverLabel = isUnifiedHover(fullLayout.hovermode);\n  var groups = [];\n  function addGroup(newGroup) {\n    if (!newGroup.length) return;\n    var out = [];\n    for (var i = 0; i < newGroup.length; i++) {\n      var name = newGroup[i];\n      var B = modeBarButtons[name];\n      var v0 = B.name.toLowerCase();\n      var v1 = (B._cat || B.name).toLowerCase();\n      var found = false;\n      for (var q = 0; q < buttonsToRemove.length; q++) {\n        var t = buttonsToRemove[q].toLowerCase();\n        if (t === v0 || t === v1) {\n          found = true;\n          break;\n        }\n      }\n      if (found) continue;\n      out.push(modeBarButtons[name]);\n    }\n    groups.push(out);\n  }\n\n  // buttons common to all plot types\n  var commonGroup = ['toImage'];\n  if (context.showEditInChartStudio) commonGroup.push('editInChartStudio');else if (context.showSendToCloud) commonGroup.push('sendDataToCloud');\n  addGroup(commonGroup);\n  var zoomGroup = [];\n  var hoverGroup = [];\n  var resetGroup = [];\n  var dragModeGroup = [];\n  if ((hasCartesian || hasGL2D || hasPie || hasFunnelarea || hasTernary) + hasGeo + hasGL3D + hasMapbox + hasPolar + hasSmith > 1) {\n    // graphs with more than one plot types get 'union buttons'\n    // which reset the view or toggle hover labels across all subplots.\n    hoverGroup = ['toggleHover'];\n    resetGroup = ['resetViews'];\n  } else if (hasGeo) {\n    zoomGroup = ['zoomInGeo', 'zoomOutGeo'];\n    hoverGroup = ['hoverClosestGeo'];\n    resetGroup = ['resetGeo'];\n  } else if (hasGL3D) {\n    hoverGroup = ['hoverClosest3d'];\n    resetGroup = ['resetCameraDefault3d', 'resetCameraLastSave3d'];\n  } else if (hasMapbox) {\n    zoomGroup = ['zoomInMapbox', 'zoomOutMapbox'];\n    hoverGroup = ['toggleHover'];\n    resetGroup = ['resetViewMapbox'];\n  } else if (hasGL2D) {\n    hoverGroup = ['hoverClosestGl2d'];\n  } else if (hasPie) {\n    hoverGroup = ['hoverClosestPie'];\n  } else if (hasSankey) {\n    hoverGroup = ['hoverClosestCartesian', 'hoverCompareCartesian'];\n    resetGroup = ['resetViewSankey'];\n  } else {\n    // hasPolar, hasSmith, hasTernary\n    // always show at least one hover icon.\n    hoverGroup = ['toggleHover'];\n  }\n  // if we have cartesian, allow switching between closest and compare\n  // regardless of what other types are on the plot, since they'll all\n  // just treat any truthy hovermode as 'closest'\n  if (hasCartesian) {\n    hoverGroup = ['toggleSpikelines', 'hoverClosestCartesian', 'hoverCompareCartesian'];\n  }\n  if (hasNoHover(fullData) || hasUnifiedHoverLabel) {\n    hoverGroup = [];\n  }\n  if ((hasCartesian || hasGL2D) && !allAxesFixed) {\n    zoomGroup = ['zoomIn2d', 'zoomOut2d', 'autoScale2d'];\n    if (resetGroup[0] !== 'resetViews') resetGroup = ['resetScale2d'];\n  }\n  if (hasGL3D) {\n    dragModeGroup = ['zoom3d', 'pan3d', 'orbitRotation', 'tableRotation'];\n  } else if ((hasCartesian || hasGL2D) && !allAxesFixed || hasTernary) {\n    dragModeGroup = ['zoom2d', 'pan2d'];\n  } else if (hasMapbox || hasGeo) {\n    dragModeGroup = ['pan2d'];\n  } else if (hasPolar) {\n    dragModeGroup = ['zoom2d'];\n  }\n  if (isSelectable(fullData)) {\n    dragModeGroup.push('select2d', 'lasso2d');\n  }\n  var enabledHoverGroup = [];\n  var enableHover = function (a) {\n    // return if already added\n    if (enabledHoverGroup.indexOf(a) !== -1) return;\n    // should be in hoverGroup\n    if (hoverGroup.indexOf(a) !== -1) {\n      enabledHoverGroup.push(a);\n    }\n  };\n  if (Array.isArray(buttonsToAdd)) {\n    var newList = [];\n    for (var i = 0; i < buttonsToAdd.length; i++) {\n      var b = buttonsToAdd[i];\n      if (typeof b === 'string') {\n        b = b.toLowerCase();\n        if (DRAW_MODES.indexOf(b) !== -1) {\n          // accept pre-defined drag modes i.e. shape drawing features as string\n          if (fullLayout._has('mapbox') ||\n          // draw shapes in paper coordinate (could be improved in future to support data coordinate, when there is no pitch)\n          fullLayout._has('cartesian') // draw shapes in data coordinate\n          ) {\n            dragModeGroup.push(b);\n          }\n        } else if (b === 'togglespikelines') {\n          enableHover('toggleSpikelines');\n        } else if (b === 'togglehover') {\n          enableHover('toggleHover');\n        } else if (b === 'hovercompare') {\n          enableHover('hoverCompareCartesian');\n        } else if (b === 'hoverclosest') {\n          enableHover('hoverClosestCartesian');\n          enableHover('hoverClosestGeo');\n          enableHover('hoverClosest3d');\n          enableHover('hoverClosestGl2d');\n          enableHover('hoverClosestPie');\n        } else if (b === 'v1hovermode') {\n          enableHover('toggleHover');\n          enableHover('hoverClosestCartesian');\n          enableHover('hoverCompareCartesian');\n          enableHover('hoverClosestGeo');\n          enableHover('hoverClosest3d');\n          enableHover('hoverClosestGl2d');\n          enableHover('hoverClosestPie');\n        }\n      } else newList.push(b);\n    }\n    buttonsToAdd = newList;\n  }\n  addGroup(dragModeGroup);\n  addGroup(zoomGroup.concat(resetGroup));\n  addGroup(enabledHoverGroup);\n  return appendButtonsToGroups(groups, buttonsToAdd);\n}\nfunction areAllAxesFixed(fullLayout) {\n  var axList = axisIds.list({\n    _fullLayout: fullLayout\n  }, null, true);\n  for (var i = 0; i < axList.length; i++) {\n    if (!axList[i].fixedrange) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// look for traces that support selection\n// to be updated as we add more selectPoints handlers\nfunction isSelectable(fullData) {\n  var selectable = false;\n  for (var i = 0; i < fullData.length; i++) {\n    if (selectable) break;\n    var trace = fullData[i];\n    if (!trace._module || !trace._module.selectPoints) continue;\n    if (Registry.traceIs(trace, 'scatter-like')) {\n      if (scatterSubTypes.hasMarkers(trace) || scatterSubTypes.hasText(trace)) {\n        selectable = true;\n      }\n    } else if (Registry.traceIs(trace, 'box-violin')) {\n      if (trace.boxpoints === 'all' || trace.points === 'all') {\n        selectable = true;\n      }\n    } else {\n      // assume that in general if the trace module has selectPoints,\n      // then it's selectable. Scatter is an exception to this because it must\n      // have markers or text, not just be a scatter type.\n\n      selectable = true;\n    }\n  }\n  return selectable;\n}\n\n// check whether all trace are 'noHover'\nfunction hasNoHover(fullData) {\n  for (var i = 0; i < fullData.length; i++) {\n    if (!Registry.traceIs(fullData[i], 'noHover')) return false;\n  }\n  return true;\n}\nfunction appendButtonsToGroups(groups, buttons) {\n  if (buttons.length) {\n    if (Array.isArray(buttons[0])) {\n      for (var i = 0; i < buttons.length; i++) {\n        groups.push(buttons[i]);\n      }\n    } else groups.push(buttons);\n  }\n  return groups;\n}\n\n// fill in custom buttons referring to default mode bar buttons\nfunction fillCustomButton(originalModeBarButtons) {\n  var customButtons = extendDeep([], originalModeBarButtons);\n  for (var i = 0; i < customButtons.length; i++) {\n    var buttonGroup = customButtons[i];\n    for (var j = 0; j < buttonGroup.length; j++) {\n      var button = buttonGroup[j];\n      if (typeof button === 'string') {\n        if (modeBarButtons[button] !== undefined) {\n          customButtons[i][j] = modeBarButtons[button];\n        } else {\n          throw new Error(['*modeBarButtons* configuration options', 'invalid button name'].join(' '));\n        }\n      }\n    }\n  }\n  return customButtons;\n}","map":{"version":3,"names":["require","axisIds","scatterSubTypes","Registry","isUnifiedHover","createModeBar","modeBarButtons","DRAW_MODES","extendDeep","module","exports","manageModeBar","gd","fullLayout","_fullLayout","context","_context","modeBar","_modeBar","displayModeBar","watermark","destroy","Array","isArray","modeBarButtonsToRemove","Error","join","modeBarButtonsToAdd","customButtons","buttonGroups","length","fillCustomButton","getButtonGroups","update","fullData","_fullData","match","name","B","toLowerCase","v0","v1","_cat","layoutAdd","modebar","add","layoutRemove","remove","buttonsToAdd","concat","filter","e","i","buttonsToRemove","hasCartesian","_has","hasGL3D","hasGeo","hasPie","hasFunnelarea","hasGL2D","hasTernary","hasMapbox","hasPolar","hasSmith","hasSankey","allAxesFixed","areAllAxesFixed","hasUnifiedHoverLabel","hovermode","groups","addGroup","newGroup","out","found","q","t","push","commonGroup","showEditInChartStudio","showSendToCloud","zoomGroup","hoverGroup","resetGroup","dragModeGroup","hasNoHover","isSelectable","enabledHoverGroup","enableHover","a","indexOf","newList","b","appendButtonsToGroups","axList","list","fixedrange","selectable","trace","_module","selectPoints","traceIs","hasMarkers","hasText","boxpoints","points","buttons","originalModeBarButtons","buttonGroup","j","button","undefined"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/node_modules/plotly.js/src/components/modebar/manage.js"],"sourcesContent":["'use strict';\n\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar scatterSubTypes = require('../../traces/scatter/subtypes');\nvar Registry = require('../../registry');\nvar isUnifiedHover = require('../fx/helpers').isUnifiedHover;\n\nvar createModeBar = require('./modebar');\nvar modeBarButtons = require('./buttons');\nvar DRAW_MODES = require('./constants').DRAW_MODES;\nvar extendDeep = require('../../lib').extendDeep;\n\n/**\n * ModeBar wrapper around 'create' and 'update',\n * chooses buttons to pass to ModeBar constructor based on\n * plot type and plot config.\n *\n * @param {object} gd main plot object\n *\n */\nmodule.exports = function manageModeBar(gd) {\n    var fullLayout = gd._fullLayout;\n    var context = gd._context;\n    var modeBar = fullLayout._modeBar;\n\n    if(!context.displayModeBar && !context.watermark) {\n        if(modeBar) {\n            modeBar.destroy();\n            delete fullLayout._modeBar;\n        }\n        return;\n    }\n\n    if(!Array.isArray(context.modeBarButtonsToRemove)) {\n        throw new Error([\n            '*modeBarButtonsToRemove* configuration options',\n            'must be an array.'\n        ].join(' '));\n    }\n\n    if(!Array.isArray(context.modeBarButtonsToAdd)) {\n        throw new Error([\n            '*modeBarButtonsToAdd* configuration options',\n            'must be an array.'\n        ].join(' '));\n    }\n\n    var customButtons = context.modeBarButtons;\n    var buttonGroups;\n\n    if(Array.isArray(customButtons) && customButtons.length) {\n        buttonGroups = fillCustomButton(customButtons);\n    } else if(!context.displayModeBar && context.watermark) {\n        buttonGroups = [];\n    } else {\n        buttonGroups = getButtonGroups(gd);\n    }\n\n    if(modeBar) modeBar.update(gd, buttonGroups);\n    else fullLayout._modeBar = createModeBar(gd, buttonGroups);\n};\n\n// logic behind which buttons are displayed by default\nfunction getButtonGroups(gd) {\n    var fullLayout = gd._fullLayout;\n    var fullData = gd._fullData;\n    var context = gd._context;\n\n    function match(name, B) {\n        if(typeof B === 'string') {\n            if(B.toLowerCase() === name.toLowerCase()) return true;\n        } else {\n            var v0 = B.name;\n            var v1 = (B._cat || B.name);\n\n            if(v0 === name || v1 === name.toLowerCase()) return true;\n        }\n        return false;\n    }\n\n    var layoutAdd = fullLayout.modebar.add;\n    if(typeof layoutAdd === 'string') layoutAdd = [layoutAdd];\n\n    var layoutRemove = fullLayout.modebar.remove;\n    if(typeof layoutRemove === 'string') layoutRemove = [layoutRemove];\n\n    var buttonsToAdd = context.modeBarButtonsToAdd.concat(\n        layoutAdd.filter(function(e) {\n            for(var i = 0; i < context.modeBarButtonsToRemove.length; i++) {\n                if(match(e, context.modeBarButtonsToRemove[i])) return false;\n            }\n            return true;\n        })\n    );\n\n    var buttonsToRemove = context.modeBarButtonsToRemove.concat(\n        layoutRemove.filter(function(e) {\n            for(var i = 0; i < context.modeBarButtonsToAdd.length; i++) {\n                if(match(e, context.modeBarButtonsToAdd[i])) return false;\n            }\n            return true;\n        })\n    );\n\n    var hasCartesian = fullLayout._has('cartesian');\n    var hasGL3D = fullLayout._has('gl3d');\n    var hasGeo = fullLayout._has('geo');\n    var hasPie = fullLayout._has('pie');\n    var hasFunnelarea = fullLayout._has('funnelarea');\n    var hasGL2D = fullLayout._has('gl2d');\n    var hasTernary = fullLayout._has('ternary');\n    var hasMapbox = fullLayout._has('mapbox');\n    var hasPolar = fullLayout._has('polar');\n    var hasSmith = fullLayout._has('smith');\n    var hasSankey = fullLayout._has('sankey');\n    var allAxesFixed = areAllAxesFixed(fullLayout);\n    var hasUnifiedHoverLabel = isUnifiedHover(fullLayout.hovermode);\n\n    var groups = [];\n\n    function addGroup(newGroup) {\n        if(!newGroup.length) return;\n\n        var out = [];\n\n        for(var i = 0; i < newGroup.length; i++) {\n            var name = newGroup[i];\n            var B = modeBarButtons[name];\n            var v0 = B.name.toLowerCase();\n            var v1 = (B._cat || B.name).toLowerCase();\n            var found = false;\n            for(var q = 0; q < buttonsToRemove.length; q++) {\n                var t = buttonsToRemove[q].toLowerCase();\n                if(t === v0 || t === v1) {\n                    found = true;\n                    break;\n                }\n            }\n            if(found) continue;\n            out.push(modeBarButtons[name]);\n        }\n\n        groups.push(out);\n    }\n\n    // buttons common to all plot types\n    var commonGroup = ['toImage'];\n    if(context.showEditInChartStudio) commonGroup.push('editInChartStudio');\n    else if(context.showSendToCloud) commonGroup.push('sendDataToCloud');\n    addGroup(commonGroup);\n\n    var zoomGroup = [];\n    var hoverGroup = [];\n    var resetGroup = [];\n    var dragModeGroup = [];\n\n    if((hasCartesian || hasGL2D || hasPie || hasFunnelarea || hasTernary) + hasGeo + hasGL3D + hasMapbox + hasPolar + hasSmith > 1) {\n        // graphs with more than one plot types get 'union buttons'\n        // which reset the view or toggle hover labels across all subplots.\n        hoverGroup = ['toggleHover'];\n        resetGroup = ['resetViews'];\n    } else if(hasGeo) {\n        zoomGroup = ['zoomInGeo', 'zoomOutGeo'];\n        hoverGroup = ['hoverClosestGeo'];\n        resetGroup = ['resetGeo'];\n    } else if(hasGL3D) {\n        hoverGroup = ['hoverClosest3d'];\n        resetGroup = ['resetCameraDefault3d', 'resetCameraLastSave3d'];\n    } else if(hasMapbox) {\n        zoomGroup = ['zoomInMapbox', 'zoomOutMapbox'];\n        hoverGroup = ['toggleHover'];\n        resetGroup = ['resetViewMapbox'];\n    } else if(hasGL2D) {\n        hoverGroup = ['hoverClosestGl2d'];\n    } else if(hasPie) {\n        hoverGroup = ['hoverClosestPie'];\n    } else if(hasSankey) {\n        hoverGroup = ['hoverClosestCartesian', 'hoverCompareCartesian'];\n        resetGroup = ['resetViewSankey'];\n    } else { // hasPolar, hasSmith, hasTernary\n        // always show at least one hover icon.\n        hoverGroup = ['toggleHover'];\n    }\n    // if we have cartesian, allow switching between closest and compare\n    // regardless of what other types are on the plot, since they'll all\n    // just treat any truthy hovermode as 'closest'\n    if(hasCartesian) {\n        hoverGroup = ['toggleSpikelines', 'hoverClosestCartesian', 'hoverCompareCartesian'];\n    }\n    if(hasNoHover(fullData) || hasUnifiedHoverLabel) {\n        hoverGroup = [];\n    }\n\n    if((hasCartesian || hasGL2D) && !allAxesFixed) {\n        zoomGroup = ['zoomIn2d', 'zoomOut2d', 'autoScale2d'];\n        if(resetGroup[0] !== 'resetViews') resetGroup = ['resetScale2d'];\n    }\n\n    if(hasGL3D) {\n        dragModeGroup = ['zoom3d', 'pan3d', 'orbitRotation', 'tableRotation'];\n    } else if(((hasCartesian || hasGL2D) && !allAxesFixed) || hasTernary) {\n        dragModeGroup = ['zoom2d', 'pan2d'];\n    } else if(hasMapbox || hasGeo) {\n        dragModeGroup = ['pan2d'];\n    } else if(hasPolar) {\n        dragModeGroup = ['zoom2d'];\n    }\n    if(isSelectable(fullData)) {\n        dragModeGroup.push('select2d', 'lasso2d');\n    }\n\n    var enabledHoverGroup = [];\n    var enableHover = function(a) {\n        // return if already added\n        if(enabledHoverGroup.indexOf(a) !== -1) return;\n        // should be in hoverGroup\n        if(hoverGroup.indexOf(a) !== -1) {\n            enabledHoverGroup.push(a);\n        }\n    };\n    if(Array.isArray(buttonsToAdd)) {\n        var newList = [];\n        for(var i = 0; i < buttonsToAdd.length; i++) {\n            var b = buttonsToAdd[i];\n            if(typeof b === 'string') {\n                b = b.toLowerCase();\n\n                if(DRAW_MODES.indexOf(b) !== -1) {\n                    // accept pre-defined drag modes i.e. shape drawing features as string\n                    if(\n                        fullLayout._has('mapbox') || // draw shapes in paper coordinate (could be improved in future to support data coordinate, when there is no pitch)\n                        fullLayout._has('cartesian') // draw shapes in data coordinate\n                    ) {\n                        dragModeGroup.push(b);\n                    }\n                } else if(b === 'togglespikelines') {\n                    enableHover('toggleSpikelines');\n                } else if(b === 'togglehover') {\n                    enableHover('toggleHover');\n                } else if(b === 'hovercompare') {\n                    enableHover('hoverCompareCartesian');\n                } else if(b === 'hoverclosest') {\n                    enableHover('hoverClosestCartesian');\n                    enableHover('hoverClosestGeo');\n                    enableHover('hoverClosest3d');\n                    enableHover('hoverClosestGl2d');\n                    enableHover('hoverClosestPie');\n                } else if(b === 'v1hovermode') {\n                    enableHover('toggleHover');\n                    enableHover('hoverClosestCartesian');\n                    enableHover('hoverCompareCartesian');\n                    enableHover('hoverClosestGeo');\n                    enableHover('hoverClosest3d');\n                    enableHover('hoverClosestGl2d');\n                    enableHover('hoverClosestPie');\n                }\n            } else newList.push(b);\n        }\n        buttonsToAdd = newList;\n    }\n\n    addGroup(dragModeGroup);\n    addGroup(zoomGroup.concat(resetGroup));\n    addGroup(enabledHoverGroup);\n\n    return appendButtonsToGroups(groups, buttonsToAdd);\n}\n\nfunction areAllAxesFixed(fullLayout) {\n    var axList = axisIds.list({_fullLayout: fullLayout}, null, true);\n\n    for(var i = 0; i < axList.length; i++) {\n        if(!axList[i].fixedrange) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// look for traces that support selection\n// to be updated as we add more selectPoints handlers\nfunction isSelectable(fullData) {\n    var selectable = false;\n\n    for(var i = 0; i < fullData.length; i++) {\n        if(selectable) break;\n\n        var trace = fullData[i];\n\n        if(!trace._module || !trace._module.selectPoints) continue;\n\n        if(Registry.traceIs(trace, 'scatter-like')) {\n            if(scatterSubTypes.hasMarkers(trace) || scatterSubTypes.hasText(trace)) {\n                selectable = true;\n            }\n        } else if(Registry.traceIs(trace, 'box-violin')) {\n            if(trace.boxpoints === 'all' || trace.points === 'all') {\n                selectable = true;\n            }\n        } else {\n            // assume that in general if the trace module has selectPoints,\n            // then it's selectable. Scatter is an exception to this because it must\n            // have markers or text, not just be a scatter type.\n\n            selectable = true;\n        }\n    }\n\n    return selectable;\n}\n\n// check whether all trace are 'noHover'\nfunction hasNoHover(fullData) {\n    for(var i = 0; i < fullData.length; i++) {\n        if(!Registry.traceIs(fullData[i], 'noHover')) return false;\n    }\n    return true;\n}\n\nfunction appendButtonsToGroups(groups, buttons) {\n    if(buttons.length) {\n        if(Array.isArray(buttons[0])) {\n            for(var i = 0; i < buttons.length; i++) {\n                groups.push(buttons[i]);\n            }\n        } else groups.push(buttons);\n    }\n\n    return groups;\n}\n\n// fill in custom buttons referring to default mode bar buttons\nfunction fillCustomButton(originalModeBarButtons) {\n    var customButtons = extendDeep([], originalModeBarButtons);\n\n    for(var i = 0; i < customButtons.length; i++) {\n        var buttonGroup = customButtons[i];\n\n        for(var j = 0; j < buttonGroup.length; j++) {\n            var button = buttonGroup[j];\n\n            if(typeof button === 'string') {\n                if(modeBarButtons[button] !== undefined) {\n                    customButtons[i][j] = modeBarButtons[button];\n                } else {\n                    throw new Error([\n                        '*modeBarButtons* configuration options',\n                        'invalid button name'\n                    ].join(' '));\n                }\n            }\n        }\n    }\n\n    return customButtons;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}