{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Collection Data Images:\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.getImages && $options.getImages(...args))\n  }, \"Load Images\"), _hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.collectionobjectidData, (item, collectionid) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: collectionid\n    }, _toDisplayString(item.collectionobjectidData), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */)), _createTextVNode(\" \" + _toDisplayString($data.collectionobjectidData), 1 /* TEXT */)])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","onClick","_cache","args","$options","getImages","_hoisted_1","_Fragment","_renderList","$data","collectionobjectidData","item","collectionid","key","_toDisplayString","_createTextVNode"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/DjangoData.vue"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"getImages\">Load Images</button>\n    <h2>Collection Data Images:</h2>\n    <ul>\n      <li v-for=\"(item, collectionid) in collectionobjectidData\" :key=\"collectionid\">{{ item.collectionobjectidData }}</li>\n      {{ collectionobjectidData }}   \n    </ul>\n\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\n// Assuming you have a token or authentication key\nconst token = 'Token ' + \"b38c2d04f1eeabb743e5ecbe671897cae1794974\";\n\n// Set up Axios instance with default headers\nconst axiosInstance = axios.create({\n  baseURL: 'http://0.0.0.0:8000/',\n  headers: {\n    'Authorization': `${token}`,\n    'Content-Type': 'application/json', // Example of another header\n  },\n});\n\nexport default {\n    //[collectionobjectid, attachmentid, file_createddate_str, \n    //image_file, catalogeddate_str, collection_desc, \n    //collectingevent_start_str, agent_name]\n  data() {\n    return {\n      responseData: [],\n      testdic: {},\n      collectionobjectidData: {},\n      attachmentidData: {},\n      filecreateddateData: {},\n      imagefileData: [],\n      catalogeddateData: [],\n      collectiondescData: [],\n      collectingeventstartData: [],\n      agentnameData: []\n    };\n  },\n\nmethods:{\n    getImages(){\n        axiosInstance.get('collection_images')\n        .then(response =>{\n\n        // response.data is a dictionary of dictionaries of format: \n         /* collectiondictionary[collectionobjectid] = {\n            'attachmentid': value,\n            'file_createddate': value,\n            'image_file': value,\n            'catalogeddate': value,\n            'collectiondesct': value,\n            'collectingevent_start': value,\n            'agentname_collection': value,\n            'agentname_image': value\n         } */\n        \n            let jsonObject = JSON.parse(response.data);\n            collectionobjectidData = jsonObject\n            console.log(jsonObject)\n            console.log(Object.keys(jsonObject))\n            console.log(Object.getOwnPropertyNames(jsonObject).length)\n\n         // Map each inner array to the desired key\n            jsonObject.forEach(item => \n                    console.log(item)\n            );\n\n        })\n        .catch(error =>{\n            console.log(error)\n        })\n    }\n}\n//   mounted() {\n//     axiosInstance.get('collection_images')\n//       .then(response => {\n\n//          const arrayOfArrays = response.data;\n//          console.log(response.data)\n\n//          // Map each inner array to the desired key\n//         this.collectionobjectidData = arrayOfArrays.map(arr => ({ collectionobjectid: arr[0] }));\n//         this.attachmentidData = arrayOfArrays.map(arr => ({ attachmentid: arr[1] }));\n//         this.filecreateddateData = arrayOfArrays.map(arr => ({ filecreateddate: arr[2] }));\n//         this.imagefileData = arrayOfArrays.map(arr => ({ imagefile: arr[3] }));\n//         this.catalogeddateData = arrayOfArrays.map(arr => ({ catalogeddate: arr[4] }));\n//         this.collectiondescData = arrayOfArrays.map(arr => ({ collectiondesc: arr[5] }));\n//         this.collectingeventstartData = arrayOfArrays.map(arr => ({ collectingeventstart: arr[6] }));\n//         this.agentnameData = arrayOfArrays.map(arr => ({ agentname: arr[7] }));\n\n//         // You can also append the entire response data to a single key if needed\n//         this.responseData = arrayOfArrays;\n//         console.log(\"test\")\n//         console.log(JSON.stringify(this.imagefileData))\n//       })\n//       .catch(error => {\n//         console.error('Error fetching data:', error);\n//       });\n//   },\n};\n</script>\n"],"mappings":";gCAGIA,mBAAA,CAAgC,YAA5B,yBAAuB;;uBAF7BC,mBAAA,CAQM,cAPJD,mBAAA,CAA+C;IAAtCE,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;KAAE,aAAW,GACtCG,UAAgC,EAChCP,mBAAA,CAGK,c,kBAFHC,mBAAA,CAAqHO,SAAA,QAL3HC,WAAA,CAKyCC,KAAA,CAAAC,sBAAsB,EAL/D,CAKkBC,IAAI,EAAEC,YAAY;yBAA9BZ,mBAAA,CAAqH;MAAzDa,GAAG,EAAED;IAAY,GAAAE,gBAAA,CAAKH,IAAI,CAACD,sBAAsB;kCALnHK,gBAAA,CAK2H,GACrH,GAAAD,gBAAA,CAAGL,KAAA,CAAAC,sBAAsB,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}