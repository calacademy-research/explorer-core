{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  ref: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"container\"></div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\nimport * as THREE from 'three';\nimport image from '../../public/assets/skullbottom.jpg';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nconst container = ref(null);\n\nonMounted(() => {\n  if (!container.value) {\n    console.error('Container element not found');\n    return;\n  }\n\n  const scene = new THREE.Scene();\n  const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n  scene.add( new THREE.AmbientLight( 0xffffff, 1 ) );\n  var light = new THREE.PointLight( 0xffffff, 1 );\n  camera.add(light);\n  scene.add(camera); \n  \n  const renderer = new THREE.WebGLRenderer();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  container.value.appendChild(renderer.domElement);\n\n  const controls = new OrbitControls(camera, renderer.domElement);\n  controls.enableDamping = true;\n  controls.dampingFactor = 0.25;\n  controls.enableZoom = true;\n  // console.log(image);\n  const plyLoader = new PLYLoader();\n  plyLoader.load('/assets/skullbottom.ply', (geometry) => {\n    console.log(plyLoader);\n    const textureLoader = new TextureLoader();\n    //textureLoader.load('/assets/skullbottom.jpg', (texture) => {\n    textureLoader.load(image, (texture) => {  \n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n\n      camera.position.z = 5;\n\n      const animate = () => {\n        requestAnimationFrame(animate);\n        controls.update();\n        mesh.rotation.y += 0.01;\n        renderer.render(scene, camera);\n      };\n      //console.log(texture)\n      animate();\n\n    });\n\n  });\n\n  window.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  });\n\n  return () => {\n    window.removeEventListener('resize', () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n});\n</script>\n\n<style>\n  #container {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n</style>"],"mappings":";;EACOA,GAAG,EAAC;AAAW;;uBAApBC,mBAAA,CAA2B,OAA3BC,UAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}