{"ast":null,"code":"import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\nimport texturePath from '../assets/skullbottom.jpg';\nimport modelPath from './assets/skullbottom.ply';\nexport default {\n  name: 'ThreeJSRenderer',\n  mounted() {\n    this.initThree();\n  },\n  methods: {\n    initThree() {\n      const container = this.$refs.threeContainer;\n      if (container) {\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n        this.camera.position.z = 5;\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(container.clientWidth, container.clientHeight);\n        container.appendChild(this.renderer.domElement);\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        this.scene.add(ambientLight);\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(0, 1, 1).normalize();\n        this.scene.add(directionalLight);\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n        // Load the PLY file\n        const plyLoader = new PLYLoader();\n        plyLoader.load(modelPath, geometry => {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(texturePath, texture => {\n            const material = new THREE.MeshBasicMaterial({\n              map: texture\n            });\n            const mesh = new THREE.Mesh(geometry, material);\n            this.scene.add(mesh);\n          });\n        });\n        this.animate = this.animate.bind(this); // Bind the animate function to the component instance\n        this.animate();\n      } else {\n        console.error('Three.js container not found');\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      if (this.controls) {\n        this.controls.update();\n      }\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n};","map":{"version":3,"names":["THREE","OrbitControls","PLYLoader","texturePath","modelPath","name","mounted","initThree","methods","container","$refs","threeContainer","scene","Scene","camera","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","setSize","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","set","normalize","controls","plyLoader","load","geometry","textureLoader","TextureLoader","texture","material","MeshBasicMaterial","map","mesh","Mesh","animate","bind","console","error","requestAnimationFrame","update","render"],"sources":["/home/zhu/Documents/github/explorer_front/explorer_front_app/src/components/ThreeJSRenderer.vue"],"sourcesContent":["<template>\n  <div ref=\"threeContainer\"></div>\n</template>\n\n<script>\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\n//import { PLYLoader } from 'three-stdlib';\n\nimport texturePath from '../assets/skullbottom.jpg';\nimport modelPath from './assets/skullbottom.ply';\n\n\nexport default {\n  name: 'ThreeJSRenderer',\n  mounted() {\n    this.initThree();\n  },\n  methods: {\n    initThree() {\n      const container = this.$refs.threeContainer;\n      if (container) {\n        this.scene = new THREE.Scene();\n\n        this.camera = new THREE.PerspectiveCamera(\n          75,\n          container.clientWidth / container.clientHeight,\n          0.1,\n          1000\n        );\n        this.camera.position.z = 5;\n\n         this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(container.clientWidth, container.clientHeight);\n        container.appendChild(this.renderer.domElement);\n\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        this.scene.add(ambientLight);\n\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(0, 1, 1).normalize();\n        this.scene.add(directionalLight);\n\n        this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n        // Load the PLY file\n        const plyLoader = new PLYLoader();\n        plyLoader.load(modelPath, (geometry) => {\n          const textureLoader = new THREE.TextureLoader();\n          textureLoader.load(texturePath, (texture) => {\n            const material = new THREE.MeshBasicMaterial({ map: texture });\n            const mesh = new THREE.Mesh(geometry, material);\n            this.scene.add(mesh);\n          });\n        });\n\n        this.animate = this.animate.bind(this); // Bind the animate function to the component instance\n        this.animate();\n      } else {\n        console.error('Three.js container not found');\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n\n      if (this.controls) {\n        this.controls.update();\n      }\n\n      this.renderer.render(this.scene, this.camera);\n    },\n  },\n};\n</script>\n\n<style scoped>\ndiv {\n  width: 100%;\n  height: 100vh;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}